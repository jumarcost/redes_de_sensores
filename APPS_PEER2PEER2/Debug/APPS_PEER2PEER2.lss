
APPS_PEER2PEER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000031a8  0000323c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007fa  00800232  00800232  0000326e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a174  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004170  00000000  00000000  0000db5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009653  00000000  00000000  00011ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015f0  00000000  00000000  0001b320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001cc52  00000000  00000000  0001c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000559e  00000000  00000000  00039562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f0  00000000  00000000  0003eb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000953b  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	b4 c0       	rjmp	.+360    	; 0x176 <__bad_interrupt>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	ae c0       	rjmp	.+348    	; 0x176 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	a8 c0       	rjmp	.+336    	; 0x176 <__bad_interrupt>
      26:	00 00       	nop
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a4 c0       	rjmp	.+328    	; 0x176 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_17>
      48:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__vector_18>
      4c:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__vector_19>
      50:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__vector_20>
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c0       	rjmp	.+280    	; 0x176 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	88 c0       	rjmp	.+272    	; 0x176 <__bad_interrupt>
      66:	00 00       	nop
      68:	86 c0       	rjmp	.+268    	; 0x176 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	80 c0       	rjmp	.+256    	; 0x176 <__bad_interrupt>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 93 11 	jmp	0x2326	; 0x2326 <__vector_32>
      84:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_33>
      88:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__vector_34>
      8c:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__vector_35>
      90:	c4 c3       	rjmp	.+1928   	; 0x81a <__vector_36>
      92:	00 00       	nop
      94:	70 c0       	rjmp	.+224    	; 0x176 <__bad_interrupt>
      96:	00 00       	nop
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 47 12 	jmp	0x248e	; 0x248e <__vector_42>
      ac:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_43>
      b0:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__vector_44>
      b4:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__vector_45>
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__vector_47>
      c0:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__vector_48>
      c4:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_49>
      c8:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_50>
      cc:	54 c0       	rjmp	.+168    	; 0x176 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	52 c0       	rjmp	.+164    	; 0x176 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4e c0       	rjmp	.+156    	; 0x176 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4c c0       	rjmp	.+152    	; 0x176 <__bad_interrupt>
      de:	00 00       	nop
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	48 c0       	rjmp	.+144    	; 0x176 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	46 c0       	rjmp	.+140    	; 0x176 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	44 c0       	rjmp	.+136    	; 0x176 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	42 c0       	rjmp	.+132    	; 0x176 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	40 c0       	rjmp	.+128    	; 0x176 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3e c0       	rjmp	.+124    	; 0x176 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3c c0       	rjmp	.+120    	; 0x176 <__bad_interrupt>
      fe:	00 00       	nop
     100:	3a c0       	rjmp	.+116    	; 0x176 <__bad_interrupt>
     102:	00 00       	nop
     104:	38 c0       	rjmp	.+112    	; 0x176 <__bad_interrupt>
     106:	00 00       	nop
     108:	36 c0       	rjmp	.+108    	; 0x176 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	34 c0       	rjmp	.+104    	; 0x176 <__bad_interrupt>
     10e:	00 00       	nop
     110:	32 c0       	rjmp	.+100    	; 0x176 <__bad_interrupt>
     112:	00 00       	nop
     114:	30 c0       	rjmp	.+96     	; 0x176 <__bad_interrupt>
     116:	00 00       	nop
     118:	2e c0       	rjmp	.+92     	; 0x176 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2c c0       	rjmp	.+88     	; 0x176 <__bad_interrupt>
     11e:	00 00       	nop
     120:	2a c0       	rjmp	.+84     	; 0x176 <__bad_interrupt>
     122:	00 00       	nop
     124:	28 c0       	rjmp	.+80     	; 0x176 <__bad_interrupt>
     126:	00 00       	nop
     128:	26 c0       	rjmp	.+76     	; 0x176 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	24 c0       	rjmp	.+72     	; 0x176 <__bad_interrupt>
     12e:	00 00       	nop
     130:	22 c0       	rjmp	.+68     	; 0x176 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 ea       	ldi	r30, 0xA8	; 168
     14c:	f1 e3       	ldi	r31, 0x31	; 49
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 33       	cpi	r26, 0x32	; 50
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e0       	ldi	r18, 0x0A	; 10
     160:	a2 e3       	ldi	r26, 0x32	; 50
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ac 32       	cpi	r26, 0x2C	; 44
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <main>
     172:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <common_tc_read_count>:
     178:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <tmr_read_count>
     17c:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <timer_mul_var>
     180:	22 23       	and	r18, r18
     182:	d9 f0       	breq	.+54     	; 0x1ba <common_tc_read_count+0x42>
     184:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <timer_multiplier>
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	20 91 36 02 	lds	r18, 0x0236	; 0x800236 <timer_mul_var>
     18e:	64 2f       	mov	r22, r20
     190:	73 2f       	mov	r23, r19
     192:	0e 94 77 16 	call	0x2cee	; 0x2cee <__udivmodhi4>
     196:	fb 01       	movw	r30, r22
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	9f ef       	ldi	r25, 0xFF	; 255
     19c:	64 2f       	mov	r22, r20
     19e:	73 2f       	mov	r23, r19
     1a0:	0e 94 77 16 	call	0x2cee	; 0x2cee <__udivmodhi4>
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	62 9f       	mul	r22, r18
     1a8:	c0 01       	movw	r24, r0
     1aa:	63 9f       	mul	r22, r19
     1ac:	90 0d       	add	r25, r0
     1ae:	72 9f       	mul	r23, r18
     1b0:	90 0d       	add	r25, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	8e 0f       	add	r24, r30
     1b6:	9f 1f       	adc	r25, r31
     1b8:	08 95       	ret
     1ba:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <timer_multiplier>
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 77 16 	call	0x2cee	; 0x2cee <__udivmodhi4>
     1c4:	cb 01       	movw	r24, r22
     1c6:	08 95       	ret

000001c8 <common_tc_compare_stop>:
     1c8:	0e 94 5f 10 	call	0x20be	; 0x20be <tmr_disable_cc_interrupt>
     1cc:	0e 94 83 10 	call	0x2106	; 0x2106 <save_cpu_interrupt>
     1d0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
     1d4:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <__data_end+0x1>
     1d8:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <__data_end+0x2>
     1dc:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <__data_end+0x3>
     1e0:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <compare_value+0x1>
     1e4:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <compare_value>
     1e8:	0c 94 90 10 	jmp	0x2120	; 0x2120 <restore_cpu_interrupt>

000001ec <common_tc_overflow_stop>:
     1ec:	0e 94 6d 10 	call	0x20da	; 0x20da <tmr_disable_ovf_interrupt>
     1f0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <timer_mul_var>
     1f4:	08 95       	ret

000001f6 <common_tc_stop>:
     1f6:	e8 df       	rcall	.-48     	; 0x1c8 <common_tc_compare_stop>
     1f8:	f9 df       	rcall	.-14     	; 0x1ec <common_tc_overflow_stop>
     1fa:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <tmr_stop>

000001fe <common_tc_delay>:
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	ec 01       	movw	r28, r24
     208:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <tmr_read_count>
     20c:	8c 01       	movw	r16, r24
     20e:	be 01       	movw	r22, r28
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	20 91 21 0a 	lds	r18, 0x0A21	; 0x800a21 <timer_multiplier>
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__mulsi3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	a8 01       	movw	r20, r16
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 0f       	add	r20, r24
     22e:	59 1f       	adc	r21, r25
     230:	6a 1f       	adc	r22, r26
     232:	7b 1f       	adc	r23, r27
     234:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <__data_end>
     238:	50 93 33 02 	sts	0x0233, r21	; 0x800233 <__data_end+0x1>
     23c:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <__data_end+0x2>
     240:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <__data_end+0x3>
     244:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <__data_end>
     248:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <__data_end+0x1>
     24c:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <__data_end+0x2>
     250:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <__data_end+0x3>
     254:	ab 01       	movw	r20, r22
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <__data_end>
     25e:	50 93 33 02 	sts	0x0233, r21	; 0x800233 <__data_end+0x1>
     262:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <__data_end+0x2>
     266:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <__data_end+0x3>
     26a:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <__data_end>
     26e:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <__data_end+0x1>
     272:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <__data_end+0x2>
     276:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <__data_end+0x3>
     27a:	41 15       	cp	r20, r1
     27c:	51 05       	cpc	r21, r1
     27e:	61 05       	cpc	r22, r1
     280:	71 05       	cpc	r23, r1
     282:	91 f0       	breq	.+36     	; 0x2a8 <common_tc_delay+0xaa>
     284:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <__data_end>
     288:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <__data_end+0x1>
     28c:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <__data_end+0x2>
     290:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <__data_end+0x3>
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	08 0f       	add	r16, r24
     298:	19 1f       	adc	r17, r25
     29a:	10 93 38 02 	sts	0x0238, r17	; 0x800238 <compare_value+0x1>
     29e:	00 93 37 02 	sts	0x0237, r16	; 0x800237 <compare_value>
     2a2:	0e 94 5f 10 	call	0x20be	; 0x20be <tmr_disable_cc_interrupt>
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <common_tc_delay+0xba>
     2a8:	08 0f       	add	r16, r24
     2aa:	19 1f       	adc	r17, r25
     2ac:	10 93 38 02 	sts	0x0238, r17	; 0x800238 <compare_value+0x1>
     2b0:	00 93 37 02 	sts	0x0237, r16	; 0x800237 <compare_value>
     2b4:	0e 94 66 10 	call	0x20cc	; 0x20cc <tmr_enable_cc_interrupt>
     2b8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <compare_value>
     2bc:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <compare_value+0x1>
     2c0:	84 36       	cpi	r24, 0x64	; 100
     2c2:	91 05       	cpc	r25, r1
     2c4:	30 f4       	brcc	.+12     	; 0x2d2 <common_tc_delay+0xd4>
     2c6:	8c 59       	subi	r24, 0x9C	; 156
     2c8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ca:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <compare_value+0x1>
     2ce:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <compare_value>
     2d2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <compare_value>
     2d6:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <compare_value+0x1>
     2da:	0e 94 78 10 	call	0x20f0	; 0x20f0 <tmr_write_cmpreg>
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <common_tc_init>:
     2e8:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <timer_mul_var>
     2ec:	0e 94 92 10 	call	0x2124	; 0x2124 <tmr_init>
     2f0:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <timer_multiplier>
     2f4:	08 95       	ret

000002f6 <tmr_ovf_callback>:
     2f6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     2fa:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
     2fe:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <__data_end+0x2>
     302:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <__data_end+0x3>
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	a1 05       	cpc	r26, r1
     30a:	b1 05       	cpc	r27, r1
     30c:	c9 f0       	breq	.+50     	; 0x340 <tmr_ovf_callback+0x4a>
     30e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     312:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
     316:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <__data_end+0x2>
     31a:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <__data_end+0x3>
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     328:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__data_end+0x1>
     32c:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__data_end+0x2>
     330:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__data_end+0x3>
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	a1 05       	cpc	r26, r1
     338:	b1 05       	cpc	r27, r1
     33a:	11 f4       	brne	.+4      	; 0x340 <tmr_ovf_callback+0x4a>
     33c:	0e 94 66 10 	call	0x20cc	; 0x20cc <tmr_enable_cc_interrupt>
     340:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer_mul_var>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer_mul_var>
     34a:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <timer_multiplier>
     34e:	89 17       	cp	r24, r25
     350:	48 f0       	brcs	.+18     	; 0x364 <tmr_ovf_callback+0x6e>
     352:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <timer_mul_var>
     356:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <common_tc_ovf_callback>
     35a:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <common_tc_ovf_callback+0x1>
     35e:	30 97       	sbiw	r30, 0x00	; 0
     360:	09 f0       	breq	.+2      	; 0x364 <tmr_ovf_callback+0x6e>
     362:	19 95       	eicall
     364:	08 95       	ret

00000366 <tmr_cca_callback>:
     366:	0e 94 5f 10 	call	0x20be	; 0x20be <tmr_disable_cc_interrupt>
     36a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <common_tc_cca_callback>
     36e:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <common_tc_cca_callback+0x1>
     372:	30 97       	sbiw	r30, 0x00	; 0
     374:	09 f0       	breq	.+2      	; 0x378 <tmr_cca_callback+0x12>
     376:	19 95       	eicall
     378:	08 95       	ret

0000037a <set_common_tc_overflow_callback>:
     37a:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <common_tc_ovf_callback+0x1>
     37e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <common_tc_ovf_callback>
     382:	08 95       	ret

00000384 <set_common_tc_expiry_callback>:
     384:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <common_tc_cca_callback+0x1>
     388:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <common_tc_cca_callback>
     38c:	08 95       	ret

0000038e <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     39e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a2:	8f b7       	in	r24, 0x3f	; 63
     3a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3a6:	f8 94       	cli
	return flags;
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     3aa:	5f 93       	push	r21
     3ac:	50 e8       	ldi	r21, 0x80	; 128
     3ae:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     3b8:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ba:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	1f 92       	push	r1
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3ce:	9f b7       	in	r25, 0x3f	; 63
     3d0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     3d2:	f8 94       	cli
	return flags;
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	40 f4       	brcc	.+16     	; 0x3ea <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     3da:	e8 2f       	mov	r30, r24
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 59       	subi	r30, 0x9C	; 156
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	60 95       	com	r22
     3e4:	80 81       	ld	r24, Z
     3e6:	68 23       	and	r22, r24
     3e8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ea:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     3ec:	0f 90       	pop	r0
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3fe:	9f b7       	in	r25, 0x3f	; 63
     400:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     402:	f8 94       	cli
	return flags;
     404:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	38 f4       	brcc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		*(reg + port) |= id;
     40a:	e8 2f       	mov	r30, r24
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ec 59       	subi	r30, 0x9C	; 156
     410:	ff 4f       	sbci	r31, 0xFF	; 255
     412:	80 81       	ld	r24, Z
     414:	68 2b       	or	r22, r24
     416:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     418:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	7c 01       	movw	r14, r24
     430:	8b 01       	movw	r16, r22
     432:	ea 01       	movw	r28, r20
	while (len) {
     434:	20 97       	sbiw	r28, 0x00	; 0
     436:	39 f0       	breq	.+14     	; 0x446 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     438:	f8 01       	movw	r30, r16
     43a:	61 91       	ld	r22, Z+
     43c:	8f 01       	movw	r16, r30
     43e:	c7 01       	movw	r24, r14
     440:	54 d0       	rcall	.+168    	; 0x4ea <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
     442:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
     444:	c9 f7       	brne	.-14     	; 0x438 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	08 95       	ret

00000456 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
     464:	8b 01       	movw	r16, r22
     466:	ea 01       	movw	r28, r20
	while (len) {
     468:	20 97       	sbiw	r28, 0x00	; 0
     46a:	39 f0       	breq	.+14     	; 0x47a <usart_serial_read_packet+0x24>
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     46c:	c7 01       	movw	r24, r14
     46e:	44 d0       	rcall	.+136    	; 0x4f8 <usart_getchar>
     470:	f8 01       	movw	r30, r16
     472:	81 93       	st	Z+, r24
     474:	8f 01       	movw	r16, r30
		usart_serial_getchar(usart, data);
		len--;
     476:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
     478:	c9 f7       	brne	.-14     	; 0x46c <usart_serial_read_packet+0x16>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	08 95       	ret

0000048a <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	1f 92       	push	r1
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     494:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <stdio_base>
     498:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <stdio_base+0x1>
     49c:	e0 91 77 09 	lds	r30, 0x0977	; 0x800977 <ptr_get>
     4a0:	f0 91 78 09 	lds	r31, 0x0978	; 0x800978 <ptr_get+0x1>
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	19 95       	eicall
	return c;
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ae:	08 2e       	mov	r0, r24
     4b0:	00 0c       	add	r0, r0
     4b2:	99 0b       	sbc	r25, r25
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     4bc:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     4be:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <stdio_base>
     4c2:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <stdio_base+0x1>
     4c6:	e0 91 79 09 	lds	r30, 0x0979	; 0x800979 <ptr_put>
     4ca:	f0 91 7a 09 	lds	r31, 0x097A	; 0x80097a <ptr_put+0x1>
     4ce:	19 95       	eicall
     4d0:	99 23       	and	r25, r25
     4d2:	1c f0       	brlt	.+6      	; 0x4da <_write+0x1e>
		return -1;
	}
	return 1;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     4de:	08 95       	ret

000004e0 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     4e0:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     4e2:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     4e4:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     4e6:	74 9a       	sbi	0x0e, 4	; 14
     4e8:	08 95       	ret

000004ea <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     4ea:	fc 01       	movw	r30, r24
     4ec:	90 81       	ld	r25, Z
     4ee:	95 ff       	sbrs	r25, 5
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <usart_putchar+0x2>
     4f2:	66 83       	std	Z+6, r22	; 0x06
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	08 95       	ret

000004f8 <usart_getchar>:
     4f8:	fc 01       	movw	r30, r24
     4fa:	90 81       	ld	r25, Z
     4fc:	99 23       	and	r25, r25
     4fe:	ec f7       	brge	.-6      	; 0x4fa <usart_getchar+0x2>
     500:	86 81       	ldd	r24, Z+6	; 0x06
     502:	08 95       	ret

00000504 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     504:	4f 92       	push	r4
     506:	5f 92       	push	r5
     508:	6f 92       	push	r6
     50a:	7f 92       	push	r7
     50c:	8f 92       	push	r8
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	ec 01       	movw	r28, r24
     526:	6a 01       	movw	r12, r20
     528:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     52a:	28 01       	movw	r4, r16
     52c:	39 01       	movw	r6, r18
     52e:	68 94       	set
     530:	12 f8       	bld	r1, 2
     532:	76 94       	lsr	r7
     534:	67 94       	ror	r6
     536:	57 94       	ror	r5
     538:	47 94       	ror	r4
     53a:	16 94       	lsr	r1
     53c:	d1 f7       	brne	.-12     	; 0x532 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     53e:	88 81       	ld	r24, Y
     540:	81 fd       	sbrc	r24, 1
     542:	0e c0       	rjmp	.+28     	; 0x560 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     544:	48 01       	movw	r8, r16
     546:	59 01       	movw	r10, r18
     548:	07 2e       	mov	r0, r23
     54a:	73 e1       	ldi	r23, 0x13	; 19
     54c:	b6 94       	lsr	r11
     54e:	a7 94       	ror	r10
     550:	97 94       	ror	r9
     552:	87 94       	ror	r8
     554:	7a 95       	dec	r23
     556:	d1 f7       	brne	.-12     	; 0x54c <usart_set_baudrate+0x48>
     558:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     55a:	d3 01       	movw	r26, r6
     55c:	c2 01       	movw	r24, r4
     55e:	15 c0       	rjmp	.+42     	; 0x58a <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     560:	d9 01       	movw	r26, r18
     562:	c8 01       	movw	r24, r16
     564:	68 94       	set
     566:	13 f8       	bld	r1, 3
     568:	b6 95       	lsr	r27
     56a:	a7 95       	ror	r26
     56c:	97 95       	ror	r25
     56e:	87 95       	ror	r24
     570:	16 94       	lsr	r1
     572:	d1 f7       	brne	.-12     	; 0x568 <usart_set_baudrate+0x64>
		min_rate /= 2;
     574:	48 01       	movw	r8, r16
     576:	59 01       	movw	r10, r18
     578:	07 2e       	mov	r0, r23
     57a:	74 e1       	ldi	r23, 0x14	; 20
     57c:	b6 94       	lsr	r11
     57e:	a7 94       	ror	r10
     580:	97 94       	ror	r9
     582:	87 94       	ror	r8
     584:	7a 95       	dec	r23
     586:	d1 f7       	brne	.-12     	; 0x57c <usart_set_baudrate+0x78>
     588:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     58a:	8c 15       	cp	r24, r12
     58c:	9d 05       	cpc	r25, r13
     58e:	ae 05       	cpc	r26, r14
     590:	bf 05       	cpc	r27, r15
     592:	78 f1       	brcs	.+94     	; 0x5f2 <usart_set_baudrate+0xee>
     594:	c8 14       	cp	r12, r8
     596:	d9 04       	cpc	r13, r9
     598:	ea 04       	cpc	r14, r10
     59a:	fb 04       	cpc	r15, r11
     59c:	60 f1       	brcs	.+88     	; 0x5f6 <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     59e:	88 81       	ld	r24, Y
     5a0:	81 ff       	sbrs	r24, 1
     5a2:	10 c0       	rjmp	.+32     	; 0x5c4 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     5a4:	a7 01       	movw	r20, r14
     5a6:	96 01       	movw	r18, r12
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	c3 01       	movw	r24, r6
     5b2:	b2 01       	movw	r22, r4
     5b4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
     5b8:	da 01       	movw	r26, r20
     5ba:	c9 01       	movw	r24, r18
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	a1 09       	sbc	r26, r1
     5c0:	b1 09       	sbc	r27, r1
     5c2:	13 c0       	rjmp	.+38     	; 0x5ea <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     5c4:	c9 01       	movw	r24, r18
     5c6:	b8 01       	movw	r22, r16
     5c8:	68 94       	set
     5ca:	13 f8       	bld	r1, 3
     5cc:	96 95       	lsr	r25
     5ce:	87 95       	ror	r24
     5d0:	77 95       	ror	r23
     5d2:	67 95       	ror	r22
     5d4:	16 94       	lsr	r1
     5d6:	d1 f7       	brne	.-12     	; 0x5cc <usart_set_baudrate+0xc8>
     5d8:	a7 01       	movw	r20, r14
     5da:	96 01       	movw	r18, r12
     5dc:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__udivmodsi4>
     5e0:	da 01       	movw	r26, r20
     5e2:	c9 01       	movw	r24, r18
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	a1 09       	sbc	r26, r1
     5e8:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     5ea:	9d 83       	std	Y+5, r25	; 0x05
     5ec:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <usart_set_baudrate+0xf4>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	9f 90       	pop	r9
     60e:	8f 90       	pop	r8
     610:	7f 90       	pop	r7
     612:	6f 90       	pop	r6
     614:	5f 90       	pop	r5
     616:	4f 90       	pop	r4
     618:	08 95       	ret

0000061a <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
     624:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     626:	80 3c       	cpi	r24, 0xC0	; 192
     628:	91 05       	cpc	r25, r1
     62a:	21 f4       	brne	.+8      	; 0x634 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	c9 de       	rcall	.-622    	; 0x3c4 <sysclk_enable_module>
     632:	06 c0       	rjmp	.+12     	; 0x640 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     634:	88 3c       	cpi	r24, 0xC8	; 200
     636:	91 05       	cpc	r25, r1
     638:	19 f4       	brne	.+6      	; 0x640 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	c2 de       	rcall	.-636    	; 0x3c4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	8f 73       	andi	r24, 0x3F	; 63
     644:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     646:	f8 01       	movw	r30, r16
     648:	26 81       	ldd	r18, Z+6	; 0x06
     64a:	35 81       	ldd	r19, Z+5	; 0x05
     64c:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	48 2f       	mov	r20, r24
     652:	43 70       	andi	r20, 0x03	; 3
     654:	44 0f       	add	r20, r20
     656:	99 7f       	andi	r25, 0xF9	; 249
     658:	94 2b       	or	r25, r20
     65a:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	84 70       	andi	r24, 0x04	; 4
     660:	88 0f       	add	r24, r24
     662:	88 0f       	add	r24, r24
     664:	9b 7f       	andi	r25, 0xFB	; 251
     666:	89 2b       	or	r24, r25
     668:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     66a:	8a 81       	ldd	r24, Y+2	; 0x02
     66c:	8f 7c       	andi	r24, 0xCF	; 207
     66e:	83 2b       	or	r24, r19
     670:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     672:	9a 81       	ldd	r25, Y+2	; 0x02
     674:	97 7f       	andi	r25, 0xF7	; 247
     676:	82 2f       	mov	r24, r18
     678:	88 0f       	add	r24, r24
     67a:	88 0f       	add	r24, r24
     67c:	88 0f       	add	r24, r24
     67e:	89 2b       	or	r24, r25
     680:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     682:	40 81       	ld	r20, Z
     684:	51 81       	ldd	r21, Z+1	; 0x01
     686:	62 81       	ldd	r22, Z+2	; 0x02
     688:	73 81       	ldd	r23, Z+3	; 0x03
     68a:	00 e0       	ldi	r16, 0x00	; 0
     68c:	12 e1       	ldi	r17, 0x12	; 18
     68e:	2a e7       	ldi	r18, 0x7A	; 122
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	ce 01       	movw	r24, r28
     694:	37 df       	rcall	.-402    	; 0x504 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     696:	99 81       	ldd	r25, Y+1	; 0x01
     698:	98 60       	ori	r25, 0x08	; 8
     69a:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     69c:	99 81       	ldd	r25, Y+1	; 0x01
     69e:	90 61       	ori	r25, 0x10	; 16
     6a0:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <usart_serial_getchar>:
	if (back >= 1) {
		return c;
	} else {
		return (-1);
	}
}
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	eb 01       	movw	r28, r22
     6b2:	22 df       	rcall	.-444    	; 0x4f8 <usart_getchar>
     6b4:	88 83       	st	Y, r24
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <usart_serial_putchar>:
     6bc:	16 cf       	rjmp	.-468    	; 0x4ea <usart_putchar>
     6be:	08 95       	ret

000006c0 <sio2host_init>:
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	27 97       	sbiw	r28, 0x07	; 7
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	08 ec       	ldi	r16, 0xC8	; 200
     6da:	10 e0       	ldi	r17, 0x00	; 0
     6dc:	10 93 7c 09 	sts	0x097C, r17	; 0x80097c <stdio_base+0x1>
     6e0:	00 93 7b 09 	sts	0x097B, r16	; 0x80097b <stdio_base>
     6e4:	8e e5       	ldi	r24, 0x5E	; 94
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <ptr_put+0x1>
     6ec:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <ptr_put>
     6f0:	86 e5       	ldi	r24, 0x56	; 86
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	90 93 78 09 	sts	0x0978, r25	; 0x800978 <ptr_get+0x1>
     6f8:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <ptr_get>
     6fc:	ea e0       	ldi	r30, 0x0A	; 10
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	84 81       	ldd	r24, Z+4	; 0x04
     702:	8d 83       	std	Y+5, r24	; 0x05
     704:	85 81       	ldd	r24, Z+5	; 0x05
     706:	8e 83       	std	Y+6, r24	; 0x06
     708:	86 81       	ldd	r24, Z+6	; 0x06
     70a:	8f 83       	std	Y+7, r24	; 0x07
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	a2 81       	ldd	r26, Z+2	; 0x02
     712:	b3 81       	ldd	r27, Z+3	; 0x03
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	9a 83       	std	Y+2, r25	; 0x02
     718:	ab 83       	std	Y+3, r26	; 0x03
     71a:	bc 83       	std	Y+4, r27	; 0x04
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	88 ec       	ldi	r24, 0xC8	; 200
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	79 df       	rcall	.-270    	; 0x61a <usart_init_rs232>
     728:	65 e4       	ldi	r22, 0x45	; 69
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	8e e5       	ldi	r24, 0x5E	; 94
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	0e 94 24 17 	call	0x2e48	; 0x2e48 <fdevopen>
     734:	f8 01       	movw	r30, r16
     736:	81 81       	ldd	r24, Z+1	; 0x01
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	81 83       	std	Z+1, r24	; 0x01
     73c:	27 96       	adiw	r28, 0x07	; 7
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <sio2host_tx>:
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	8c 01       	movw	r16, r24
     75e:	f6 2e       	mov	r15, r22
     760:	c6 2f       	mov	r28, r22
     762:	d0 e0       	ldi	r29, 0x00	; 0
     764:	ae 01       	movw	r20, r28
     766:	b8 01       	movw	r22, r16
     768:	88 ec       	ldi	r24, 0xC8	; 200
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	5a de       	rcall	.-844    	; 0x422 <usart_serial_write_packet>
     76e:	81 11       	cpse	r24, r1
     770:	f9 cf       	rjmp	.-14     	; 0x764 <sio2host_tx+0x12>
     772:	8f 2d       	mov	r24, r15
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	08 95       	ret

00000780 <sio2host_rx>:
     780:	dc 01       	movw	r26, r24
     782:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <serial_rx_buf_tail>
     786:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <serial_rx_buf_head>
     78a:	89 17       	cp	r24, r25
     78c:	28 f0       	brcs	.+10     	; 0x798 <sio2host_rx+0x18>
     78e:	28 2f       	mov	r18, r24
     790:	29 1b       	sub	r18, r25
     792:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <serial_rx_count>
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <sio2host_rx+0x22>
     798:	2c e9       	ldi	r18, 0x9C	; 156
     79a:	28 0f       	add	r18, r24
     79c:	29 1b       	sub	r18, r25
     79e:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <serial_rx_count>
     7a2:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <serial_rx_count>
     7a6:	99 23       	and	r25, r25
     7a8:	31 f1       	breq	.+76     	; 0x7f6 <sio2host_rx+0x76>
     7aa:	9c 39       	cpi	r25, 0x9C	; 156
     7ac:	40 f0       	brcs	.+16     	; 0x7be <sio2host_rx+0x3e>
     7ae:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <serial_rx_buf_head>
     7b2:	8c e9       	ldi	r24, 0x9C	; 156
     7b4:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <serial_rx_count>
     7b8:	6c 39       	cpi	r22, 0x9C	; 156
     7ba:	38 f4       	brcc	.+14     	; 0x7ca <sio2host_rx+0x4a>
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <sio2host_rx+0x44>
     7be:	96 17       	cp	r25, r22
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <sio2host_rx+0x44>
     7c2:	69 2f       	mov	r22, r25
     7c4:	61 11       	cpse	r22, r1
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <sio2host_rx+0x4c>
     7c8:	18 c0       	rjmp	.+48     	; 0x7fa <sio2host_rx+0x7a>
     7ca:	6c e9       	ldi	r22, 0x9C	; 156
     7cc:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <serial_rx_buf_head>
     7d0:	26 2f       	mov	r18, r22
     7d2:	e9 2f       	mov	r30, r25
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	e0 5c       	subi	r30, 0xC0	; 192
     7d8:	fd 4f       	sbci	r31, 0xFD	; 253
     7da:	30 81       	ld	r19, Z
     7dc:	3d 93       	st	X+, r19
     7de:	21 50       	subi	r18, 0x01	; 1
     7e0:	9b 39       	cpi	r25, 0x9B	; 155
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <sio2host_rx+0x68>
     7e4:	9f 5f       	subi	r25, 0xFF	; 255
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <sio2host_rx+0x6a>
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	21 11       	cpse	r18, r1
     7ec:	f2 cf       	rjmp	.-28     	; 0x7d2 <sio2host_rx+0x52>
     7ee:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <serial_rx_buf_head>
     7f2:	86 2f       	mov	r24, r22
     7f4:	08 95       	ret
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	08 95       	ret

000007fe <sio2host_putchar>:
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	1f 92       	push	r1
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	a0 df       	rcall	.-192    	; 0x752 <sio2host_tx>
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <__vector_36>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     81a:	1f 92       	push	r1
     81c:	0f 92       	push	r0
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	0f 92       	push	r0
     822:	11 24       	eor	r1, r1
     824:	0b b6       	in	r0, 0x3b	; 59
     826:	0f 92       	push	r0
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	1f 92       	push	r1
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	88 ec       	ldi	r24, 0xC8	; 200
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	fe dd       	rcall	.-1028   	; 0x456 <usart_serial_read_packet>
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     85a:	f8 94       	cli

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     85c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <serial_rx_buf_tail>
     860:	e8 2f       	mov	r30, r24
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	e0 5c       	subi	r30, 0xC0	; 192
     866:	fd 4f       	sbci	r31, 0xFD	; 253
     868:	99 81       	ldd	r25, Y+1	; 0x01
     86a:	90 83       	st	Z, r25

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     86c:	8b 39       	cpi	r24, 0x9B	; 155
     86e:	19 f4       	brne	.+6      	; 0x876 <__vector_36+0x5c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     870:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <serial_rx_buf_tail>
     874:	03 c0       	rjmp	.+6      	; 0x87c <__vector_36+0x62>
	} else {
		serial_rx_buf_tail++;
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <serial_rx_buf_tail>
	}

	cpu_irq_enable();
     87c:	78 94       	sei
}
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	bf 91       	pop	r27
     88a:	af 91       	pop	r26
     88c:	9f 91       	pop	r25
     88e:	8f 91       	pop	r24
     890:	7f 91       	pop	r23
     892:	6f 91       	pop	r22
     894:	5f 91       	pop	r21
     896:	4f 91       	pop	r20
     898:	3f 91       	pop	r19
     89a:	2f 91       	pop	r18
     89c:	0f 90       	pop	r0
     89e:	0b be       	out	0x3b, r0	; 59
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <NWK_Init>:

		cl += 25;
	}

	return 255;
}
     8aa:	ed e7       	ldi	r30, 0x7D	; 125
     8ac:	f9 e0       	ldi	r31, 0x09	; 9
     8ae:	14 82       	std	Z+4, r1	; 0x04
     8b0:	15 82       	std	Z+5, r1	; 0x05
     8b2:	11 82       	std	Z+1, r1	; 0x01
     8b4:	10 82       	st	Z, r1
     8b6:	17 aa       	std	Z+55, r1	; 0x37
     8b8:	16 aa       	std	Z+54, r1	; 0x36
     8ba:	e3 e8       	ldi	r30, 0x83	; 131
     8bc:	f9 e0       	ldi	r31, 0x09	; 9
     8be:	83 ea       	ldi	r24, 0xA3	; 163
     8c0:	99 e0       	ldi	r25, 0x09	; 9
     8c2:	11 92       	st	Z+, r1
     8c4:	11 92       	st	Z+, r1
     8c6:	e8 17       	cp	r30, r24
     8c8:	f9 07       	cpc	r31, r25
     8ca:	d9 f7       	brne	.-10     	; 0x8c2 <NWK_Init+0x18>
     8cc:	ad d7       	rcall	.+3930   	; 0x1828 <nwkTxInit>
     8ce:	65 d3       	rcall	.+1738   	; 0xf9a <nwkRxInit>
     8d0:	18 d1       	rcall	.+560    	; 0xb02 <nwkFrameInit>
     8d2:	43 d0       	rcall	.+134    	; 0x95a <nwkDataReqInit>
     8d4:	96 d1       	rcall	.+812    	; 0xc02 <nwkRouteInit>
     8d6:	04 c6       	rjmp	.+3080   	; 0x14e0 <nwkSecurityInit>
     8d8:	08 95       	ret

000008da <NWK_SetAddr>:
     8da:	90 93 7e 09 	sts	0x097E, r25	; 0x80097e <nwkIb+0x1>
     8de:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <nwkIb>
     8e2:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <PHY_SetShortAddr>
     8e6:	08 95       	ret

000008e8 <NWK_SetPanId>:
     8e8:	90 93 80 09 	sts	0x0980, r25	; 0x800980 <nwkIb+0x3>
     8ec:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <nwkIb+0x2>
     8f0:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <PHY_SetPanId>
     8f4:	08 95       	ret

000008f6 <NWK_OpenEndpoint>:
     8f6:	e8 2f       	mov	r30, r24
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ed 57       	subi	r30, 0x7D	; 125
     900:	f6 4f       	sbci	r31, 0xF6	; 246
     902:	71 83       	std	Z+1, r23	; 0x01
     904:	60 83       	st	Z, r22
     906:	08 95       	ret

00000908 <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
     908:	9a d3       	rcall	.+1844   	; 0x103e <nwkRxTaskHandler>
	nwkTxTaskHandler();
     90a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
     90e:	4e d0       	rcall	.+156    	; 0x9ac <nwkDataReqTaskHandler>
     910:	3e c6       	rjmp	.+3196   	; 0x158e <nwkSecurityTaskHandler>
     912:	08 95       	ret

00000914 <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     914:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <nwkDataReqQueue>
     918:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <nwkDataReqQueue+0x1>
     91c:	30 97       	sbiw	r30, 0x00	; 0
     91e:	d9 f0       	breq	.+54     	; 0x956 <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
     920:	22 81       	ldd	r18, Z+2	; 0x02
     922:	33 81       	ldd	r19, Z+3	; 0x03
     924:	82 17       	cp	r24, r18
     926:	93 07       	cpc	r25, r19
     928:	89 f4       	brne	.+34     	; 0x94c <nwkDataReqTxConf+0x38>
     92a:	05 c0       	rjmp	.+10     	; 0x936 <nwkDataReqTxConf+0x22>
     92c:	22 81       	ldd	r18, Z+2	; 0x02
     92e:	33 81       	ldd	r19, Z+3	; 0x03
     930:	28 17       	cp	r18, r24
     932:	39 07       	cpc	r19, r25
     934:	59 f4       	brne	.+22     	; 0x94c <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
     936:	dc 01       	movw	r26, r24
     938:	ad 57       	subi	r26, 0x7D	; 125
     93a:	bf 4f       	sbci	r27, 0xFF	; 255
     93c:	2c 91       	ld	r18, X
     93e:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
     940:	13 96       	adiw	r26, 0x03	; 3
     942:	2c 91       	ld	r18, X
     944:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
     946:	22 e0       	ldi	r18, 0x02	; 2
     948:	24 83       	std	Z+4, r18	; 0x04
			break;
     94a:	05 c0       	rjmp	.+10     	; 0x956 <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     94c:	01 90       	ld	r0, Z+
     94e:	f0 81       	ld	r31, Z
     950:	e0 2d       	mov	r30, r0
     952:	30 97       	sbiw	r30, 0x00	; 0
     954:	59 f7       	brne	.-42     	; 0x92c <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
     956:	12 c1       	rjmp	.+548    	; 0xb7c <nwkFrameFree>
     958:	08 95       	ret

0000095a <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
     95a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <nwkDataReqQueue+0x1>
     95e:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <nwkDataReqQueue>
     962:	08 95       	ret

00000964 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     964:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
     966:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
     968:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
     96a:	13 82       	std	Z+3, r1	; 0x03
     96c:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
     96e:	ad e7       	ldi	r26, 0x7D	; 125
     970:	b9 e0       	ldi	r27, 0x09	; 9
     972:	d6 96       	adiw	r26, 0x36	; 54
     974:	8d 91       	ld	r24, X+
     976:	9c 91       	ld	r25, X
     978:	d7 97       	sbiw	r26, 0x37	; 55
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	d7 96       	adiw	r26, 0x37	; 55
     97e:	9c 93       	st	X, r25
     980:	8e 93       	st	-X, r24
     982:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
     984:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <nwkDataReqQueue>
     988:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <nwkDataReqQueue+0x1>
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	39 f4       	brne	.+14     	; 0x99e <NWK_DataReq+0x3a>
		req->next = NULL;
     990:	11 82       	std	Z+1, r1	; 0x01
     992:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
     994:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <nwkDataReqQueue+0x1>
     998:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <nwkDataReqQueue>
     99c:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
     99e:	91 83       	std	Z+1, r25	; 0x01
     9a0:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
     9a2:	f0 93 dd 02 	sts	0x02DD, r31	; 0x8002dd <nwkDataReqQueue+0x1>
     9a6:	e0 93 dc 02 	sts	0x02DC, r30	; 0x8002dc <nwkDataReqQueue>
     9aa:	08 95       	ret

000009ac <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     9b4:	e0 91 dc 02 	lds	r30, 0x02DC	; 0x8002dc <nwkDataReqQueue>
     9b8:	f0 91 dd 02 	lds	r31, 0x02DD	; 0x8002dd <nwkDataReqQueue+0x1>
     9bc:	30 97       	sbiw	r30, 0x00	; 0
     9be:	09 f4       	brne	.+2      	; 0x9c2 <nwkDataReqTaskHandler+0x16>
     9c0:	9b c0       	rjmp	.+310    	; 0xaf8 <nwkDataReqTaskHandler+0x14c>
     9c2:	ef 01       	movw	r28, r30
		switch (req->state) {
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	88 23       	and	r24, r24
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <nwkDataReqTaskHandler+0x26>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <nwkDataReqTaskHandler+0x24>
     9ce:	6e c0       	rjmp	.+220    	; 0xaac <nwkDataReqTaskHandler+0x100>
     9d0:	8d c0       	rjmp	.+282    	; 0xaec <nwkDataReqTaskHandler+0x140>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
     9d2:	9e d0       	rcall	.+316    	; 0xb10 <nwkFrameAlloc>
     9d4:	8c 01       	movw	r16, r24
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8b c0       	rjmp	.+278    	; 0xaf8 <nwkDataReqTaskHandler+0x14c>
		return;
	}

	req->frame = frame;
     9e2:	9b 83       	std	Y+3, r25	; 0x03
     9e4:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
     9ea:	f8 01       	movw	r30, r16
     9ec:	e9 57       	subi	r30, 0x79	; 121
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	8a e8       	ldi	r24, 0x8A	; 138
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	80 83       	st	Z, r24
	frame->tx.control = req->options &
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	89 85       	ldd	r24, Y+9	; 0x09
     9fc:	82 fb       	bst	r24, 2
     9fe:	88 27       	eor	r24, r24
     a00:	80 f9       	bld	r24, 0
     a02:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
     a04:	99 85       	ldd	r25, Y+9	; 0x09
     a06:	d8 01       	movw	r26, r16
     a08:	1b 96       	adiw	r26, 0x0b	; 11
     a0a:	8c 91       	ld	r24, X
     a0c:	1b 97       	sbiw	r26, 0x0b	; 11
     a0e:	90 fb       	bst	r25, 0
     a10:	80 f9       	bld	r24, 0
     a12:	1b 96       	adiw	r26, 0x0b	; 11
     a14:	8c 93       	st	X, r24
     a16:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
     a18:	99 85       	ldd	r25, Y+9	; 0x09
     a1a:	93 fb       	bst	r25, 3
     a1c:	99 27       	eor	r25, r25
     a1e:	90 f9       	bld	r25, 0
     a20:	90 fb       	bst	r25, 0
     a22:	82 f9       	bld	r24, 2
     a24:	1b 96       	adiw	r26, 0x0b	; 11
     a26:	8c 93       	st	X, r24
     a28:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
     a2a:	99 85       	ldd	r25, Y+9	; 0x09
     a2c:	96 95       	lsr	r25
     a2e:	91 70       	andi	r25, 0x01	; 1
     a30:	90 fb       	bst	r25, 0
     a32:	81 f9       	bld	r24, 1
     a34:	1b 96       	adiw	r26, 0x0b	; 11
     a36:	8c 93       	st	X, r24
     a38:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a3a:	ed e7       	ldi	r30, 0x7D	; 125
     a3c:	f9 e0       	ldi	r31, 0x09	; 9
     a3e:	84 81       	ldd	r24, Z+4	; 0x04
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	84 83       	std	Z+4, r24	; 0x04
     a44:	1c 96       	adiw	r26, 0x0c	; 12
     a46:	8c 93       	st	X, r24
     a48:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
     a4a:	80 81       	ld	r24, Z
     a4c:	91 81       	ldd	r25, Z+1	; 0x01
     a4e:	1e 96       	adiw	r26, 0x0e	; 14
     a50:	9c 93       	st	X, r25
     a52:	8e 93       	st	-X, r24
     a54:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	50 96       	adiw	r26, 0x10	; 16
     a5c:	9c 93       	st	X, r25
     a5e:	8e 93       	st	-X, r24
     a60:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
     a62:	88 85       	ldd	r24, Y+8	; 0x08
     a64:	98 2f       	mov	r25, r24
     a66:	9f 70       	andi	r25, 0x0F	; 15
     a68:	51 96       	adiw	r26, 0x11	; 17
     a6a:	8c 91       	ld	r24, X
     a6c:	51 97       	sbiw	r26, 0x11	; 17
     a6e:	80 7f       	andi	r24, 0xF0	; 240
     a70:	89 2b       	or	r24, r25
     a72:	51 96       	adiw	r26, 0x11	; 17
     a74:	8c 93       	st	X, r24
     a76:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
     a78:	9f 81       	ldd	r25, Y+7	; 0x07
     a7a:	92 95       	swap	r25
     a7c:	90 7f       	andi	r25, 0xF0	; 240
     a7e:	8f 70       	andi	r24, 0x0F	; 15
     a80:	89 2b       	or	r24, r25
     a82:	51 96       	adiw	r26, 0x11	; 17
     a84:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
     a86:	f8 01       	movw	r30, r16
     a88:	ef 57       	subi	r30, 0x7F	; 127
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	4c 85       	ldd	r20, Y+12	; 0x0c
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	6a 85       	ldd	r22, Y+10	; 0x0a
     a92:	7b 85       	ldd	r23, Y+11	; 0x0b
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <memcpy>
	frame->size += req->size;
     a9c:	f8 01       	movw	r30, r16
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa2:	89 0f       	add	r24, r25
     aa4:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
     aa6:	c8 01       	movw	r24, r16
     aa8:	e2 d6       	rcall	.+3524   	; 0x186e <nwkTxFrame>
     aaa:	26 c0       	rjmp	.+76     	; 0xaf8 <nwkDataReqTaskHandler+0x14c>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
     aac:	ec 17       	cp	r30, r28
     aae:	fd 07       	cpc	r31, r29
     ab0:	41 f4       	brne	.+16     	; 0xac2 <nwkDataReqTaskHandler+0x116>
		nwkDataReqQueue = nwkDataReqQueue->next;
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <nwkDataReqQueue+0x1>
     aba:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <nwkDataReqQueue>
     abe:	0a c0       	rjmp	.+20     	; 0xad4 <nwkDataReqTaskHandler+0x128>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
     ac0:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	8c 17       	cp	r24, r28
     ac8:	9d 07       	cpc	r25, r29
     aca:	d1 f7       	brne	.-12     	; 0xac0 <nwkDataReqTaskHandler+0x114>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
     acc:	88 81       	ld	r24, Y
     ace:	99 81       	ldd	r25, Y+1	; 0x01
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
     ad4:	ed e7       	ldi	r30, 0x7D	; 125
     ad6:	f9 e0       	ldi	r31, 0x09	; 9
     ad8:	86 a9       	ldd	r24, Z+54	; 0x36
     ada:	97 a9       	ldd	r25, Z+55	; 0x37
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	97 ab       	std	Z+55, r25	; 0x37
     ae0:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
     ae2:	ed 85       	ldd	r30, Y+13	; 0x0d
     ae4:	fe 85       	ldd	r31, Y+14	; 0x0e
     ae6:	ce 01       	movw	r24, r28
     ae8:	19 95       	eicall
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <nwkDataReqTaskHandler+0x14c>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
     aec:	09 90       	ld	r0, Y+
     aee:	d8 81       	ld	r29, Y
     af0:	c0 2d       	mov	r28, r0
     af2:	20 97       	sbiw	r28, 0x00	; 0
     af4:	09 f0       	breq	.+2      	; 0xaf8 <nwkDataReqTaskHandler+0x14c>
     af6:	66 cf       	rjmp	.-308    	; 0x9c4 <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	08 95       	ret

00000b02 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     b02:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <nwkFrameFrames>
     b06:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <nwkFrameFrames+0x89>
     b0a:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <nwkFrameFrames+0x112>
     b0e:	08 95       	ret

00000b10 <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
     b10:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <nwkFrameFrames>
     b14:	88 23       	and	r24, r24
     b16:	71 f0       	breq	.+28     	; 0xb34 <nwkFrameAlloc+0x24>
     b18:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <nwkFrameFrames+0x89>
     b1c:	88 23       	and	r24, r24
     b1e:	39 f0       	breq	.+14     	; 0xb2e <nwkFrameAlloc+0x1e>
     b20:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <nwkFrameFrames+0x112>
     b24:	81 11       	cpse	r24, r1
     b26:	27 c0       	rjmp	.+78     	; 0xb76 <nwkFrameAlloc+0x66>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <nwkFrameAlloc+0x28>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <nwkFrameAlloc+0x28>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     b38:	49 e8       	ldi	r20, 0x89	; 137
     b3a:	48 9f       	mul	r20, r24
     b3c:	90 01       	movw	r18, r0
     b3e:	49 9f       	mul	r20, r25
     b40:	30 0d       	add	r19, r0
     b42:	11 24       	eor	r1, r1
     b44:	c9 01       	movw	r24, r18
     b46:	82 52       	subi	r24, 0x22	; 34
     b48:	9d 4f       	sbci	r25, 0xFD	; 253
     b4a:	fc 01       	movw	r30, r24
     b4c:	11 92       	st	Z+, r1
     b4e:	4a 95       	dec	r20
     b50:	e9 f7       	brne	.-6      	; 0xb4c <nwkFrameAlloc+0x3c>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     b52:	40 e1       	ldi	r20, 0x10	; 16
     b54:	fc 01       	movw	r30, r24
     b56:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
     b58:	ef 57       	subi	r30, 0x7F	; 127
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	20 51       	subi	r18, 0x10	; 16
     b5e:	3d 4f       	sbci	r19, 0xFD	; 253
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
     b64:	ed e7       	ldi	r30, 0x7D	; 125
     b66:	f9 e0       	ldi	r31, 0x09	; 9
     b68:	26 a9       	ldd	r18, Z+54	; 0x36
     b6a:	37 a9       	ldd	r19, Z+55	; 0x37
     b6c:	2f 5f       	subi	r18, 0xFF	; 255
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	37 ab       	std	Z+55, r19	; 0x37
     b72:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
     b74:	08 95       	ret
		}
	}
	return NULL;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
}
     b7a:	08 95       	ret

00000b7c <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
     b7c:	fc 01       	movw	r30, r24
     b7e:	10 82       	st	Z, r1
	nwkIb.lock--;
     b80:	ed e7       	ldi	r30, 0x7D	; 125
     b82:	f9 e0       	ldi	r31, 0x09	; 9
     b84:	86 a9       	ldd	r24, Z+54	; 0x36
     b86:	97 a9       	ldd	r25, Z+55	; 0x37
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	97 ab       	std	Z+55, r25	; 0x37
     b8c:	86 ab       	std	Z+54, r24	; 0x36
     b8e:	08 95       	ret

00000b90 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	41 f0       	breq	.+16     	; 0xba4 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
     b94:	fc 01       	movw	r30, r24
     b96:	e7 57       	subi	r30, 0x77	; 119
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	e9 37       	cpi	r30, 0x79	; 121
     b9e:	f8 07       	cpc	r31, r24
     ba0:	18 f0       	brcs	.+6      	; 0xba8 <nwkFrameNext+0x18>
     ba2:	12 c0       	rjmp	.+36     	; 0xbc8 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
     ba4:	ee ed       	ldi	r30, 0xDE	; 222
     ba6:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     ba8:	80 81       	ld	r24, Z
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <nwkFrameNext+0x26>
     bae:	0f c0       	rjmp	.+30     	; 0xbce <nwkFrameNext+0x3e>
     bb0:	80 81       	ld	r24, Z
     bb2:	81 11       	cpse	r24, r1
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     bb6:	e7 57       	subi	r30, 0x77	; 119
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	84 e0       	ldi	r24, 0x04	; 4
     bbc:	e9 37       	cpi	r30, 0x79	; 121
     bbe:	f8 07       	cpc	r31, r24
     bc0:	b8 f3       	brcs	.-18     	; 0xbb0 <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
     bce:	8e 2f       	mov	r24, r30
     bd0:	9f 2f       	mov	r25, r31
     bd2:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
     bd4:	8e 2f       	mov	r24, r30
     bd6:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
     bd8:	08 95       	ret

00000bda <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     bda:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
     bdc:	dc 01       	movw	r26, r24
     bde:	ad 57       	subi	r26, 0x7D	; 125
     be0:	bf 4f       	sbci	r27, 0xFF	; 255
     be2:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     be4:	ad e7       	ldi	r26, 0x7D	; 125
     be6:	b9 e0       	ldi	r27, 0x09	; 9
     be8:	14 96       	adiw	r26, 0x04	; 4
     bea:	9c 91       	ld	r25, X
     bec:	14 97       	sbiw	r26, 0x04	; 4
     bee:	9f 5f       	subi	r25, 0xFF	; 255
     bf0:	14 96       	adiw	r26, 0x04	; 4
     bf2:	9c 93       	st	X, r25
     bf4:	14 97       	sbiw	r26, 0x04	; 4
     bf6:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
     bf8:	8d 91       	ld	r24, X+
     bfa:	9c 91       	ld	r25, X
     bfc:	96 87       	std	Z+14, r25	; 0x0e
     bfe:	85 87       	std	Z+13, r24	; 0x0d
     c00:	08 95       	ret

00000c02 <nwkRouteInit>:
	entry->nextHopAddr = nextHop;
	entry->multicast = multicast;
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
	entry->lqi = lqi;
}
     c02:	aa e7       	ldi	r26, 0x7A	; 122
     c04:	b4 e0       	ldi	r27, 0x04	; 4
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	4f ef       	ldi	r20, 0xFF	; 255
     c0c:	5f ef       	ldi	r21, 0xFF	; 255
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	5c 93       	st	X, r21
     c12:	4e 93       	st	-X, r20
     c14:	fc 01       	movw	r30, r24
     c16:	ee 0f       	add	r30, r30
     c18:	ff 1f       	adc	r31, r31
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	e8 1b       	sub	r30, r24
     c24:	f9 0b       	sbc	r31, r25
     c26:	e7 58       	subi	r30, 0x87	; 135
     c28:	fb 4f       	sbci	r31, 0xFB	; 251
     c2a:	20 81       	ld	r18, Z
     c2c:	2e 7f       	andi	r18, 0xFE	; 254
     c2e:	20 83       	st	Z, r18
     c30:	14 96       	adiw	r26, 0x04	; 4
     c32:	1c 92       	st	X, r1
     c34:	14 97       	sbiw	r26, 0x04	; 4
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	17 96       	adiw	r26, 0x07	; 7
     c3a:	84 36       	cpi	r24, 0x64	; 100
     c3c:	91 05       	cpc	r25, r1
     c3e:	39 f7       	brne	.-50     	; 0xc0e <nwkRouteInit+0xc>
     c40:	08 95       	ret

00000c42 <NWK_RouteFindEntry>:
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ea e7       	ldi	r30, 0x7A	; 122
     c4c:	f4 e0       	ldi	r31, 0x04	; 4
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	06 2f       	mov	r16, r22
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	40 81       	ld	r20, Z
     c58:	51 81       	ldd	r21, Z+1	; 0x01
     c5a:	48 17       	cp	r20, r24
     c5c:	59 07       	cpc	r21, r25
     c5e:	b1 f4       	brne	.+44     	; 0xc8c <NWK_RouteFindEntry+0x4a>
     c60:	d9 01       	movw	r26, r18
     c62:	aa 0f       	add	r26, r26
     c64:	bb 1f       	adc	r27, r27
     c66:	aa 0f       	add	r26, r26
     c68:	bb 1f       	adc	r27, r27
     c6a:	aa 0f       	add	r26, r26
     c6c:	bb 1f       	adc	r27, r27
     c6e:	a2 1b       	sub	r26, r18
     c70:	b3 0b       	sbc	r27, r19
     c72:	a7 58       	subi	r26, 0x87	; 135
     c74:	bb 4f       	sbci	r27, 0xFB	; 251
     c76:	4c 91       	ld	r20, X
     c78:	46 95       	lsr	r20
     c7a:	41 70       	andi	r20, 0x01	; 1
     c7c:	c4 2f       	mov	r28, r20
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	d4 2f       	mov	r29, r20
     c82:	c0 17       	cp	r28, r16
     c84:	d1 07       	cpc	r29, r17
     c86:	11 f4       	brne	.+4      	; 0xc8c <NWK_RouteFindEntry+0x4a>
     c88:	cd 01       	movw	r24, r26
     c8a:	08 c0       	rjmp	.+16     	; 0xc9c <NWK_RouteFindEntry+0x5a>
     c8c:	2f 5f       	subi	r18, 0xFF	; 255
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	37 96       	adiw	r30, 0x07	; 7
     c92:	24 36       	cpi	r18, 0x64	; 100
     c94:	31 05       	cpc	r19, r1
     c96:	f9 f6       	brne	.-66     	; 0xc56 <NWK_RouteFindEntry+0x14>
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <NWK_RouteNewEntry>:
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e9 e7       	ldi	r30, 0x79	; 121
     cac:	f4 e0       	ldi	r31, 0x04	; 4
     cae:	80 81       	ld	r24, Z
     cb0:	80 fd       	sbrc	r24, 0
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <NWK_RouteNewEntry+0x28>
     cb4:	85 81       	ldd	r24, Z+5	; 0x05
     cb6:	88 23       	and	r24, r24
     cb8:	81 f0       	breq	.+32     	; 0xcda <NWK_RouteNewEntry+0x34>
     cba:	10 97       	sbiw	r26, 0x00	; 0
     cbc:	39 f0       	breq	.+14     	; 0xccc <NWK_RouteNewEntry+0x26>
     cbe:	15 96       	adiw	r26, 0x05	; 5
     cc0:	9c 91       	ld	r25, X
     cc2:	15 97       	sbiw	r26, 0x05	; 5
     cc4:	89 17       	cp	r24, r25
     cc6:	18 f4       	brcc	.+6      	; 0xcce <NWK_RouteNewEntry+0x28>
     cc8:	df 01       	movw	r26, r30
     cca:	01 c0       	rjmp	.+2      	; 0xcce <NWK_RouteNewEntry+0x28>
     ccc:	df 01       	movw	r26, r30
     cce:	37 96       	adiw	r30, 0x07	; 7
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	e5 33       	cpi	r30, 0x35	; 53
     cd4:	f8 07       	cpc	r31, r24
     cd6:	59 f7       	brne	.-42     	; 0xcae <NWK_RouteNewEntry+0x8>
     cd8:	fd 01       	movw	r30, r26
     cda:	80 81       	ld	r24, Z
     cdc:	8d 70       	andi	r24, 0x0D	; 13
     cde:	80 63       	ori	r24, 0x30	; 48
     ce0:	80 83       	st	Z, r24
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	85 83       	std	Z+5, r24	; 0x05
     ce6:	cf 01       	movw	r24, r30
     ce8:	08 95       	ret

00000cea <NWK_RouteFreeEntry>:
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	80 fd       	sbrc	r24, 0
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <NWK_RouteFreeEntry+0x12>
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	9f ef       	ldi	r25, 0xFF	; 255
     cf6:	92 83       	std	Z+2, r25	; 0x02
     cf8:	81 83       	std	Z+1, r24	; 0x01
     cfa:	15 82       	std	Z+5, r1	; 0x05
     cfc:	08 95       	ret

00000cfe <NWK_RouteNextHop>:
     cfe:	a1 df       	rcall	.-190    	; 0xc42 <NWK_RouteFindEntry>
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	21 f0       	breq	.+8      	; 0xd0c <NWK_RouteNextHop+0xe>
     d04:	fc 01       	movw	r30, r24
     d06:	83 81       	ldd	r24, Z+3	; 0x03
     d08:	94 81       	ldd	r25, Z+4	; 0x04
     d0a:	08 95       	ret
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	08 95       	ret

00000d12 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
     d12:	97 df       	rcall	.-210    	; 0xc42 <NWK_RouteFindEntry>
	if (entry) {
     d14:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
     d16:	09 f0       	breq	.+2      	; 0xd1a <nwkRouteRemove+0x8>
     d18:	e8 cf       	rjmp	.-48     	; 0xcea <NWK_RouteFreeEntry>
     d1a:	08 95       	ret

00000d1c <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     d26:	01 85       	ldd	r16, Z+9	; 0x09
     d28:	12 85       	ldd	r17, Z+10	; 0x0a
     d2a:	11 23       	and	r17, r17
     d2c:	2c f4       	brge	.+10     	; 0xd38 <nwkRouteFrameReceived+0x1c>
     d2e:	85 85       	ldd	r24, Z+13	; 0x0d
     d30:	96 85       	ldd	r25, Z+14	; 0x0e
     d32:	08 17       	cp	r16, r24
     d34:	19 07       	cpc	r17, r25
     d36:	e1 f5       	brne	.+120    	; 0xdb0 <nwkRouteFrameReceived+0x94>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
     d38:	85 81       	ldd	r24, Z+5	; 0x05
     d3a:	96 81       	ldd	r25, Z+6	; 0x06
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	c1 f1       	breq	.+112    	; 0xdb0 <nwkRouteFrameReceived+0x94>
     d40:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	85 85       	ldd	r24, Z+13	; 0x0d
     d46:	96 85       	ldd	r25, Z+14	; 0x0e
     d48:	7c df       	rcall	.-264    	; 0xc42 <NWK_RouteFindEntry>
     d4a:	fc 01       	movw	r30, r24

	if (entry) {
     d4c:	89 2b       	or	r24, r25
     d4e:	a1 f0       	breq	.+40     	; 0xd78 <nwkRouteFrameReceived+0x5c>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	98 85       	ldd	r25, Y+8	; 0x08
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	f9 f4       	brne	.+62     	; 0xd96 <nwkRouteFrameReceived+0x7a>
     d58:	20 91 7d 09 	lds	r18, 0x097D	; 0x80097d <nwkIb>
     d5c:	30 91 7e 09 	lds	r19, 0x097E	; 0x80097e <nwkIb+0x1>
     d60:	8f 85       	ldd	r24, Y+15	; 0x0f
     d62:	98 89       	ldd	r25, Y+16	; 0x10
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	b1 f4       	brne	.+44     	; 0xd96 <nwkRouteFrameReceived+0x7a>
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
				entry->lqi) || discovery) {
			entry->nextHopAddr = header->macSrcAddr;
     d6a:	14 83       	std	Z+4, r17	; 0x04
     d6c:	03 83       	std	Z+3, r16	; 0x03
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
     d6e:	80 81       	ld	r24, Z
     d70:	8f 70       	andi	r24, 0x0F	; 15
     d72:	80 63       	ori	r24, 0x30	; 48
     d74:	80 83       	st	Z, r24
		}
	} else {
		entry = NWK_RouteNewEntry();
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <nwkRouteFrameReceived+0x70>
     d78:	96 df       	rcall	.-212    	; 0xca6 <NWK_RouteNewEntry>
     d7a:	fc 01       	movw	r30, r24

		entry->dstAddr = header->nwkSrcAddr;
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	92 83       	std	Z+2, r25	; 0x02
     d82:	81 83       	std	Z+1, r24	; 0x01
		entry->nextHopAddr = header->macSrcAddr;
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	94 83       	std	Z+4, r25	; 0x04
     d8a:	83 83       	std	Z+3, r24	; 0x03
	}

	entry->lqi = frame->rx.lqi;
     d8c:	cd 57       	subi	r28, 0x7D	; 125
     d8e:	df 4f       	sbci	r29, 0xFF	; 255
     d90:	88 81       	ld	r24, Y
     d92:	86 83       	std	Z+6, r24	; 0x06
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <nwkRouteFrameReceived+0x94>

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
     d96:	83 81       	ldd	r24, Z+3	; 0x03
     d98:	94 81       	ldd	r25, Z+4	; 0x04
     d9a:	08 17       	cp	r16, r24
     d9c:	19 07       	cpc	r17, r25
     d9e:	b1 f3       	breq	.-20     	; 0xd8c <nwkRouteFrameReceived+0x70>
     da0:	96 81       	ldd	r25, Z+6	; 0x06
     da2:	de 01       	movw	r26, r28
     da4:	ad 57       	subi	r26, 0x7D	; 125
     da6:	bf 4f       	sbci	r27, 0xFF	; 255
     da8:	8c 91       	ld	r24, X
     daa:	98 17       	cp	r25, r24
     dac:	f0 f2       	brcs	.-68     	; 0xd6a <nwkRouteFrameReceived+0x4e>
     dae:	ee cf       	rjmp	.-36     	; 0xd8c <nwkRouteFrameReceived+0x70>

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
     dc0:	87 85       	ldd	r24, Z+15	; 0x0f
     dc2:	90 89       	ldd	r25, Z+16	; 0x10
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	92 07       	cpc	r25, r18
     dca:	d9 f1       	breq	.+118    	; 0xe42 <nwkRouteFrameSent+0x88>
     dcc:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
     dce:	63 85       	ldd	r22, Z+11	; 0x0b
     dd0:	63 fb       	bst	r22, 3
     dd2:	66 27       	eor	r22, r22
     dd4:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
     dd6:	35 df       	rcall	.-406    	; 0xc42 <NWK_RouteFindEntry>
     dd8:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
     dda:	89 2b       	or	r24, r25
     ddc:	91 f1       	breq	.+100    	; 0xe42 <nwkRouteFrameSent+0x88>
     dde:	8c 91       	ld	r24, X
     de0:	80 fd       	sbrc	r24, 0
     de2:	2f c0       	rjmp	.+94     	; 0xe42 <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
     de4:	fe 01       	movw	r30, r28
     de6:	ed 57       	subi	r30, 0x7D	; 125
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	81 11       	cpse	r24, r1
     dee:	19 c0       	rjmp	.+50     	; 0xe22 <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
     df0:	8c 91       	ld	r24, X
     df2:	8f 70       	andi	r24, 0x0F	; 15
     df4:	80 63       	ori	r24, 0x30	; 48
     df6:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
     df8:	15 96       	adiw	r26, 0x05	; 5
     dfa:	8c 91       	ld	r24, X
     dfc:	15 97       	sbiw	r26, 0x05	; 5
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	15 96       	adiw	r26, 0x05	; 5
     e02:	8c 93       	st	X, r24
     e04:	8f 3f       	cpi	r24, 0xFF	; 255
     e06:	e9 f4       	brne	.+58     	; 0xe42 <nwkRouteFrameSent+0x88>
     e08:	ee e7       	ldi	r30, 0x7E	; 126
     e0a:	f4 e0       	ldi	r31, 0x04	; 4
     e0c:	2a e3       	ldi	r18, 0x3A	; 58
     e0e:	37 e0       	ldi	r19, 0x07	; 7
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     e10:	80 81       	ld	r24, Z
     e12:	86 95       	lsr	r24
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 83       	st	Z, r24
     e18:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
     e1a:	e2 17       	cp	r30, r18
     e1c:	f3 07       	cpc	r31, r19
     e1e:	c1 f7       	brne	.-16     	; 0xe10 <nwkRouteFrameSent+0x56>
     e20:	10 c0       	rjmp	.+32     	; 0xe42 <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
     e22:	9c 91       	ld	r25, X
     e24:	89 2f       	mov	r24, r25
     e26:	82 95       	swap	r24
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	81 5f       	subi	r24, 0xF1	; 241
     e2c:	8f 70       	andi	r24, 0x0F	; 15
     e2e:	28 2f       	mov	r18, r24
     e30:	22 95       	swap	r18
     e32:	20 7f       	andi	r18, 0xF0	; 240
     e34:	9f 70       	andi	r25, 0x0F	; 15
     e36:	92 2b       	or	r25, r18
     e38:	9c 93       	st	X, r25
     e3a:	81 11       	cpse	r24, r1
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
     e3e:	cd 01       	movw	r24, r26
     e40:	54 df       	rcall	.-344    	; 0xcea <NWK_RouteFreeEntry>
		}
	}
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
     e4e:	87 85       	ldd	r24, Z+15	; 0x0f
     e50:	90 89       	ldd	r25, Z+16	; 0x10
     e52:	8f 3f       	cpi	r24, 0xFF	; 255
     e54:	2f ef       	ldi	r18, 0xFF	; 255
     e56:	92 07       	cpc	r25, r18
     e58:	29 f4       	brne	.+10     	; 0xe64 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
     e5a:	8f ef       	ldi	r24, 0xFF	; 255
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
     e5e:	90 87       	std	Z+8, r25	; 0x08
     e60:	87 83       	std	Z+7, r24	; 0x07
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <nwkRoutePrepareTx+0x38>
	} else if (header->nwkFcf.linkLocal) {
     e64:	23 85       	ldd	r18, Z+11	; 0x0b
     e66:	22 ff       	sbrs	r18, 2
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
     e6a:	90 87       	std	Z+8, r25	; 0x08
     e6c:	87 83       	std	Z+7, r24	; 0x07
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <nwkRoutePrepareTx+0x38>
     e70:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
     e72:	63 85       	ldd	r22, Z+11	; 0x0b
     e74:	63 fb       	bst	r22, 3
     e76:	66 27       	eor	r22, r22
     e78:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
     e7a:	41 df       	rcall	.-382    	; 0xcfe <NWK_RouteNextHop>
     e7c:	98 87       	std	Y+8, r25	; 0x08
     e7e:	8f 83       	std	Y+7, r24	; 0x07
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
			nwkRouteDiscoveryRequest(frame);
		}
  #endif
	}
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
     e9a:	1b 85       	ldd	r17, Y+11	; 0x0b
     e9c:	13 fb       	bst	r17, 3
     e9e:	11 27       	eor	r17, r17
     ea0:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
     ea2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ea4:	d8 88       	ldd	r13, Y+16	; 0x10
     ea6:	61 2f       	mov	r22, r17
     ea8:	c6 01       	movw	r24, r12
     eaa:	29 df       	rcall	.-430    	; 0xcfe <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	59 f0       	breq	.+22     	; 0xec6 <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
     eb0:	fe 01       	movw	r30, r28
     eb2:	e9 57       	subi	r30, 0x79	; 121
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	11 82       	std	Z+1, r1	; 0x01
     eb8:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
     eba:	31 97       	sbiw	r30, 0x01	; 1
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	80 83       	st	Z, r24
		nwkTxFrame(frame);
     ec0:	ce 01       	movw	r24, r28
     ec2:	d5 d4       	rcall	.+2474   	; 0x186e <nwkTxFrame>
     ec4:	22 c0       	rjmp	.+68     	; 0xf0a <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
     ec6:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
     ec8:	be 84       	ldd	r11, Y+14	; 0x0e
     eca:	22 de       	rcall	.-956    	; 0xb10 <nwkFrameAlloc>
     ecc:	7c 01       	movw	r14, r24
     ece:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
     ed0:	d1 f0       	breq	.+52     	; 0xf06 <nwkRouteFrame+0x80>
     ed2:	83 de       	rcall	.-762    	; 0xbda <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
     ed4:	f7 01       	movw	r30, r14
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	8a 5f       	subi	r24, 0xFA	; 250
     eda:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
     edc:	e9 57       	subi	r30, 0x79	; 121
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
     ee4:	f7 01       	movw	r30, r14
     ee6:	b0 8a       	std	Z+16, r11	; 0x10
     ee8:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
     eea:	ef 57       	subi	r30, 0x7F	; 127
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	01 90       	ld	r0, Z+
     ef0:	f0 81       	ld	r31, Z
     ef2:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 83       	st	Z, r24
	command->srcAddr = src;
     ef8:	b2 82       	std	Z+2, r11	; 0x02
     efa:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
     efc:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
     efe:	c3 82       	std	Z+3, r12	; 0x03
     f00:	15 83       	std	Z+5, r17	; 0x05
     f02:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
     f04:	b4 d4       	rcall	.+2408   	; 0x186e <nwkTxFrame>
     f06:	ce 01       	movw	r24, r28
     f08:	39 de       	rcall	.-910    	; 0xb7c <nwkFrameFree>
	}
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	08 95       	ret

00000f1e <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
     f1e:	fc 01       	movw	r30, r24
     f20:	21 85       	ldd	r18, Z+9	; 0x09
     f22:	26 30       	cpi	r18, 0x06	; 6
     f24:	49 f4       	brne	.+18     	; 0xf38 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     f26:	07 80       	ldd	r0, Z+7	; 0x07
     f28:	f0 85       	ldd	r31, Z+8	; 0x08
     f2a:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
     f2c:	65 81       	ldd	r22, Z+5	; 0x05
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	94 81       	ldd	r25, Z+4	; 0x04
     f32:	ef de       	rcall	.-546    	; 0xd12 <nwkRouteRemove>

	return true;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
     f38:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
     f3a:	08 95       	ret

00000f3c <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
     f3c:	dc 01       	movw	r26, r24
     f3e:	19 96       	adiw	r26, 0x09	; 9
     f40:	2c 91       	ld	r18, X
     f42:	19 97       	sbiw	r26, 0x09	; 9
     f44:	22 23       	and	r18, r18
     f46:	71 f0       	breq	.+28     	; 0xf64 <nwkRxSeriveDataInd+0x28>
     f48:	17 96       	adiw	r26, 0x07	; 7
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	18 97       	sbiw	r26, 0x08	; 8
     f50:	20 81       	ld	r18, Z
     f52:	22 23       	and	r18, r18
     f54:	19 f0       	breq	.+6      	; 0xf5c <nwkRxSeriveDataInd+0x20>
     f56:	21 30       	cpi	r18, 0x01	; 1
     f58:	19 f0       	breq	.+6      	; 0xf60 <nwkRxSeriveDataInd+0x24>
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <nwkRxSeriveDataInd+0x2c>
     f5c:	22 c5       	rjmp	.+2628   	; 0x19a2 <nwkTxAckReceived>
     f5e:	08 95       	ret
     f60:	de cf       	rjmp	.-68     	; 0xf1e <nwkRouteErrorReceived>
     f62:	08 95       	ret
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	08 95       	ret

00000f6c <nwkRxDuplicateRejectionTimerHandler>:
     f6c:	bc 01       	movw	r22, r24
     f6e:	e7 e4       	ldi	r30, 0x47	; 71
     f70:	f7 e0       	ldi	r31, 0x07	; 7
     f72:	29 e7       	ldi	r18, 0x79	; 121
     f74:	37 e0       	ldi	r19, 0x07	; 7
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	51 e0       	ldi	r21, 0x01	; 1
     f7a:	90 81       	ld	r25, Z
     f7c:	99 23       	and	r25, r25
     f7e:	19 f0       	breq	.+6      	; 0xf86 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	90 83       	st	Z, r25
     f84:	45 2f       	mov	r20, r21
     f86:	35 96       	adiw	r30, 0x05	; 5
     f88:	e2 17       	cp	r30, r18
     f8a:	f3 07       	cpc	r31, r19
     f8c:	b1 f7       	brne	.-20     	; 0xf7a <nwkRxDuplicateRejectionTimerHandler+0xe>
     f8e:	44 23       	and	r20, r20
     f90:	19 f0       	breq	.+6      	; 0xf98 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     f92:	cb 01       	movw	r24, r22
     f94:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <SYS_TimerStart>
     f98:	08 95       	ret

00000f9a <nwkRxInit>:
     f9a:	e7 e4       	ldi	r30, 0x47	; 71
     f9c:	f7 e0       	ldi	r31, 0x07	; 7
     f9e:	89 e7       	ldi	r24, 0x79	; 121
     fa0:	97 e0       	ldi	r25, 0x07	; 7
     fa2:	10 82       	st	Z, r1
     fa4:	35 96       	adiw	r30, 0x05	; 5
     fa6:	e8 17       	cp	r30, r24
     fa8:	f9 07       	cpc	r31, r25
     faa:	d9 f7       	brne	.-10     	; 0xfa2 <nwkRxInit+0x8>
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f7 e0       	ldi	r31, 0x07	; 7
     fb0:	84 e6       	ldi	r24, 0x64	; 100
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	86 83       	std	Z+6, r24	; 0x06
     fba:	97 83       	std	Z+7, r25	; 0x07
     fbc:	a0 87       	std	Z+8, r26	; 0x08
     fbe:	b1 87       	std	Z+9, r27	; 0x09
     fc0:	12 86       	std	Z+10, r1	; 0x0a
     fc2:	86 eb       	ldi	r24, 0xB6	; 182
     fc4:	97 e0       	ldi	r25, 0x07	; 7
     fc6:	94 87       	std	Z+12, r25	; 0x0c
     fc8:	83 87       	std	Z+11, r24	; 0x0b
     fca:	6e e9       	ldi	r22, 0x9E	; 158
     fcc:	77 e0       	ldi	r23, 0x07	; 7
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	92 cc       	rjmp	.-1756   	; 0x8f6 <NWK_OpenEndpoint>
     fd2:	08 95       	ret

00000fd4 <PHY_DataInd>:
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	dc 01       	movw	r26, r24
     fda:	ed 91       	ld	r30, X+
     fdc:	fc 91       	ld	r31, X
     fde:	11 97       	sbiw	r26, 0x01	; 1
     fe0:	21 81       	ldd	r18, Z+1	; 0x01
     fe2:	28 38       	cpi	r18, 0x88	; 136
     fe4:	f9 f4       	brne	.+62     	; 0x1024 <PHY_DataInd+0x50>
     fe6:	20 81       	ld	r18, Z
     fe8:	2f 7d       	andi	r18, 0xDF	; 223
     fea:	21 34       	cpi	r18, 0x41	; 65
     fec:	d9 f4       	brne	.+54     	; 0x1024 <PHY_DataInd+0x50>
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	2c 91       	ld	r18, X
     ff2:	20 31       	cpi	r18, 0x10	; 16
     ff4:	b8 f0       	brcs	.+46     	; 0x1024 <PHY_DataInd+0x50>
     ff6:	ec 01       	movw	r28, r24
     ff8:	8b dd       	rcall	.-1258   	; 0xb10 <nwkFrameAlloc>
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	99 f0       	breq	.+38     	; 0x1024 <PHY_DataInd+0x50>
     ffe:	20 e2       	ldi	r18, 0x20	; 32
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	2a 81       	ldd	r18, Y+2	; 0x02
    1006:	21 83       	std	Z+1, r18	; 0x01
    1008:	2b 81       	ldd	r18, Y+3	; 0x03
    100a:	ed 57       	subi	r30, 0x7D	; 125
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	20 83       	st	Z, r18
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	31 96       	adiw	r30, 0x01	; 1
    1014:	20 83       	st	Z, r18
    1016:	4a 81       	ldd	r20, Y+2	; 0x02
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	68 81       	ld	r22, Y
    101c:	79 81       	ldd	r23, Y+1	; 0x01
    101e:	02 96       	adiw	r24, 0x02	; 2
    1020:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <memcpy>
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    102a:	66 23       	and	r22, r22
    102c:	21 f0       	breq	.+8      	; 0x1036 <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
    102e:	22 e2       	ldi	r18, 0x22	; 34
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
    1034:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1036:	24 e2       	ldi	r18, 0x24	; 36
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18
    103c:	08 95       	ret

0000103e <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    103e:	2f 92       	push	r2
    1040:	3f 92       	push	r3
    1042:	4f 92       	push	r4
    1044:	5f 92       	push	r5
    1046:	6f 92       	push	r6
    1048:	7f 92       	push	r7
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	2c 97       	sbiw	r28, 0x0c	; 12
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1076:	0f 2e       	mov	r0, r31
    1078:	f4 e2       	ldi	r31, 0x24	; 36
    107a:	bf 2e       	mov	r11, r31
    107c:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    107e:	0f 2e       	mov	r0, r31
    1080:	fd e7       	ldi	r31, 0x7D	; 125
    1082:	ef 2e       	mov	r14, r31
    1084:	f9 e0       	ldi	r31, 0x09	; 9
    1086:	ff 2e       	mov	r15, r31
    1088:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    108a:	aa 24       	eor	r10, r10
    108c:	a3 94       	inc	r10
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    108e:	68 94       	set
    1090:	66 24       	eor	r6, r6
    1092:	64 f8       	bld	r6, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    1094:	68 94       	set
    1096:	55 24       	eor	r5, r5
    1098:	53 f8       	bld	r5, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    109a:	68 94       	set
    109c:	44 24       	eor	r4, r4
    109e:	42 f8       	bld	r4, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    10a0:	21 2c       	mov	r2, r1
    10a2:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    10a4:	0f 2e       	mov	r0, r31
    10a6:	ff e1       	ldi	r31, 0x1F	; 31
    10a8:	7f 2e       	mov	r7, r31
    10aa:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    10ac:	cc 24       	eor	r12, r12
    10ae:	c3 94       	inc	r12
    10b0:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    10b2:	ef c1       	rjmp	.+990    	; 0x1492 <nwkRxTaskHandler+0x454>
		switch (frame->state) {
    10b4:	d8 01       	movw	r26, r16
    10b6:	8c 91       	ld	r24, X
    10b8:	82 32       	cpi	r24, 0x22	; 34
    10ba:	09 f4       	brne	.+2      	; 0x10be <nwkRxTaskHandler+0x80>
    10bc:	1a c1       	rjmp	.+564    	; 0x12f2 <nwkRxTaskHandler+0x2b4>
    10be:	30 f4       	brcc	.+12     	; 0x10cc <nwkRxTaskHandler+0x8e>
    10c0:	80 32       	cpi	r24, 0x20	; 32
    10c2:	59 f0       	breq	.+22     	; 0x10da <nwkRxTaskHandler+0x9c>
    10c4:	81 32       	cpi	r24, 0x21	; 33
    10c6:	09 f4       	brne	.+2      	; 0x10ca <nwkRxTaskHandler+0x8c>
    10c8:	10 c1       	rjmp	.+544    	; 0x12ea <nwkRxTaskHandler+0x2ac>
    10ca:	e3 c1       	rjmp	.+966    	; 0x1492 <nwkRxTaskHandler+0x454>
    10cc:	83 32       	cpi	r24, 0x23	; 35
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <nwkRxTaskHandler+0x94>
    10d0:	db c1       	rjmp	.+950    	; 0x1488 <nwkRxTaskHandler+0x44a>
    10d2:	84 32       	cpi	r24, 0x24	; 36
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <nwkRxTaskHandler+0x9a>
    10d6:	db c1       	rjmp	.+950    	; 0x148e <nwkRxTaskHandler+0x450>
    10d8:	dc c1       	rjmp	.+952    	; 0x1492 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    10da:	f8 01       	movw	r30, r16
    10dc:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    10de:	83 85       	ldd	r24, Z+11	; 0x0b
    10e0:	83 fd       	sbrc	r24, 3
    10e2:	d7 c1       	rjmp	.+942    	; 0x1492 <nwkRxTaskHandler+0x454>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    10e4:	25 81       	ldd	r18, Z+5	; 0x05
    10e6:	36 81       	ldd	r19, Z+6	; 0x06
    10e8:	2f 3f       	cpi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	c9 f4       	brne	.+50     	; 0x1120 <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    10ee:	d8 01       	movw	r26, r16
    10f0:	1f 96       	adiw	r26, 0x0f	; 15
    10f2:	2d 91       	ld	r18, X+
    10f4:	3c 91       	ld	r19, X
    10f6:	50 97       	sbiw	r26, 0x10	; 16
    10f8:	f7 01       	movw	r30, r14
    10fa:	40 81       	ld	r20, Z
    10fc:	51 81       	ldd	r21, Z+1	; 0x01
    10fe:	42 17       	cp	r20, r18
    1100:	53 07       	cpc	r21, r19
    1102:	21 f0       	breq	.+8      	; 0x110c <nwkRxTaskHandler+0xce>
    1104:	2f 3f       	cpi	r18, 0xFF	; 255
    1106:	3f 4f       	sbci	r19, 0xFF	; 255
    1108:	09 f0       	breq	.+2      	; 0x110c <nwkRxTaskHandler+0xce>
    110a:	c3 c1       	rjmp	.+902    	; 0x1492 <nwkRxTaskHandler+0x454>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    110c:	81 ff       	sbrs	r24, 1
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
    1110:	e1 e2       	ldi	r30, 0x21	; 33
    1112:	d8 01       	movw	r26, r16
    1114:	ec 93       	st	X, r30
    1116:	bd c1       	rjmp	.+890    	; 0x1492 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1118:	e2 e2       	ldi	r30, 0x22	; 34
    111a:	d8 01       	movw	r26, r16
    111c:	ec 93       	st	X, r30
    111e:	b9 c1       	rjmp	.+882    	; 0x1492 <nwkRxTaskHandler+0x454>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1120:	d8 01       	movw	r26, r16
    1122:	1f 96       	adiw	r26, 0x0f	; 15
    1124:	2d 91       	ld	r18, X+
    1126:	3c 91       	ld	r19, X
    1128:	50 97       	sbiw	r26, 0x10	; 16
    112a:	2f 3f       	cpi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	11 f4       	brne	.+4      	; 0x1134 <nwkRxTaskHandler+0xf6>
    1130:	80 fd       	sbrc	r24, 0
    1132:	af c1       	rjmp	.+862    	; 0x1492 <nwkRxTaskHandler+0x454>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    1134:	f7 01       	movw	r30, r14
    1136:	20 81       	ld	r18, Z
    1138:	31 81       	ldd	r19, Z+1	; 0x01
    113a:	d8 01       	movw	r26, r16
    113c:	1d 96       	adiw	r26, 0x0d	; 13
    113e:	8d 91       	ld	r24, X+
    1140:	9c 91       	ld	r25, X
    1142:	1e 97       	sbiw	r26, 0x0e	; 14
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	09 f4       	brne	.+2      	; 0x114c <nwkRxTaskHandler+0x10e>
    114a:	a3 c1       	rjmp	.+838    	; 0x1492 <nwkRxTaskHandler+0x454>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    114c:	c8 01       	movw	r24, r16
    114e:	e6 dd       	rcall	.-1076   	; 0xd1c <nwkRouteFrameReceived>
    1150:	e3 e4       	ldi	r30, 0x43	; 67
    1152:	f7 e0       	ldi	r31, 0x07	; 7
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1158:	82 2c       	mov	r8, r2
    115a:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    115c:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    115e:	44 81       	ldd	r20, Z+4	; 0x04
    1160:	44 23       	and	r20, r20
    1162:	09 f4       	brne	.+2      	; 0x1166 <nwkRxTaskHandler+0x128>
    1164:	74 c0       	rjmp	.+232    	; 0x124e <nwkRxTaskHandler+0x210>
    1166:	d8 01       	movw	r26, r16
    1168:	1d 96       	adiw	r26, 0x0d	; 13
    116a:	6d 91       	ld	r22, X+
    116c:	7c 91       	ld	r23, X
    116e:	1e 97       	sbiw	r26, 0x0e	; 14
    1170:	40 81       	ld	r20, Z
    1172:	51 81       	ldd	r21, Z+1	; 0x01
    1174:	64 17       	cp	r22, r20
    1176:	75 07       	cpc	r23, r21
    1178:	09 f0       	breq	.+2      	; 0x117c <nwkRxTaskHandler+0x13e>
    117a:	6a c0       	rjmp	.+212    	; 0x1250 <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    117c:	1c 96       	adiw	r26, 0x0c	; 12
    117e:	8c 91       	ld	r24, X
    1180:	1c 97       	sbiw	r26, 0x0c	; 12
    1182:	f9 01       	movw	r30, r18
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	e2 0f       	add	r30, r18
    118e:	f3 1f       	adc	r31, r19
    1190:	ed 5b       	subi	r30, 0xBD	; 189
    1192:	f8 4f       	sbci	r31, 0xF8	; 248
    1194:	92 81       	ldd	r25, Z+2	; 0x02
    1196:	98 1b       	sub	r25, r24

			if (diff < 8) {
    1198:	98 30       	cpi	r25, 0x08	; 8
    119a:	08 f0       	brcs	.+2      	; 0x119e <nwkRxTaskHandler+0x160>
    119c:	3e c0       	rjmp	.+124    	; 0x121a <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
    119e:	f9 01       	movw	r30, r18
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	ed 5b       	subi	r30, 0xBD	; 189
    11ae:	f8 4f       	sbci	r31, 0xF8	; 248
    11b0:	83 81       	ldd	r24, Z+3	; 0x03
    11b2:	48 2f       	mov	r20, r24
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	09 2e       	mov	r0, r25
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <nwkRxTaskHandler+0x180>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <nwkRxTaskHandler+0x17c>
    11c2:	40 ff       	sbrs	r20, 0
    11c4:	17 c0       	rjmp	.+46     	; 0x11f4 <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    11c6:	f7 01       	movw	r30, r14
    11c8:	20 81       	ld	r18, Z
    11ca:	31 81       	ldd	r19, Z+1	; 0x01
    11cc:	17 96       	adiw	r26, 0x07	; 7
    11ce:	8d 91       	ld	r24, X+
    11d0:	9c 91       	ld	r25, X
    11d2:	18 97       	sbiw	r26, 0x08	; 8
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	09 f0       	breq	.+2      	; 0x11dc <nwkRxTaskHandler+0x19e>
    11da:	5b c1       	rjmp	.+694    	; 0x1492 <nwkRxTaskHandler+0x454>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    11dc:	1b 96       	adiw	r26, 0x0b	; 11
    11de:	6c 91       	ld	r22, X
    11e0:	1b 97       	sbiw	r26, 0x0b	; 11
    11e2:	63 fb       	bst	r22, 3
    11e4:	66 27       	eor	r22, r22
    11e6:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    11e8:	1f 96       	adiw	r26, 0x0f	; 15
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	50 97       	sbiw	r26, 0x10	; 16
    11f0:	90 dd       	rcall	.-1248   	; 0xd12 <nwkRouteRemove>
    11f2:	4f c1       	rjmp	.+670    	; 0x1492 <nwkRxTaskHandler+0x454>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    11f4:	f9 01       	movw	r30, r18
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	2e 0f       	add	r18, r30
    1200:	3f 1f       	adc	r19, r31
    1202:	f9 01       	movw	r30, r18
    1204:	ed 5b       	subi	r30, 0xBD	; 189
    1206:	f8 4f       	sbci	r31, 0xF8	; 248
    1208:	96 01       	movw	r18, r12
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <nwkRxTaskHandler+0x1d2>
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	9a 95       	dec	r25
    1212:	e2 f7       	brpl	.-8      	; 0x120c <nwkRxTaskHandler+0x1ce>
    1214:	82 2b       	or	r24, r18
    1216:	83 83       	std	Z+3, r24	; 0x03
    1218:	43 c1       	rjmp	.+646    	; 0x14a0 <nwkRxTaskHandler+0x462>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    121a:	f9 01       	movw	r30, r18
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	2e 0f       	add	r18, r30
    1226:	3f 1f       	adc	r19, r31
    1228:	f9 01       	movw	r30, r18
    122a:	ed 5b       	subi	r30, 0xBD	; 189
    122c:	f8 4f       	sbci	r31, 0xF8	; 248
    122e:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    1230:	83 81       	ldd	r24, Z+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	91 95       	neg	r25
    1238:	a9 01       	movw	r20, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <nwkRxTaskHandler+0x202>
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	9a 95       	dec	r25
    1242:	e2 f7       	brpl	.-8      	; 0x123c <nwkRxTaskHandler+0x1fe>
    1244:	ca 01       	movw	r24, r20
    1246:	81 60       	ori	r24, 0x01	; 1
    1248:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    124a:	74 82       	std	Z+4, r7	; 0x04
    124c:	29 c1       	rjmp	.+594    	; 0x14a0 <nwkRxTaskHandler+0x462>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    124e:	4f 01       	movw	r8, r30
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1254:	8a 30       	cpi	r24, 0x0A	; 10
    1256:	91 05       	cpc	r25, r1
    1258:	09 f0       	breq	.+2      	; 0x125c <nwkRxTaskHandler+0x21e>
    125a:	80 cf       	rjmp	.-256    	; 0x115c <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    125c:	81 14       	cp	r8, r1
    125e:	91 04       	cpc	r9, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <nwkRxTaskHandler+0x226>
    1262:	17 c1       	rjmp	.+558    	; 0x1492 <nwkRxTaskHandler+0x454>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    1264:	d8 01       	movw	r26, r16
    1266:	1d 96       	adiw	r26, 0x0d	; 13
    1268:	8d 91       	ld	r24, X+
    126a:	9c 91       	ld	r25, X
    126c:	1e 97       	sbiw	r26, 0x0e	; 14
    126e:	f4 01       	movw	r30, r8
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    1274:	1c 96       	adiw	r26, 0x0c	; 12
    1276:	8c 91       	ld	r24, X
    1278:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    127a:	a3 82       	std	Z+3, r10	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    127c:	74 82       	std	Z+4, r7	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    127e:	85 e3       	ldi	r24, 0x35	; 53
    1280:	97 e0       	ldi	r25, 0x07	; 7
    1282:	9a d6       	rcall	.+3380   	; 0x1fb8 <SYS_TimerStart>
    1284:	0d c1       	rjmp	.+538    	; 0x14a0 <nwkRxTaskHandler+0x462>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1286:	d7 01       	movw	r26, r14
    1288:	2d 91       	ld	r18, X+
    128a:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    128c:	f8 01       	movw	r30, r16
    128e:	87 85       	ldd	r24, Z+15	; 0x0f
    1290:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1292:	28 17       	cp	r18, r24
    1294:	39 07       	cpc	r19, r25
    1296:	81 f0       	breq	.+32     	; 0x12b8 <nwkRxTaskHandler+0x27a>
				header->nwkDstAddr &&
    1298:	43 85       	ldd	r20, Z+11	; 0x0b
    129a:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <nwkRxTaskHandler+0x276>
    129e:	c8 01       	movw	r24, r16
    12a0:	3b d3       	rcall	.+1654   	; 0x1918 <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    12a2:	d7 01       	movw	r26, r14
    12a4:	2d 91       	ld	r18, X+
    12a6:	3c 91       	ld	r19, X
    12a8:	f8 01       	movw	r30, r16
    12aa:	87 85       	ldd	r24, Z+15	; 0x0f
    12ac:	90 89       	ldd	r25, Z+16	; 0x10
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <nwkRxTaskHandler+0x27a>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	69 f4       	brne	.+26     	; 0x12d2 <nwkRxTaskHandler+0x294>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    12b8:	d8 01       	movw	r26, r16
    12ba:	1b 96       	adiw	r26, 0x0b	; 11
    12bc:	8c 91       	ld	r24, X
    12be:	1b 97       	sbiw	r26, 0x0b	; 11
    12c0:	81 ff       	sbrs	r24, 1
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <nwkRxTaskHandler+0x28c>
				frame->state = NWK_RX_STATE_DECRYPT;
    12c4:	e1 e2       	ldi	r30, 0x21	; 33
    12c6:	ec 93       	st	X, r30
    12c8:	e4 c0       	rjmp	.+456    	; 0x1492 <nwkRxTaskHandler+0x454>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    12ca:	e2 e2       	ldi	r30, 0x22	; 34
    12cc:	d8 01       	movw	r26, r16
    12ce:	ec 93       	st	X, r30
    12d0:	e0 c0       	rjmp	.+448    	; 0x1492 <nwkRxTaskHandler+0x454>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    12d2:	d8 01       	movw	r26, r16
    12d4:	17 96       	adiw	r26, 0x07	; 7
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	18 97       	sbiw	r26, 0x08	; 8
    12dc:	82 17       	cp	r24, r18
    12de:	93 07       	cpc	r25, r19
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <nwkRxTaskHandler+0x2a6>
    12e2:	d7 c0       	rjmp	.+430    	; 0x1492 <nwkRxTaskHandler+0x454>
			frame->state = NWK_RX_STATE_ROUTE;
    12e4:	e3 e2       	ldi	r30, 0x23	; 35
    12e6:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    12e8:	d4 c0       	rjmp	.+424    	; 0x1492 <nwkRxTaskHandler+0x454>
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	c8 01       	movw	r24, r16
    12ee:	ff d0       	rcall	.+510    	; 0x14ee <nwkSecurityProcess>
		}
		break;
    12f0:	d0 c0       	rjmp	.+416    	; 0x1492 <nwkRxTaskHandler+0x454>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    12f2:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    12f6:	d8 01       	movw	r26, r16
    12f8:	51 96       	adiw	r26, 0x11	; 17
    12fa:	8c 91       	ld	r24, X
    12fc:	51 97       	sbiw	r26, 0x11	; 17
    12fe:	82 95       	swap	r24
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	e8 2f       	mov	r30, r24
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	ed 57       	subi	r30, 0x7D	; 125
    130c:	f6 4f       	sbci	r31, 0xF6	; 246
    130e:	01 90       	ld	r0, Z+
    1310:	f0 81       	ld	r31, Z
    1312:	e0 2d       	mov	r30, r0
    1314:	30 97       	sbiw	r30, 0x00	; 0
    1316:	09 f4       	brne	.+2      	; 0x131a <nwkRxTaskHandler+0x2dc>
    1318:	60 c0       	rjmp	.+192    	; 0x13da <nwkRxTaskHandler+0x39c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    131a:	1d 96       	adiw	r26, 0x0d	; 13
    131c:	2d 91       	ld	r18, X+
    131e:	3c 91       	ld	r19, X
    1320:	1e 97       	sbiw	r26, 0x0e	; 14
    1322:	3a 83       	std	Y+2, r19	; 0x02
    1324:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    1326:	1f 96       	adiw	r26, 0x0f	; 15
    1328:	4d 91       	ld	r20, X+
    132a:	5c 91       	ld	r21, X
    132c:	50 97       	sbiw	r26, 0x10	; 16
    132e:	5c 83       	std	Y+4, r21	; 0x04
    1330:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    1332:	51 96       	adiw	r26, 0x11	; 17
    1334:	9c 91       	ld	r25, X
    1336:	51 97       	sbiw	r26, 0x11	; 17
    1338:	9f 70       	andi	r25, 0x0F	; 15
    133a:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    133c:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    133e:	af 57       	subi	r26, 0x7F	; 127
    1340:	bf 4f       	sbci	r27, 0xFF	; 255
    1342:	8d 91       	ld	r24, X+
    1344:	9c 91       	ld	r25, X
    1346:	99 87       	std	Y+9, r25	; 0x09
    1348:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    134a:	b8 01       	movw	r22, r16
    134c:	6e 5f       	subi	r22, 0xFE	; 254
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    1350:	86 1b       	sub	r24, r22
    1352:	97 0b       	sbc	r25, r23
    1354:	d8 01       	movw	r26, r16
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	9c 91       	ld	r25, X
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	98 1b       	sub	r25, r24
    135e:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    1360:	ad 57       	subi	r26, 0x7D	; 125
    1362:	bf 4f       	sbci	r27, 0xFF	; 255
    1364:	8c 91       	ld	r24, X
    1366:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	8c 91       	ld	r24, X
    136c:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    136e:	d8 01       	movw	r26, r16
    1370:	1b 96       	adiw	r26, 0x0b	; 11
    1372:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1374:	69 2f       	mov	r22, r25
    1376:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1378:	92 fd       	sbrc	r25, 2
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <nwkRxTaskHandler+0x342>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <nwkRxTaskHandler+0x344>
    1380:	80 e2       	ldi	r24, 0x20	; 32
    1382:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1384:	93 fd       	sbrc	r25, 3
    1386:	02 c0       	rjmp	.+4      	; 0x138c <nwkRxTaskHandler+0x34e>
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 c0       	rjmp	.+2      	; 0x138e <nwkRxTaskHandler+0x350>
    138c:	90 e4       	ldi	r25, 0x40	; 64
    138e:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1390:	4f 3f       	cpi	r20, 0xFF	; 255
    1392:	5f 4f       	sbci	r21, 0xFF	; 255
    1394:	11 f0       	breq	.+4      	; 0x139a <nwkRxTaskHandler+0x35c>
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	01 c0       	rjmp	.+2      	; 0x139c <nwkRxTaskHandler+0x35e>
    139a:	94 2d       	mov	r25, r4
    139c:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    139e:	d8 01       	movw	r26, r16
    13a0:	19 96       	adiw	r26, 0x09	; 9
    13a2:	4d 91       	ld	r20, X+
    13a4:	5c 91       	ld	r21, X
    13a6:	1a 97       	sbiw	r26, 0x0a	; 10
    13a8:	24 17       	cp	r18, r20
    13aa:	35 07       	cpc	r19, r21
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <nwkRxTaskHandler+0x374>
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <nwkRxTaskHandler+0x376>
    13b2:	95 2d       	mov	r25, r5
    13b4:	89 2b       	or	r24, r25
    13b6:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    13b8:	d8 01       	movw	r26, r16
    13ba:	15 96       	adiw	r26, 0x05	; 5
    13bc:	2d 91       	ld	r18, X+
    13be:	3c 91       	ld	r19, X
    13c0:	16 97       	sbiw	r26, 0x06	; 6
    13c2:	2f 3f       	cpi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	11 f0       	breq	.+4      	; 0x13cc <nwkRxTaskHandler+0x38e>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <nwkRxTaskHandler+0x390>
    13cc:	96 2d       	mov	r25, r6
    13ce:	89 2b       	or	r24, r25
    13d0:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	19 95       	eicall
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <nwkRxTaskHandler+0x39e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    13da:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    13dc:	f8 01       	movw	r30, r16
    13de:	93 85       	ldd	r25, Z+11	; 0x0b
    13e0:	90 ff       	sbrs	r25, 0
		ack = false;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    13e4:	d8 01       	movw	r26, r16
    13e6:	17 96       	adiw	r26, 0x07	; 7
    13e8:	2d 91       	ld	r18, X+
    13ea:	3c 91       	ld	r19, X
    13ec:	18 97       	sbiw	r26, 0x08	; 8
    13ee:	2f 3f       	cpi	r18, 0xFF	; 255
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	69 f4       	brne	.+26     	; 0x140e <nwkRxTaskHandler+0x3d0>
    13f4:	f7 01       	movw	r30, r14
    13f6:	40 81       	ld	r20, Z
    13f8:	51 81       	ldd	r21, Z+1	; 0x01
    13fa:	d8 01       	movw	r26, r16
    13fc:	1f 96       	adiw	r26, 0x0f	; 15
    13fe:	2d 91       	ld	r18, X+
    1400:	3c 91       	ld	r19, X
    1402:	50 97       	sbiw	r26, 0x10	; 16
    1404:	42 17       	cp	r20, r18
    1406:	53 07       	cpc	r21, r19
    1408:	11 f4       	brne	.+4      	; 0x140e <nwkRxTaskHandler+0x3d0>
			nwkIb.addr == frame->header.nwkDstAddr &&
    140a:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    140c:	8a 2d       	mov	r24, r10
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    140e:	f8 01       	movw	r30, r16
    1410:	25 81       	ldd	r18, Z+5	; 0x05
    1412:	36 81       	ldd	r19, Z+6	; 0x06
    1414:	2f 3f       	cpi	r18, 0xFF	; 255
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	a1 f1       	breq	.+104    	; 0x1482 <nwkRxTaskHandler+0x444>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    141a:	d7 01       	movw	r26, r14
    141c:	2d 91       	ld	r18, X+
    141e:	3c 91       	ld	r19, X
    1420:	2f 3f       	cpi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    1424:	71 f1       	breq	.+92     	; 0x1482 <nwkRxTaskHandler+0x444>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1426:	88 23       	and	r24, r24
    1428:	61 f1       	breq	.+88     	; 0x1482 <nwkRxTaskHandler+0x444>
    142a:	72 db       	rcall	.-2332   	; 0xb10 <nwkFrameAlloc>
    142c:	4c 01       	movw	r8, r24
    142e:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    1430:	41 f1       	breq	.+80     	; 0x1482 <nwkRxTaskHandler+0x444>
    1432:	d3 db       	rcall	.-2138   	; 0xbda <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    1434:	f4 01       	movw	r30, r8
    1436:	81 81       	ldd	r24, Z+1	; 0x01
    1438:	8d 5f       	subi	r24, 0xFD	; 253
    143a:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    143c:	e9 57       	subi	r30, 0x79	; 121
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	11 82       	std	Z+1, r1	; 0x01
    1442:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1444:	d8 01       	movw	r26, r16
    1446:	1b 96       	adiw	r26, 0x0b	; 11
    1448:	8c 91       	ld	r24, X
    144a:	1b 97       	sbiw	r26, 0x0b	; 11
    144c:	86 95       	lsr	r24
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	f4 01       	movw	r30, r8
    1452:	93 85       	ldd	r25, Z+11	; 0x0b
    1454:	80 fb       	bst	r24, 0
    1456:	91 f9       	bld	r25, 1
    1458:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    145a:	1d 96       	adiw	r26, 0x0d	; 13
    145c:	8d 91       	ld	r24, X+
    145e:	9c 91       	ld	r25, X
    1460:	1e 97       	sbiw	r26, 0x0e	; 14
    1462:	90 8b       	std	Z+16, r25	; 0x10
    1464:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    1466:	ef 57       	subi	r30, 0x7F	; 127
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	01 90       	ld	r0, Z+
    146c:	f0 81       	ld	r31, Z
    146e:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    1470:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    1472:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    1476:	82 83       	std	Z+2, r24	; 0x02
    1478:	1c 96       	adiw	r26, 0x0c	; 12

	nwkTxFrame(ack);
    147a:	8c 91       	ld	r24, X
    147c:	81 83       	std	Z+1, r24	; 0x01

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    147e:	c4 01       	movw	r24, r8
    1480:	f6 d1       	rcall	.+1004   	; 0x186e <nwkTxFrame>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    1482:	d8 01       	movw	r26, r16
    1484:	bc 92       	st	X, r11
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <nwkRxTaskHandler+0x454>
		}
		break;
    1488:	c8 01       	movw	r24, r16
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    148a:	fd dc       	rcall	.-1542   	; 0xe86 <nwkRouteFrame>
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <nwkRxTaskHandler+0x454>
    148e:	c8 01       	movw	r24, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1490:	75 db       	rcall	.-2326   	; 0xb7c <nwkFrameFree>
    1492:	c8 01       	movw	r24, r16
    1494:	7d db       	rcall	.-2310   	; 0xb90 <nwkFrameNext>
    1496:	8c 01       	movw	r16, r24
    1498:	89 2b       	or	r24, r25
    149a:	09 f0       	breq	.+2      	; 0x149e <nwkRxTaskHandler+0x460>
    149c:	0b ce       	rjmp	.-1002   	; 0x10b4 <nwkRxTaskHandler+0x76>
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <nwkRxTaskHandler+0x470>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    14a0:	f8 01       	movw	r30, r16
    14a2:	87 81       	ldd	r24, Z+7	; 0x07
    14a4:	90 85       	ldd	r25, Z+8	; 0x08
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <nwkRxTaskHandler+0x46e>
    14aa:	fb ce       	rjmp	.-522    	; 0x12a2 <nwkRxTaskHandler+0x264>
    14ac:	ec ce       	rjmp	.-552    	; 0x1286 <nwkRxTaskHandler+0x248>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    14ae:	2c 96       	adiw	r28, 0x0c	; 12
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	9f 90       	pop	r9
    14d0:	8f 90       	pop	r8
    14d2:	7f 90       	pop	r7
    14d4:	6f 90       	pop	r6
    14d6:	5f 90       	pop	r5
    14d8:	4f 90       	pop	r4
    14da:	3f 90       	pop	r3
    14dc:	2f 90       	pop	r2
    14de:	08 95       	ret

000014e0 <nwkSecurityInit>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    14e0:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <nwkSecurityActiveFrames>
    14e4:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <nwkSecurityActiveFrame+0x1>
    14e8:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <nwkSecurityActiveFrame>
    14ec:	08 95       	ret

000014ee <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    14ee:	66 23       	and	r22, r22
    14f0:	21 f0       	breq	.+8      	; 0x14fa <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    14f2:	20 e3       	ldi	r18, 0x30	; 48
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    14fa:	21 e3       	ldi	r18, 0x31	; 49
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    1500:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <nwkSecurityActiveFrames>
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <nwkSecurityActiveFrames>
    150a:	08 95       	ret

0000150c <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    1510:	c0 91 88 07 	lds	r28, 0x0788	; 0x800788 <nwkSecurityActiveFrame>
    1514:	d0 91 89 07 	lds	r29, 0x0789	; 0x800789 <nwkSecurityActiveFrame+0x1>
    1518:	fe 01       	movw	r30, r28
    151a:	ef 57       	subi	r30, 0x7F	; 127
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	a0 81       	ld	r26, Z
    1520:	b1 81       	ldd	r27, Z+1	; 0x01
    1522:	70 91 86 07 	lds	r23, 0x0786	; 0x800786 <nwkSecurityOffset>
    1526:	87 2f       	mov	r24, r23
    1528:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    152a:	50 91 87 07 	lds	r21, 0x0787	; 0x800787 <nwkSecuritySize>
    152e:	65 2f       	mov	r22, r21
    1530:	51 31       	cpi	r21, 0x11	; 17
    1532:	08 f0       	brcs	.+2      	; 0x1536 <SYS_EncryptConf+0x2a>
    1534:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1536:	66 23       	and	r22, r22
    1538:	d1 f0       	breq	.+52     	; 0x156e <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    153a:	40 91 85 07 	lds	r20, 0x0785	; 0x800785 <nwkSecurityEncrypt>
    153e:	e5 e7       	ldi	r30, 0x75	; 117
    1540:	f7 e0       	ldi	r31, 0x07	; 7
    1542:	a8 0f       	add	r26, r24
    1544:	b9 1f       	adc	r27, r25
    1546:	2f ef       	ldi	r18, 0xFF	; 255
    1548:	26 0f       	add	r18, r22
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	2a 58       	subi	r18, 0x8A	; 138
    154e:	38 4f       	sbci	r19, 0xF8	; 248
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    1550:	9c 91       	ld	r25, X
    1552:	80 81       	ld	r24, Z
    1554:	89 27       	eor	r24, r25
    1556:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    1558:	44 23       	and	r20, r20
    155a:	11 f0       	breq	.+4      	; 0x1560 <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    155c:	80 83       	st	Z, r24
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    1560:	90 81       	ld	r25, Z
    1562:	89 27       	eor	r24, r25
    1564:	80 83       	st	Z, r24
    1566:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    1568:	e2 17       	cp	r30, r18
    156a:	f3 07       	cpc	r31, r19
    156c:	89 f7       	brne	.-30     	; 0x1550 <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    156e:	76 0f       	add	r23, r22
    1570:	70 93 86 07 	sts	0x0786, r23	; 0x800786 <nwkSecurityOffset>
	nwkSecuritySize -= block;
    1574:	56 1b       	sub	r21, r22
    1576:	50 93 87 07 	sts	0x0787, r21	; 0x800787 <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    157a:	55 23       	and	r21, r21
    157c:	19 f0       	breq	.+6      	; 0x1584 <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    157e:	82 e3       	ldi	r24, 0x32	; 50
    1580:	88 83       	st	Y, r24
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    1584:	84 e3       	ldi	r24, 0x34	; 52
    1586:	88 83       	st	Y, r24
	}
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    1596:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <nwkSecurityActiveFrames>
    159a:	88 23       	and	r24, r24
    159c:	09 f4       	brne	.+2      	; 0x15a0 <nwkSecurityTaskHandler+0x12>
    159e:	e1 c0       	rjmp	.+450    	; 0x1762 <nwkSecurityTaskHandler+0x1d4>
		return;
	}

	if (nwkSecurityActiveFrame) {
    15a0:	e0 91 88 07 	lds	r30, 0x0788	; 0x800788 <nwkSecurityActiveFrame>
    15a4:	f0 91 89 07 	lds	r31, 0x0789	; 0x800789 <nwkSecurityActiveFrame+0x1>
    15a8:	30 97       	sbiw	r30, 0x00	; 0
    15aa:	09 f4       	brne	.+2      	; 0x15ae <nwkSecurityTaskHandler+0x20>
    15ac:	d4 c0       	rjmp	.+424    	; 0x1756 <nwkSecurityTaskHandler+0x1c8>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    15ae:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    15b0:	84 33       	cpi	r24, 0x34	; 52
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <nwkSecurityTaskHandler+0x28>
    15b4:	55 c0       	rjmp	.+170    	; 0x1660 <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    15b6:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <nwkSecurityOffset>
    15ba:	df 01       	movw	r26, r30
    15bc:	af 57       	subi	r26, 0x7F	; 127
    15be:	bf 4f       	sbci	r27, 0xFF	; 255
    15c0:	cd 91       	ld	r28, X+
    15c2:	dc 91       	ld	r29, X
    15c4:	c8 0f       	add	r28, r24
    15c6:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    15c8:	a5 e7       	ldi	r26, 0x75	; 117
    15ca:	b7 e0       	ldi	r27, 0x07	; 7
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    15cc:	0d 91       	ld	r16, X+
    15ce:	1d 91       	ld	r17, X+
    15d0:	2d 91       	ld	r18, X+
    15d2:	3c 91       	ld	r19, X
    15d4:	13 97       	sbiw	r26, 0x03	; 3
    15d6:	14 96       	adiw	r26, 0x04	; 4
    15d8:	4d 91       	ld	r20, X+
    15da:	5d 91       	ld	r21, X+
    15dc:	6d 91       	ld	r22, X+
    15de:	7c 91       	ld	r23, X
    15e0:	17 97       	sbiw	r26, 0x07	; 7
    15e2:	04 27       	eor	r16, r20
    15e4:	15 27       	eor	r17, r21
    15e6:	26 27       	eor	r18, r22
    15e8:	37 27       	eor	r19, r23
    15ea:	18 96       	adiw	r26, 0x08	; 8
    15ec:	4d 91       	ld	r20, X+
    15ee:	5d 91       	ld	r21, X+
    15f0:	6d 91       	ld	r22, X+
    15f2:	7c 91       	ld	r23, X
    15f4:	1b 97       	sbiw	r26, 0x0b	; 11
    15f6:	04 27       	eor	r16, r20
    15f8:	15 27       	eor	r17, r21
    15fa:	26 27       	eor	r18, r22
    15fc:	37 27       	eor	r19, r23
    15fe:	1c 96       	adiw	r26, 0x0c	; 12
    1600:	4d 91       	ld	r20, X+
    1602:	5d 91       	ld	r21, X+
    1604:	6d 91       	ld	r22, X+
    1606:	7c 91       	ld	r23, X
    1608:	1f 97       	sbiw	r26, 0x0f	; 15
    160a:	d9 01       	movw	r26, r18
    160c:	c8 01       	movw	r24, r16
    160e:	84 27       	eor	r24, r20
    1610:	95 27       	eor	r25, r21
    1612:	a6 27       	eor	r26, r22
    1614:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    1616:	20 91 85 07 	lds	r18, 0x0785	; 0x800785 <nwkSecurityEncrypt>
    161a:	22 23       	and	r18, r18
    161c:	51 f0       	breq	.+20     	; 0x1632 <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    161e:	88 83       	st	Y, r24
    1620:	99 83       	std	Y+1, r25	; 0x01
    1622:	aa 83       	std	Y+2, r26	; 0x02
    1624:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    1626:	81 81       	ldd	r24, Z+1	; 0x01
    1628:	8c 5f       	subi	r24, 0xFC	; 252
    162a:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    162c:	cf 01       	movw	r24, r30
    162e:	de d1       	rcall	.+956    	; 0x19ec <nwkTxEncryptConf>
    1630:	0d c0       	rjmp	.+26     	; 0x164c <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	08 81       	ld	r16, Y
    1636:	19 81       	ldd	r17, Y+1	; 0x01
    1638:	2a 81       	ldd	r18, Y+2	; 0x02
    163a:	3b 81       	ldd	r19, Y+3	; 0x03
    163c:	08 17       	cp	r16, r24
    163e:	19 07       	cpc	r17, r25
    1640:	2a 07       	cpc	r18, r26
    1642:	3b 07       	cpc	r19, r27
    1644:	09 f0       	breq	.+2      	; 0x1648 <nwkSecurityTaskHandler+0xba>
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	cf 01       	movw	r24, r30
    164a:	ef dc       	rcall	.-1570   	; 0x102a <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    164c:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <nwkSecurityActiveFrame+0x1>
    1650:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    1654:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <nwkSecurityActiveFrames>
    1658:	81 50       	subi	r24, 0x01	; 1
    165a:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <nwkSecurityActiveFrames>
    165e:	81 c0       	rjmp	.+258    	; 0x1762 <nwkSecurityTaskHandler+0x1d4>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    1660:	82 33       	cpi	r24, 0x32	; 50
    1662:	09 f0       	breq	.+2      	; 0x1666 <nwkSecurityTaskHandler+0xd8>
    1664:	7e c0       	rjmp	.+252    	; 0x1762 <nwkSecurityTaskHandler+0x1d4>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    1666:	83 e3       	ldi	r24, 0x33	; 51
    1668:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    166a:	63 ea       	ldi	r22, 0xA3	; 163
    166c:	79 e0       	ldi	r23, 0x09	; 9
    166e:	85 e7       	ldi	r24, 0x75	; 117
    1670:	97 e0       	ldi	r25, 0x07	; 7
    1672:	c9 d3       	rcall	.+1938   	; 0x1e06 <SYS_EncryptReq>
    1674:	76 c0       	rjmp	.+236    	; 0x1762 <nwkSecurityTaskHandler+0x1d4>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    1676:	dc 01       	movw	r26, r24
    1678:	2c 91       	ld	r18, X
    167a:	20 53       	subi	r18, 0x30	; 48
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	08 f0       	brcs	.+2      	; 0x1682 <nwkSecurityTaskHandler+0xf4>
    1680:	6c c0       	rjmp	.+216    	; 0x175a <nwkSecurityTaskHandler+0x1cc>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    1682:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <nwkSecurityActiveFrame+0x1>
    1686:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    168a:	e5 e7       	ldi	r30, 0x75	; 117
    168c:	f7 e0       	ldi	r31, 0x07	; 7
    168e:	1c 96       	adiw	r26, 0x0c	; 12
    1690:	4c 91       	ld	r20, X
    1692:	1c 97       	sbiw	r26, 0x0c	; 12
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	40 83       	st	Z, r20
    169c:	51 83       	std	Z+1, r21	; 0x01
    169e:	62 83       	std	Z+2, r22	; 0x02
    16a0:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    16a2:	1f 96       	adiw	r26, 0x0f	; 15
    16a4:	4d 91       	ld	r20, X+
    16a6:	5c 91       	ld	r21, X
    16a8:	50 97       	sbiw	r26, 0x10	; 16
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	ba 01       	movw	r22, r20
    16b0:	55 27       	eor	r21, r21
    16b2:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    16b4:	51 96       	adiw	r26, 0x11	; 17
    16b6:	2c 91       	ld	r18, X
    16b8:	51 97       	sbiw	r26, 0x11	; 17
    16ba:	22 95       	swap	r18
    16bc:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    16be:	42 2b       	or	r20, r18
    16c0:	44 83       	std	Z+4, r20	; 0x04
    16c2:	55 83       	std	Z+5, r21	; 0x05
    16c4:	66 83       	std	Z+6, r22	; 0x06
    16c6:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    16c8:	1d 96       	adiw	r26, 0x0d	; 13
    16ca:	4d 91       	ld	r20, X+
    16cc:	5c 91       	ld	r21, X
    16ce:	1e 97       	sbiw	r26, 0x0e	; 14
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	ba 01       	movw	r22, r20
    16d6:	55 27       	eor	r21, r21
    16d8:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    16da:	51 96       	adiw	r26, 0x11	; 17
    16dc:	2c 91       	ld	r18, X
    16de:	51 97       	sbiw	r26, 0x11	; 17
    16e0:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    16e2:	42 2b       	or	r20, r18
    16e4:	40 87       	std	Z+8, r20	; 0x08
    16e6:	51 87       	std	Z+9, r21	; 0x09
    16e8:	62 87       	std	Z+10, r22	; 0x0a
    16ea:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    16ec:	15 96       	adiw	r26, 0x05	; 5
    16ee:	4d 91       	ld	r20, X+
    16f0:	5c 91       	ld	r21, X
    16f2:	16 97       	sbiw	r26, 0x06	; 6
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	ba 01       	movw	r22, r20
    16fa:	55 27       	eor	r21, r21
    16fc:	44 27       	eor	r20, r20
    16fe:	1b 96       	adiw	r26, 0x0b	; 11
    1700:	2c 91       	ld	r18, X
    1702:	1b 97       	sbiw	r26, 0x0b	; 11
    1704:	42 2b       	or	r20, r18
    1706:	44 87       	std	Z+12, r20	; 0x0c
    1708:	55 87       	std	Z+13, r21	; 0x0d
    170a:	66 87       	std	Z+14, r22	; 0x0e
    170c:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    170e:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    1710:	61 33       	cpi	r22, 0x31	; 49
    1712:	31 f4       	brne	.+12     	; 0x1720 <nwkSecurityTaskHandler+0x192>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    1714:	11 96       	adiw	r26, 0x01	; 1
    1716:	2c 91       	ld	r18, X
    1718:	11 97       	sbiw	r26, 0x01	; 1
    171a:	24 50       	subi	r18, 0x04	; 4
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    1720:	fc 01       	movw	r30, r24
    1722:	ef 57       	subi	r30, 0x7F	; 127
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	40 81       	ld	r20, Z
    1728:	51 81       	ldd	r21, Z+1	; 0x01
    172a:	9c 01       	movw	r18, r24
    172c:	2e 5f       	subi	r18, 0xFE	; 254
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	42 1b       	sub	r20, r18
    1732:	53 0b       	sbc	r21, r19
    1734:	fc 01       	movw	r30, r24
    1736:	21 81       	ldd	r18, Z+1	; 0x01
    1738:	24 1b       	sub	r18, r20
    173a:	20 93 87 07 	sts	0x0787, r18	; 0x800787 <nwkSecuritySize>
	nwkSecurityOffset = 0;
    173e:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	60 33       	cpi	r22, 0x30	; 48
    1746:	09 f0       	breq	.+2      	; 0x174a <nwkSecurityTaskHandler+0x1bc>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	20 93 85 07 	sts	0x0785, r18	; 0x800785 <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    174e:	22 e3       	ldi	r18, 0x32	; 50
    1750:	dc 01       	movw	r26, r24
    1752:	2c 93       	st	X, r18
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <nwkSecurityTaskHandler+0x1d4>
    1756:	80 e0       	ldi	r24, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	1a da       	rcall	.-3020   	; 0xb90 <nwkFrameNext>
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	09 f0       	breq	.+2      	; 0x1762 <nwkSecurityTaskHandler+0x1d4>
    1760:	8a cf       	rjmp	.-236    	; 0x1676 <nwkSecurityTaskHandler+0xe8>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	7c 01       	movw	r14, r24
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	01 e0       	ldi	r16, 0x01	; 1
    1780:	c3 e1       	ldi	r28, 0x13	; 19
    1782:	13 c0       	rjmp	.+38     	; 0x17aa <nwkTxDelayTimerHandler+0x3e>
    1784:	fc 01       	movw	r30, r24
    1786:	20 81       	ld	r18, Z
    1788:	21 31       	cpi	r18, 0x11	; 17
    178a:	79 f4       	brne	.+30     	; 0x17aa <nwkTxDelayTimerHandler+0x3e>
    178c:	ec 57       	subi	r30, 0x7C	; 124
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	20 81       	ld	r18, Z
    1792:	31 81       	ldd	r19, Z+1	; 0x01
    1794:	21 50       	subi	r18, 0x01	; 1
    1796:	31 09       	sbc	r19, r1
    1798:	31 83       	std	Z+1, r19	; 0x01
    179a:	20 83       	st	Z, r18
    179c:	23 2b       	or	r18, r19
    179e:	21 f4       	brne	.+8      	; 0x17a8 <nwkTxDelayTimerHandler+0x3c>
    17a0:	fc 01       	movw	r30, r24
    17a2:	c0 83       	st	Z, r28
    17a4:	10 2f       	mov	r17, r16
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <nwkTxDelayTimerHandler+0x3e>
    17a8:	10 2f       	mov	r17, r16
    17aa:	f2 d9       	rcall	.-3100   	; 0xb90 <nwkFrameNext>
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	51 f7       	brne	.-44     	; 0x1784 <nwkTxDelayTimerHandler+0x18>
    17b0:	11 23       	and	r17, r17
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <nwkTxDelayTimerHandler+0x4c>
    17b4:	c7 01       	movw	r24, r14
    17b6:	00 d4       	rcall	.+2048   	; 0x1fb8 <SYS_TimerStart>
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	08 95       	ret

000017c4 <nwkTxAckWaitTimerHandler>:
    17c4:	ef 92       	push	r14
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	7c 01       	movw	r14, r24
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	01 e0       	ldi	r16, 0x01	; 1
    17da:	d7 e1       	ldi	r29, 0x17	; 23
    17dc:	c0 e1       	ldi	r28, 0x10	; 16
    17de:	16 c0       	rjmp	.+44     	; 0x180c <nwkTxAckWaitTimerHandler+0x48>
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 81       	ld	r18, Z
    17e4:	26 31       	cpi	r18, 0x16	; 22
    17e6:	91 f4       	brne	.+36     	; 0x180c <nwkTxAckWaitTimerHandler+0x48>
    17e8:	ec 57       	subi	r30, 0x7C	; 124
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	20 81       	ld	r18, Z
    17ee:	31 81       	ldd	r19, Z+1	; 0x01
    17f0:	21 50       	subi	r18, 0x01	; 1
    17f2:	31 09       	sbc	r19, r1
    17f4:	31 83       	std	Z+1, r19	; 0x01
    17f6:	20 83       	st	Z, r18
    17f8:	23 2b       	or	r18, r19
    17fa:	39 f4       	brne	.+14     	; 0x180a <nwkTxAckWaitTimerHandler+0x46>
    17fc:	fc 01       	movw	r30, r24
    17fe:	d0 83       	st	Z, r29
    1800:	ed 57       	subi	r30, 0x7D	; 125
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	c0 83       	st	Z, r28
    1806:	10 2f       	mov	r17, r16
    1808:	01 c0       	rjmp	.+2      	; 0x180c <nwkTxAckWaitTimerHandler+0x48>
    180a:	10 2f       	mov	r17, r16
    180c:	c1 d9       	rcall	.-3198   	; 0xb90 <nwkFrameNext>
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	39 f7       	brne	.-50     	; 0x17e0 <nwkTxAckWaitTimerHandler+0x1c>
    1812:	11 23       	and	r17, r17
    1814:	11 f0       	breq	.+4      	; 0x181a <nwkTxAckWaitTimerHandler+0x56>
    1816:	c7 01       	movw	r24, r14
    1818:	cf d3       	rcall	.+1950   	; 0x1fb8 <SYS_TimerStart>
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	08 95       	ret

00001828 <nwkTxInit>:
    1828:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <nwkTxPhyActiveFrame+0x1>
    182c:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <nwkTxPhyActiveFrame>
    1830:	e8 e9       	ldi	r30, 0x98	; 152
    1832:	f7 e0       	ldi	r31, 0x07	; 7
    1834:	82 e3       	ldi	r24, 0x32	; 50
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e0       	ldi	r26, 0x00	; 0
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	86 83       	std	Z+6, r24	; 0x06
    183e:	97 83       	std	Z+7, r25	; 0x07
    1840:	a0 87       	std	Z+8, r26	; 0x08
    1842:	b1 87       	std	Z+9, r27	; 0x09
    1844:	12 86       	std	Z+10, r1	; 0x0a
    1846:	82 ee       	ldi	r24, 0xE2	; 226
    1848:	9b e0       	ldi	r25, 0x0B	; 11
    184a:	94 87       	std	Z+12, r25	; 0x0c
    184c:	83 87       	std	Z+11, r24	; 0x0b
    184e:	eb e8       	ldi	r30, 0x8B	; 139
    1850:	f7 e0       	ldi	r31, 0x07	; 7
    1852:	8a e0       	ldi	r24, 0x0A	; 10
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e0       	ldi	r26, 0x00	; 0
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	86 83       	std	Z+6, r24	; 0x06
    185c:	97 83       	std	Z+7, r25	; 0x07
    185e:	a0 87       	std	Z+8, r26	; 0x08
    1860:	b1 87       	std	Z+9, r27	; 0x09
    1862:	12 86       	std	Z+10, r1	; 0x0a
    1864:	86 eb       	ldi	r24, 0xB6	; 182
    1866:	9b e0       	ldi	r25, 0x0B	; 11
    1868:	94 87       	std	Z+12, r25	; 0x0c
    186a:	83 87       	std	Z+11, r24	; 0x0b
    186c:	08 95       	ret

0000186e <nwkTxFrame>:
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
    1874:	fc 01       	movw	r30, r24
    1876:	ea 57       	subi	r30, 0x7A	; 122
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	81 ff       	sbrs	r24, 1
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <nwkTxFrame+0x18>
    1880:	92 e1       	ldi	r25, 0x12	; 18
    1882:	98 83       	st	Y, r25
    1884:	08 c0       	rjmp	.+16     	; 0x1896 <nwkTxFrame+0x28>
    1886:	9b 85       	ldd	r25, Y+11	; 0x0b
    1888:	91 ff       	sbrs	r25, 1
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <nwkTxFrame+0x24>
    188c:	90 e1       	ldi	r25, 0x10	; 16
    188e:	98 83       	st	Y, r25
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <nwkTxFrame+0x28>
    1892:	92 e1       	ldi	r25, 0x12	; 18
    1894:	98 83       	st	Y, r25
    1896:	fe 01       	movw	r30, r28
    1898:	ed 57       	subi	r30, 0x7D	; 125
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	10 82       	st	Z, r1
    189e:	80 ff       	sbrs	r24, 0
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <nwkTxFrame+0x3e>
    18a2:	2f ef       	ldi	r18, 0xFF	; 255
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	3e 83       	std	Y+6, r19	; 0x06
    18a8:	2d 83       	std	Y+5, r18	; 0x05
    18aa:	06 c0       	rjmp	.+12     	; 0x18b8 <nwkTxFrame+0x4a>
    18ac:	20 91 7f 09 	lds	r18, 0x097F	; 0x80097f <nwkIb+0x2>
    18b0:	30 91 80 09 	lds	r19, 0x0980	; 0x800980 <nwkIb+0x3>
    18b4:	3e 83       	std	Y+6, r19	; 0x06
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	85 70       	andi	r24, 0x05	; 5
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <nwkTxFrame+0x54>
    18bc:	ce 01       	movw	r24, r28
    18be:	c4 da       	rcall	.-2680   	; 0xe48 <nwkRoutePrepareTx>
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <nwkTxFrame+0x5c>
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c4:	98 89       	ldd	r25, Y+16	; 0x10
    18c6:	98 87       	std	Y+8, r25	; 0x08
    18c8:	8f 83       	std	Y+7, r24	; 0x07
    18ca:	ed e7       	ldi	r30, 0x7D	; 125
    18cc:	f9 e0       	ldi	r31, 0x09	; 9
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	9a 87       	std	Y+10, r25	; 0x0a
    18d4:	89 87       	std	Y+9, r24	; 0x09
    18d6:	85 81       	ldd	r24, Z+5	; 0x05
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	85 83       	std	Z+5, r24	; 0x05
    18dc:	8c 83       	std	Y+4, r24	; 0x04
    18de:	8f 81       	ldd	r24, Y+7	; 0x07
    18e0:	98 85       	ldd	r25, Y+8	; 0x08
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	71 f4       	brne	.+28     	; 0x1902 <nwkTxFrame+0x94>
    18e6:	81 e4       	ldi	r24, 0x41	; 65
    18e8:	98 e8       	ldi	r25, 0x88	; 136
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <rand>
    18f2:	cc 57       	subi	r28, 0x7C	; 124
    18f4:	df 4f       	sbci	r29, 0xFF	; 255
    18f6:	87 70       	andi	r24, 0x07	; 7
    18f8:	99 27       	eor	r25, r25
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	99 83       	std	Y+1, r25	; 0x01
    18fe:	88 83       	st	Y, r24
    1900:	08 c0       	rjmp	.+16     	; 0x1912 <nwkTxFrame+0xa4>
    1902:	81 e6       	ldi	r24, 0x61	; 97
    1904:	98 e8       	ldi	r25, 0x88	; 136
    1906:	9b 83       	std	Y+3, r25	; 0x03
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	cc 57       	subi	r28, 0x7C	; 124
    190c:	df 4f       	sbci	r29, 0xFF	; 255
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	18 82       	st	Y, r1
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <nwkTxBroadcastFrame>:
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	8c 01       	movw	r16, r24
    1922:	f6 d8       	rcall	.-3604   	; 0xb10 <nwkFrameAlloc>
    1924:	ec 01       	movw	r28, r24
    1926:	89 2b       	or	r24, r25
    1928:	b9 f1       	breq	.+110    	; 0x1998 <nwkTxBroadcastFrame+0x80>
    192a:	82 e1       	ldi	r24, 0x12	; 18
    192c:	88 83       	st	Y, r24
    192e:	f8 01       	movw	r30, r16
    1930:	81 81       	ldd	r24, Z+1	; 0x01
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	fe 01       	movw	r30, r28
    1936:	ed 57       	subi	r30, 0x7D	; 125
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	10 82       	st	Z, r1
    193c:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <rand>
    1940:	fe 01       	movw	r30, r28
    1942:	ec 57       	subi	r30, 0x7C	; 124
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	87 70       	andi	r24, 0x07	; 7
    1948:	99 27       	eor	r25, r25
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	33 96       	adiw	r30, 0x03	; 3
    1952:	11 82       	std	Z+1, r1	; 0x01
    1954:	10 82       	st	Z, r1
    1956:	f8 01       	movw	r30, r16
    1958:	41 81       	ldd	r20, Z+1	; 0x01
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	b8 01       	movw	r22, r16
    195e:	6e 5f       	subi	r22, 0xFE	; 254
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	ce 01       	movw	r24, r28
    1964:	02 96       	adiw	r24, 0x02	; 2
    1966:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <memcpy>
    196a:	81 e4       	ldi	r24, 0x41	; 65
    196c:	98 e8       	ldi	r25, 0x88	; 136
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	98 87       	std	Y+8, r25	; 0x08
    1978:	8f 83       	std	Y+7, r24	; 0x07
    197a:	f8 01       	movw	r30, r16
    197c:	85 81       	ldd	r24, Z+5	; 0x05
    197e:	96 81       	ldd	r25, Z+6	; 0x06
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	ed e7       	ldi	r30, 0x7D	; 125
    1986:	f9 e0       	ldi	r31, 0x09	; 9
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	9a 87       	std	Y+10, r25	; 0x0a
    198e:	89 87       	std	Y+9, r24	; 0x09
    1990:	85 81       	ldd	r24, Z+5	; 0x05
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	85 83       	std	Z+5, r24	; 0x05
    1996:	8c 83       	std	Y+4, r24	; 0x04
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <nwkTxAckReceived>:
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	fc 01       	movw	r30, r24
    19a8:	21 85       	ldd	r18, Z+9	; 0x09
    19aa:	23 30       	cpi	r18, 0x03	; 3
    19ac:	d9 f4       	brne	.+54     	; 0x19e4 <nwkTxAckReceived+0x42>
    19ae:	10 c0       	rjmp	.+32     	; 0x19d0 <nwkTxAckReceived+0x2e>
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 81       	ld	r18, Z
    19b4:	26 31       	cpi	r18, 0x16	; 22
    19b6:	89 f4       	brne	.+34     	; 0x19da <nwkTxAckReceived+0x38>
    19b8:	34 85       	ldd	r19, Z+12	; 0x0c
    19ba:	29 81       	ldd	r18, Y+1	; 0x01
    19bc:	32 13       	cpse	r19, r18
    19be:	0d c0       	rjmp	.+26     	; 0x19da <nwkTxAckReceived+0x38>
    19c0:	27 e1       	ldi	r18, 0x17	; 23
    19c2:	20 83       	st	Z, r18
    19c4:	2a 81       	ldd	r18, Y+2	; 0x02
    19c6:	ea 57       	subi	r30, 0x7A	; 122
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	20 83       	st	Z, r18
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0b c0       	rjmp	.+22     	; 0x19e6 <nwkTxAckReceived+0x44>
    19d0:	fc 01       	movw	r30, r24
    19d2:	c7 81       	ldd	r28, Z+7	; 0x07
    19d4:	d0 85       	ldd	r29, Z+8	; 0x08
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	da d8       	rcall	.-3660   	; 0xb90 <nwkFrameNext>
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	41 f7       	brne	.-48     	; 0x19b0 <nwkTxAckReceived+0xe>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <nwkTxAckReceived+0x44>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	08 95       	ret

000019ec <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    19ec:	22 e1       	ldi	r18, 0x12	; 18
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 83       	st	Z, r18
    19f2:	08 95       	ret

000019f4 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    19f4:	e0 91 a5 07 	lds	r30, 0x07A5	; 0x8007a5 <nwkTxPhyActiveFrame>
    19f8:	f0 91 a6 07 	lds	r31, 0x07A6	; 0x8007a6 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	21 f0       	breq	.+8      	; 0x1a08 <PHY_DataConf+0x14>
    1a00:	48 f0       	brcs	.+18     	; 0x1a14 <PHY_DataConf+0x20>
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <PHY_DataConf+0x18>
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    1a0c:	81 e2       	ldi	r24, 0x21	; 33
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    1a14:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1a16:	df 01       	movw	r26, r30
    1a18:	ad 57       	subi	r26, 0x7D	; 125
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1a1e:	85 e1       	ldi	r24, 0x15	; 21
    1a20:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    1a22:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <nwkTxPhyActiveFrame+0x1>
    1a26:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    1a2a:	ed e7       	ldi	r30, 0x7D	; 125
    1a2c:	f9 e0       	ldi	r31, 0x09	; 9
    1a2e:	86 a9       	ldd	r24, Z+54	; 0x36
    1a30:	97 a9       	ldd	r25, Z+55	; 0x37
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	97 ab       	std	Z+55, r25	; 0x37
    1a36:	86 ab       	std	Z+54, r24	; 0x36
    1a38:	08 95       	ret

00001a3a <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1a3a:	9f 92       	push	r9
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    1a50:	c0 e0       	ldi	r28, 0x00	; 0
    1a52:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1a54:	0f 2e       	mov	r0, r31
    1a56:	f4 e1       	ldi	r31, 0x14	; 20
    1a58:	af 2e       	mov	r10, r31
    1a5a:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    1a5c:	0d e7       	ldi	r16, 0x7D	; 125
    1a5e:	19 e0       	ldi	r17, 0x09	; 9
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1a60:	0f 2e       	mov	r0, r31
    1a62:	f7 e1       	ldi	r31, 0x17	; 23
    1a64:	df 2e       	mov	r13, r31
    1a66:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1a68:	0f 2e       	mov	r0, r31
    1a6a:	f6 e1       	ldi	r31, 0x16	; 22
    1a6c:	9f 2e       	mov	r9, r31
    1a6e:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f5 e1       	ldi	r31, 0x15	; 21
    1a74:	ef 2e       	mov	r14, r31
    1a76:	f1 2c       	mov	r15, r1
    1a78:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f3 e1       	ldi	r31, 0x13	; 19
    1a7e:	cf 2e       	mov	r12, r31
    1a80:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f1 e1       	ldi	r31, 0x11	; 17
    1a86:	bf 2e       	mov	r11, r31
    1a88:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1a8a:	65 c0       	rjmp	.+202    	; 0x1b56 <nwkTxTaskHandler+0x11c>
		switch (frame->state) {
    1a8c:	88 81       	ld	r24, Y
    1a8e:	83 31       	cpi	r24, 0x13	; 19
    1a90:	f1 f0       	breq	.+60     	; 0x1ace <nwkTxTaskHandler+0x94>
    1a92:	28 f4       	brcc	.+10     	; 0x1a9e <nwkTxTaskHandler+0x64>
    1a94:	80 31       	cpi	r24, 0x10	; 16
    1a96:	49 f0       	breq	.+18     	; 0x1aaa <nwkTxTaskHandler+0x70>
    1a98:	82 31       	cpi	r24, 0x12	; 18
    1a9a:	59 f0       	breq	.+22     	; 0x1ab2 <nwkTxTaskHandler+0x78>
    1a9c:	5c c0       	rjmp	.+184    	; 0x1b56 <nwkTxTaskHandler+0x11c>
    1a9e:	85 31       	cpi	r24, 0x15	; 21
    1aa0:	61 f1       	breq	.+88     	; 0x1afa <nwkTxTaskHandler+0xc0>
    1aa2:	87 31       	cpi	r24, 0x17	; 23
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <nwkTxTaskHandler+0x6e>
    1aa6:	48 c0       	rjmp	.+144    	; 0x1b38 <nwkTxTaskHandler+0xfe>
    1aa8:	56 c0       	rjmp	.+172    	; 0x1b56 <nwkTxTaskHandler+0x11c>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	ce 01       	movw	r24, r28
    1aae:	1f dd       	rcall	.-1474   	; 0x14ee <nwkSecurityProcess>
		}
		break;
    1ab0:	52 c0       	rjmp	.+164    	; 0x1b56 <nwkTxTaskHandler+0x11c>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ec 57       	subi	r30, 0x7C	; 124
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	89 2b       	or	r24, r25
    1abe:	29 f0       	breq	.+10     	; 0x1aca <nwkTxTaskHandler+0x90>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    1ac0:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    1ac2:	8b e8       	ldi	r24, 0x8B	; 139
    1ac4:	97 e0       	ldi	r25, 0x07	; 7
    1ac6:	78 d2       	rcall	.+1264   	; 0x1fb8 <SYS_TimerStart>
    1ac8:	46 c0       	rjmp	.+140    	; 0x1b56 <nwkTxTaskHandler+0x11c>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    1aca:	c8 82       	st	Y, r12
    1acc:	44 c0       	rjmp	.+136    	; 0x1b56 <nwkTxTaskHandler+0x11c>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    1ace:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <nwkTxPhyActiveFrame>
    1ad2:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <nwkTxPhyActiveFrame+0x1>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <nwkTxTaskHandler+0xa2>
    1ada:	3d c0       	rjmp	.+122    	; 0x1b56 <nwkTxTaskHandler+0x11c>
				nwkTxPhyActiveFrame = frame;
    1adc:	d0 93 a6 07 	sts	0x07A6, r29	; 0x8007a6 <nwkTxPhyActiveFrame+0x1>
    1ae0:	c0 93 a5 07 	sts	0x07A5, r28	; 0x8007a5 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    1ae8:	cf 01       	movw	r24, r30
    1aea:	d1 d0       	rcall	.+418    	; 0x1c8e <PHY_DataReq>
				nwkIb.lock++;
    1aec:	f8 01       	movw	r30, r16
    1aee:	86 a9       	ldd	r24, Z+54	; 0x36
    1af0:	97 a9       	ldd	r25, Z+55	; 0x37
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	97 ab       	std	Z+55, r25	; 0x37
    1af6:	86 ab       	std	Z+54, r24	; 0x36
    1af8:	2e c0       	rjmp	.+92     	; 0x1b56 <nwkTxTaskHandler+0x11c>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1afa:	fe 01       	movw	r30, r28
    1afc:	ed 57       	subi	r30, 0x7D	; 125
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	81 11       	cpse	r24, r1
    1b04:	17 c0       	rjmp	.+46     	; 0x1b34 <nwkTxTaskHandler+0xfa>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    1b06:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b08:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	80 81       	ld	r24, Z
    1b0e:	91 81       	ldd	r25, Z+1	; 0x01
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	69 f4       	brne	.+26     	; 0x1b30 <nwkTxTaskHandler+0xf6>
    1b16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b18:	80 ff       	sbrs	r24, 0
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <nwkTxTaskHandler+0xf6>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    1b1c:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    1b1e:	fe 01       	movw	r30, r28
    1b20:	ec 57       	subi	r30, 0x7C	; 124
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	f1 82       	std	Z+1, r15	; 0x01
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    1b26:	e0 82       	st	Z, r14
    1b28:	88 e9       	ldi	r24, 0x98	; 152
    1b2a:	97 e0       	ldi	r25, 0x07	; 7
    1b2c:	45 d2       	rcall	.+1162   	; 0x1fb8 <SYS_TimerStart>
    1b2e:	13 c0       	rjmp	.+38     	; 0x1b56 <nwkTxTaskHandler+0x11c>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    1b30:	d8 82       	st	Y, r13
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    1b32:	11 c0       	rjmp	.+34     	; 0x1b56 <nwkTxTaskHandler+0x11c>
    1b34:	d8 82       	st	Y, r13
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <nwkTxTaskHandler+0x11c>
    1b38:	ce 01       	movw	r24, r28
    1b3a:	3f d9       	rcall	.-3458   	; 0xdba <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e9 57       	subi	r30, 0x79	; 121
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	01 90       	ld	r0, Z+
    1b44:	f0 81       	ld	r31, Z
    1b46:	e0 2d       	mov	r30, r0
    1b48:	30 97       	sbiw	r30, 0x00	; 0
				nwkFrameFree(frame);
    1b4a:	19 f4       	brne	.+6      	; 0x1b52 <nwkTxTaskHandler+0x118>
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	16 d8       	rcall	.-4052   	; 0xb7c <nwkFrameFree>
			} else {
				frame->tx.confirm(frame);
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <nwkTxTaskHandler+0x11c>
    1b52:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1b54:	19 95       	eicall
    1b56:	ce 01       	movw	r24, r28
    1b58:	1b d8       	rcall	.-4042   	; 0xb90 <nwkFrameNext>
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	89 2b       	or	r24, r25
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <nwkTxTaskHandler+0x128>
    1b60:	95 cf       	rjmp	.-214    	; 0x1a8c <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	08 95       	ret

00001b7a <phySetChannel>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    1b7a:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <phyBand>
    1b7e:	98 2f       	mov	r25, r24
    1b80:	9f 70       	andi	r25, 0x0F	; 15
    1b82:	e4 e5       	ldi	r30, 0x54	; 84
    1b84:	f1 e0       	ldi	r31, 0x01	; 1
    1b86:	80 81       	ld	r24, Z
    1b88:	80 7f       	andi	r24, 0xF0	; 240
    1b8a:	89 2b       	or	r24, r25
    1b8c:	80 83       	st	Z, r24
    1b8e:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <phyBand>
    1b92:	88 23       	and	r24, r24
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <phySetChannel+0x26>
    1b96:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <phyChannel>
    1b9a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    1b9e:	08 95       	ret
    1ba0:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <phyChannel>
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	9f 71       	andi	r25, 0x1F	; 31
    1ba8:	e8 e4       	ldi	r30, 0x48	; 72
    1baa:	f1 e0       	ldi	r31, 0x01	; 1
    1bac:	80 81       	ld	r24, Z
    1bae:	80 7e       	andi	r24, 0xE0	; 224
    1bb0:	89 2b       	or	r24, r25
    1bb2:	80 83       	st	Z, r24
    1bb4:	08 95       	ret

00001bb6 <phyTrxSetState>:
    1bb6:	a2 e4       	ldi	r26, 0x42	; 66
    1bb8:	b1 e0       	ldi	r27, 0x01	; 1
    1bba:	23 e0       	ldi	r18, 0x03	; 3
    1bbc:	e1 e4       	ldi	r30, 0x41	; 65
    1bbe:	f1 e0       	ldi	r31, 0x01	; 1
    1bc0:	2c 93       	st	X, r18
    1bc2:	90 81       	ld	r25, Z
    1bc4:	9f 71       	andi	r25, 0x1F	; 31
    1bc6:	98 30       	cpi	r25, 0x08	; 8
    1bc8:	d9 f7       	brne	.-10     	; 0x1bc0 <phyTrxSetState+0xa>
    1bca:	a2 e4       	ldi	r26, 0x42	; 66
    1bcc:	b1 e0       	ldi	r27, 0x01	; 1
    1bce:	e1 e4       	ldi	r30, 0x41	; 65
    1bd0:	f1 e0       	ldi	r31, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
    1bd4:	90 81       	ld	r25, Z
    1bd6:	9f 71       	andi	r25, 0x1F	; 31
    1bd8:	89 13       	cpse	r24, r25
    1bda:	fb cf       	rjmp	.-10     	; 0x1bd2 <phyTrxSetState+0x1c>
    1bdc:	08 95       	ret

00001bde <phySetRxState>:
    1bde:	88 e0       	ldi	r24, 0x08	; 8
    1be0:	ea df       	rcall	.-44     	; 0x1bb6 <phyTrxSetState>
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1be8:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <phyRxState>
    1bec:	88 23       	and	r24, r24
    1bee:	11 f0       	breq	.+4      	; 0x1bf4 <phySetRxState+0x16>
    1bf0:	86 e1       	ldi	r24, 0x16	; 22
    1bf2:	e1 cf       	rjmp	.-62     	; 0x1bb6 <phyTrxSetState>
    1bf4:	08 95       	ret

00001bf6 <PHY_Init>:
    1bf6:	60 e4       	ldi	r22, 0x40	; 64
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    1bfe:	e9 e3       	ldi	r30, 0x39	; 57
    1c00:	f1 e0       	ldi	r31, 0x01	; 1
    1c02:	80 81       	ld	r24, Z
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	80 83       	st	Z, r24
    1c08:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <phyRxState>
    1c0c:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <phyBand>
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <phyState>
    1c16:	88 e0       	ldi	r24, 0x08	; 8
    1c18:	ce df       	rcall	.-100    	; 0x1bb6 <phyTrxSetState>
    1c1a:	8b ee       	ldi	r24, 0xEB	; 235
    1c1c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    1c20:	ec e4       	ldi	r30, 0x4C	; 76
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	80 81       	ld	r24, Z
    1c26:	80 68       	ori	r24, 0x80	; 128
    1c28:	80 83       	st	Z, r24
    1c2a:	08 95       	ret

00001c2c <PHY_SetRxState>:
    1c2c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <phyRxState>
    1c30:	d6 cf       	rjmp	.-84     	; 0x1bde <phySetRxState>
    1c32:	08 95       	ret

00001c34 <PHY_SetChannel>:
    1c34:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <phyChannel>
    1c38:	a0 cf       	rjmp	.-192    	; 0x1b7a <phySetChannel>
    1c3a:	08 95       	ret

00001c3c <PHY_SetPanId>:
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	1f 92       	push	r1
    1c42:	1f 92       	push	r1
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	08 95       	ret

00001c60 <PHY_SetShortAddr>:
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	1f 92       	push	r1
    1c66:	1f 92       	push	r1
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    1c7a:	99 81       	ldd	r25, Y+1	; 0x01
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	89 0f       	add	r24, r25
    1c80:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <PHY_DataReq>:
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ec 01       	movw	r28, r24
    1c94:	89 e1       	ldi	r24, 0x19	; 25
    1c96:	8f df       	rcall	.-226    	; 0x1bb6 <phyTrxSetState>
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1c9e:	88 81       	ld	r24, Y
    1ca0:	8e 5f       	subi	r24, 0xFE	; 254
    1ca2:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
    1ca6:	88 81       	ld	r24, Y
    1ca8:	88 23       	and	r24, r24
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <PHY_DataReq+0x3e>
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	82 2f       	mov	r24, r18
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	ef 57       	subi	r30, 0x7F	; 127
    1cb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb8:	de 01       	movw	r26, r28
    1cba:	a8 0f       	add	r26, r24
    1cbc:	b9 1f       	adc	r27, r25
    1cbe:	11 96       	adiw	r26, 0x01	; 1
    1cc0:	8c 91       	ld	r24, X
    1cc2:	80 83       	st	Z, r24
    1cc4:	2f 5f       	subi	r18, 0xFF	; 255
    1cc6:	88 81       	ld	r24, Y
    1cc8:	28 17       	cp	r18, r24
    1cca:	88 f3       	brcs	.-30     	; 0x1cae <PHY_DataReq+0x20>
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <phyState>
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	08 95       	ret

00001cde <PHY_EncryptReq>:
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	ec 01       	movw	r28, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	51 d6       	rcall	.+3234   	; 0x298e <sal_aes_setup>
    1cec:	ce 01       	movw	r24, r28
    1cee:	39 d6       	rcall	.+3186   	; 0x2962 <sal_aes_exec>
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	db d6       	rcall	.+3510   	; 0x2aaa <sal_aes_read>
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <PHY_TaskHandler+0x8>
    1d02:	1f 92       	push	r1
    1d04:	1f 92       	push	r1
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    1d0a:	80 91 2a 08 	lds	r24, 0x082A	; 0x80082a <phyState>
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <PHY_TaskHandler+0x1a>
    1d12:	65 c0       	rjmp	.+202    	; 0x1dde <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    1d14:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1d18:	83 ff       	sbrs	r24, 3
    1d1a:	3e c0       	rjmp	.+124    	; 0x1d98 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1d1c:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1d20:	6a 2f       	mov	r22, r26
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	ab 01       	movw	r20, r22
    1d26:	4f 5f       	subi	r20, 0xFF	; 255
    1d28:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1d30:	fc 01       	movw	r30, r24
    1d32:	e0 58       	subi	r30, 0x80	; 128
    1d34:	fe 4f       	sbci	r31, 0xFE	; 254
    1d36:	30 81       	ld	r19, Z
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e6 55       	subi	r30, 0x56	; 86
    1d3c:	f8 4f       	sbci	r31, 0xF8	; 248
    1d3e:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1d40:	2f 5f       	subi	r18, 0xFF	; 255
    1d42:	82 2f       	mov	r24, r18
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	84 17       	cp	r24, r20
    1d48:	95 07       	cpc	r25, r21
    1d4a:	94 f3       	brlt	.-28     	; 0x1d30 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    1d4c:	8a ea       	ldi	r24, 0xAA	; 170
    1d4e:	97 e0       	ldi	r25, 0x07	; 7
    1d50:	9a 83       	std	Y+2, r25	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    1d54:	a2 50       	subi	r26, 0x02	; 2
    1d56:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    1d58:	fb 01       	movw	r30, r22
    1d5a:	e6 55       	subi	r30, 0x56	; 86
    1d5c:	f8 4f       	sbci	r31, 0xF8	; 248
    1d5e:	80 81       	ld	r24, Z
    1d60:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1d62:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    1d66:	8a 55       	subi	r24, 0x5A	; 90
    1d68:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	32 d9       	rcall	.-3484   	; 0xfd4 <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    1d70:	e1 e4       	ldi	r30, 0x41	; 65
    1d72:	f1 e0       	ldi	r31, 0x01	; 1
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 71       	andi	r24, 0x1F	; 31
    1d78:	86 31       	cpi	r24, 0x16	; 22
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    1d7c:	ef e4       	ldi	r30, 0x4F	; 79
    1d7e:	f1 e0       	ldi	r31, 0x01	; 1
    1d80:	80 81       	ld	r24, Z
    1d82:	88 60       	ori	r24, 0x08	; 8
    1d84:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1d86:	ec e4       	ldi	r30, 0x4C	; 76
    1d88:	f1 e0       	ldi	r31, 0x01	; 1
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8f 77       	andi	r24, 0x7F	; 127
    1d8e:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1d90:	80 81       	ld	r24, Z
    1d92:	80 68       	ori	r24, 0x80	; 128
    1d94:	80 83       	st	Z, r24
    1d96:	23 c0       	rjmp	.+70     	; 0x1dde <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    1d98:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1d9c:	86 ff       	sbrs	r24, 6
    1d9e:	1f c0       	rjmp	.+62     	; 0x1dde <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    1da0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1da4:	8f 71       	andi	r24, 0x1F	; 31
    1da6:	89 31       	cpi	r24, 0x19	; 25
    1da8:	a9 f4       	brne	.+42     	; 0x1dd4 <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1daa:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1dae:	12 95       	swap	r17
    1db0:	16 95       	lsr	r17
    1db2:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    1db4:	49 f0       	breq	.+18     	; 0x1dc8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1db6:	13 30       	cpi	r17, 0x03	; 3
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1dba:	15 30       	cpi	r17, 0x05	; 5
    1dbc:	21 f0       	breq	.+8      	; 0x1dc6 <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1dbe:	13 e0       	ldi	r17, 0x03	; 3
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1dc2:	11 e0       	ldi	r17, 0x01	; 1
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1dc6:	12 e0       	ldi	r17, 0x02	; 2
    1dc8:	0a df       	rcall	.-492    	; 0x1bde <phySetRxState>
			phyState = PHY_STATE_IDLE;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <phyState>

			PHY_DataConf(status);
    1dd0:	81 2f       	mov	r24, r17
    1dd2:	10 de       	rcall	.-992    	; 0x19f4 <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    1dd4:	ef e4       	ldi	r30, 0x4F	; 79
    1dd6:	f1 e0       	ldi	r31, 0x01	; 1
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 64       	ori	r24, 0x40	; 64
    1ddc:	80 83       	st	Z, r24
	}
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	08 95       	ret

00001df0 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
    1df0:	7b d0       	rcall	.+246    	; 0x1ee8 <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
    1df2:	b6 d5       	rcall	.+2924   	; 0x2960 <sal_init>
#endif
	PHY_Init();
    1df4:	00 df       	rcall	.-512    	; 0x1bf6 <PHY_Init>
    1df6:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <NWK_Init>
	NWK_Init();
    1dfa:	08 95       	ret

00001dfc <SYS_TaskHandler>:
    1dfc:	7e df       	rcall	.-260    	; 0x1cfa <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
    1dfe:	0e 94 84 04 	call	0x908	; 0x908 <NWK_TaskHandler>
	SYS_TimerTaskHandler();
    1e02:	e5 c0       	rjmp	.+458    	; 0x1fce <SYS_TimerTaskHandler>
    1e04:	08 95       	ret

00001e06 <SYS_EncryptReq>:
/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    1e06:	6b df       	rcall	.-298    	; 0x1cde <PHY_EncryptReq>
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    1e08:	81 cb       	rjmp	.-2302   	; 0x150c <SYS_EncryptConf>
    1e0a:	08 95       	ret

00001e0c <placeTimer>:
    1e0c:	0f 93       	push	r16
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
    1e14:	ec 01       	movw	r28, r24
	if (timers) {
    1e16:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <timers>
    1e1a:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <timers+0x1>
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <placeTimer+0x18>
    1e22:	45 c0       	rjmp	.+138    	; 0x1eae <placeTimer+0xa2>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1e24:	4e 81       	ldd	r20, Y+6	; 0x06
    1e26:	5f 81       	ldd	r21, Y+7	; 0x07
    1e28:	68 85       	ldd	r22, Y+8	; 0x08
    1e2a:	79 85       	ldd	r23, Y+9	; 0x09

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	02 81       	ldd	r16, Z+2	; 0x02
    1e30:	13 81       	ldd	r17, Z+3	; 0x03
    1e32:	24 81       	ldd	r18, Z+4	; 0x04
    1e34:	35 81       	ldd	r19, Z+5	; 0x05
    1e36:	40 17       	cp	r20, r16
    1e38:	51 07       	cpc	r21, r17
    1e3a:	62 07       	cpc	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	60 f0       	brcs	.+24     	; 0x1e58 <placeTimer+0x4c>
    1e40:	dc 01       	movw	r26, r24
    1e42:	17 c0       	rjmp	.+46     	; 0x1e72 <placeTimer+0x66>
    1e44:	02 81       	ldd	r16, Z+2	; 0x02
    1e46:	13 81       	ldd	r17, Z+3	; 0x03
    1e48:	24 81       	ldd	r18, Z+4	; 0x04
    1e4a:	35 81       	ldd	r19, Z+5	; 0x05
    1e4c:	40 17       	cp	r20, r16
    1e4e:	51 07       	cpc	r21, r17
    1e50:	62 07       	cpc	r22, r18
    1e52:	73 07       	cpc	r23, r19
    1e54:	68 f4       	brcc	.+26     	; 0x1e70 <placeTimer+0x64>
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <placeTimer+0x52>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e58:	fc 01       	movw	r30, r24
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1e5e:	04 1b       	sub	r16, r20
    1e60:	15 0b       	sbc	r17, r21
    1e62:	26 0b       	sbc	r18, r22
    1e64:	37 0b       	sbc	r19, r23
    1e66:	02 83       	std	Z+2, r16	; 0x02
    1e68:	13 83       	std	Z+3, r17	; 0x03
    1e6a:	24 83       	std	Z+4, r18	; 0x04
    1e6c:	35 83       	std	Z+5, r19	; 0x05
				break;
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <placeTimer+0x78>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e70:	df 01       	movw	r26, r30
			if (timeout < t->timeout) {
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    1e72:	40 1b       	sub	r20, r16
    1e74:	51 0b       	sbc	r21, r17
    1e76:	62 0b       	sbc	r22, r18
    1e78:	73 0b       	sbc	r23, r19
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1e7a:	ed 91       	ld	r30, X+
    1e7c:	fc 91       	ld	r31, X
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	30 97       	sbiw	r30, 0x00	; 0
    1e82:	01 f7       	brne	.-64     	; 0x1e44 <placeTimer+0x38>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1e84:	4a 83       	std	Y+2, r20	; 0x02
    1e86:	5b 83       	std	Y+3, r21	; 0x03
    1e88:	6c 83       	std	Y+4, r22	; 0x04
    1e8a:	7d 83       	std	Y+5, r23	; 0x05

		if (prev) {
    1e8c:	10 97       	sbiw	r26, 0x00	; 0
    1e8e:	41 f0       	breq	.+16     	; 0x1ea0 <placeTimer+0x94>
			timer->next = prev->next;
    1e90:	8d 91       	ld	r24, X+
    1e92:	9c 91       	ld	r25, X
    1e94:	11 97       	sbiw	r26, 0x01	; 1
    1e96:	99 83       	std	Y+1, r25	; 0x01
    1e98:	88 83       	st	Y, r24
			prev->next = timer;
    1e9a:	cd 93       	st	X+, r28
    1e9c:	dc 93       	st	X, r29
    1e9e:	15 c0       	rjmp	.+42     	; 0x1eca <placeTimer+0xbe>
		} else {
			timer->next = timers;
    1ea0:	99 83       	std	Y+1, r25	; 0x01
    1ea2:	88 83       	st	Y, r24
			timers = timer;
    1ea4:	d0 93 2c 08 	sts	0x082C, r29	; 0x80082c <timers+0x1>
    1ea8:	c0 93 2b 08 	sts	0x082B, r28	; 0x80082b <timers>
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <placeTimer+0xbe>
		}
	} else {
		timer->next = NULL;
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	18 82       	st	Y, r1
		timer->timeout = timer->interval;
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	a8 85       	ldd	r26, Y+8	; 0x08
    1eb8:	b9 85       	ldd	r27, Y+9	; 0x09
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	9b 83       	std	Y+3, r25	; 0x03
    1ebe:	ac 83       	std	Y+4, r26	; 0x04
    1ec0:	bd 83       	std	Y+5, r27	; 0x05
		timers = timer;
    1ec2:	d0 93 2c 08 	sts	0x082C, r29	; 0x80082c <timers+0x1>
    1ec6:	c0 93 2b 08 	sts	0x082B, r28	; 0x80082b <timers>
	}
}
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret

00001ed4 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
	SysTimerIrqCount++;
    1ed4:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <SysTimerIrqCount>
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <SysTimerIrqCount>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1ede:	80 e1       	ldi	r24, 0x10	; 16
    1ee0:	97 e2       	ldi	r25, 0x27	; 39
    1ee2:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <common_tc_delay>
    1ee6:	08 95       	ret

00001ee8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
	SysTimerIrqCount = 0;
    1ee8:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <SysTimerIrqCount>
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1eec:	8a e6       	ldi	r24, 0x6A	; 106
    1eee:	9f e0       	ldi	r25, 0x0F	; 15
    1ef0:	0e 94 c2 01 	call	0x384	; 0x384 <set_common_tc_expiry_callback>
	common_tc_init();
    1ef4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <common_tc_init>
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1ef8:	80 e1       	ldi	r24, 0x10	; 16
    1efa:	97 e2       	ldi	r25, 0x27	; 39
    1efc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <common_tc_delay>
	timers = NULL;
    1f00:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <timers+0x1>
    1f04:	10 92 2b 08 	sts	0x082B, r1	; 0x80082b <timers>
    1f08:	08 95       	ret

00001f0a <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f0e:	a0 91 2b 08 	lds	r26, 0x082B	; 0x80082b <timers>
    1f12:	b0 91 2c 08 	lds	r27, 0x082C	; 0x80082c <timers+0x1>
    1f16:	10 97       	sbiw	r26, 0x00	; 0
    1f18:	91 f1       	breq	.+100    	; 0x1f7e <SYS_TimerStop+0x74>
		if (t == timer) {
    1f1a:	a8 17       	cp	r26, r24
    1f1c:	b9 07       	cpc	r27, r25
    1f1e:	51 f5       	brne	.+84     	; 0x1f74 <SYS_TimerStop+0x6a>
    1f20:	0a c0       	rjmp	.+20     	; 0x1f36 <SYS_TimerStop+0x2c>
    1f22:	8e 17       	cp	r24, r30
    1f24:	9f 07       	cpc	r25, r31
    1f26:	29 f5       	brne	.+74     	; 0x1f72 <SYS_TimerStop+0x68>
			if (prev) {
    1f28:	10 97       	sbiw	r26, 0x00	; 0
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <SYS_TimerStop+0x2e>
				prev->next = t->next;
    1f2c:	20 81       	ld	r18, Z
    1f2e:	31 81       	ldd	r19, Z+1	; 0x01
    1f30:	2d 93       	st	X+, r18
    1f32:	3c 93       	st	X, r19
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f36:	fc 01       	movw	r30, r24
		if (t == timer) {
			if (prev) {
				prev->next = t->next;
			} else {
				timers = t->next;
    1f38:	20 81       	ld	r18, Z
    1f3a:	31 81       	ldd	r19, Z+1	; 0x01
    1f3c:	30 93 2c 08 	sts	0x082C, r19	; 0x80082c <timers+0x1>
    1f40:	20 93 2b 08 	sts	0x082B, r18	; 0x80082b <timers>
			}

			if (t->next) {
    1f44:	01 90       	ld	r0, Z+
    1f46:	f0 81       	ld	r31, Z
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	30 97       	sbiw	r30, 0x00	; 0
    1f4c:	c1 f0       	breq	.+48     	; 0x1f7e <SYS_TimerStop+0x74>
				t->next->timeout += timer->timeout;
    1f4e:	42 81       	ldd	r20, Z+2	; 0x02
    1f50:	53 81       	ldd	r21, Z+3	; 0x03
    1f52:	64 81       	ldd	r22, Z+4	; 0x04
    1f54:	75 81       	ldd	r23, Z+5	; 0x05
    1f56:	ec 01       	movw	r28, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f5e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f60:	84 0f       	add	r24, r20
    1f62:	95 1f       	adc	r25, r21
    1f64:	a6 1f       	adc	r26, r22
    1f66:	b7 1f       	adc	r27, r23
    1f68:	82 83       	std	Z+2, r24	; 0x02
    1f6a:	93 83       	std	Z+3, r25	; 0x03
    1f6c:	a4 83       	std	Z+4, r26	; 0x04
    1f6e:	b5 83       	std	Z+5, r27	; 0x05
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
	SYS_Timer_t *prev = NULL;

	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f72:	df 01       	movw	r26, r30
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	11 97       	sbiw	r26, 0x01	; 1
    1f7a:	30 97       	sbiw	r30, 0x00	; 0
    1f7c:	91 f6       	brne	.-92     	; 0x1f22 <SYS_TimerStop+0x18>
			break;
		}

		prev = t;
	}
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f84:	e0 91 2b 08 	lds	r30, 0x082B	; 0x80082b <timers>
    1f88:	f0 91 2c 08 	lds	r31, 0x082C	; 0x80082c <timers+0x1>
    1f8c:	30 97       	sbiw	r30, 0x00	; 0
    1f8e:	71 f0       	breq	.+28     	; 0x1fac <SYS_TimerStarted+0x28>
		if (t == timer) {
    1f90:	e8 17       	cp	r30, r24
    1f92:	f9 07       	cpc	r31, r25
    1f94:	21 f4       	brne	.+8      	; 0x1f9e <SYS_TimerStarted+0x1a>
    1f96:	0c c0       	rjmp	.+24     	; 0x1fb0 <SYS_TimerStarted+0x2c>
    1f98:	8e 17       	cp	r24, r30
    1f9a:	9f 07       	cpc	r25, r31
    1f9c:	59 f0       	breq	.+22     	; 0x1fb4 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1f9e:	01 90       	ld	r0, Z+
    1fa0:	f0 81       	ld	r31, Z
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	30 97       	sbiw	r30, 0x00	; 0
    1fa6:	c1 f7       	brne	.-16     	; 0x1f98 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	08 95       	ret
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	08 95       	ret
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1fb6:	08 95       	ret

00001fb8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
    1fbe:	e2 df       	rcall	.-60     	; 0x1f84 <SYS_TimerStarted>
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <SYS_TimerStart+0x10>
		placeTimer(timer);
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	22 df       	rcall	.-444    	; 0x1e0c <placeTimer>
	}
}
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	08 95       	ret

00001fce <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	1f 92       	push	r1
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1fe4:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <SysTimerIrqCount>
    1fe8:	88 23       	and	r24, r24
    1fea:	09 f4       	brne	.+2      	; 0x1fee <SYS_TimerTaskHandler+0x20>
    1fec:	53 c0       	rjmp	.+166    	; 0x2094 <__EEPROM_REGION_LENGTH__+0x94>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fee:	8f b7       	in	r24, 0x3f	; 63
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1ff2:	f8 94       	cli
	return flags;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1ff6:	c0 90 b5 09 	lds	r12, 0x09B5	; 0x8009b5 <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1ffa:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ffe:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    2000:	d1 2c       	mov	r13, r1
    2002:	e1 2c       	mov	r14, r1
    2004:	f1 2c       	mov	r15, r1
    2006:	cc 0c       	add	r12, r12
    2008:	dd 1c       	adc	r13, r13
    200a:	ee 1c       	adc	r14, r14
    200c:	ff 1c       	adc	r15, r15
    200e:	d7 01       	movw	r26, r14
    2010:	c6 01       	movw	r24, r12
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	aa 1f       	adc	r26, r26
    2018:	bb 1f       	adc	r27, r27
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	aa 1f       	adc	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	c8 0e       	add	r12, r24
    2024:	d9 1e       	adc	r13, r25
    2026:	ea 1e       	adc	r14, r26
    2028:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    202a:	1b c0       	rjmp	.+54     	; 0x2062 <__EEPROM_REGION_LENGTH__+0x62>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    202c:	c8 1a       	sub	r12, r24
    202e:	d9 0a       	sbc	r13, r25
    2030:	ea 0a       	sbc	r14, r26
    2032:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    2034:	d8 01       	movw	r26, r16
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	90 93 2c 08 	sts	0x082C, r25	; 0x80082c <timers+0x1>
    2040:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2044:	1a 96       	adiw	r26, 0x0a	; 10
    2046:	8c 91       	ld	r24, X
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	11 f4       	brne	.+4      	; 0x2050 <__EEPROM_REGION_LENGTH__+0x50>
			placeTimer(timer);
    204c:	c8 01       	movw	r24, r16
    204e:	de de       	rcall	.-580    	; 0x1e0c <placeTimer>
		}

		if (timer->handler) {
    2050:	d8 01       	movw	r26, r16
    2052:	1b 96       	adiw	r26, 0x0b	; 11
    2054:	ed 91       	ld	r30, X+
    2056:	fc 91       	ld	r31, X
    2058:	1c 97       	sbiw	r26, 0x0c	; 12
    205a:	30 97       	sbiw	r30, 0x00	; 0
    205c:	11 f0       	breq	.+4      	; 0x2062 <__EEPROM_REGION_LENGTH__+0x62>
			timer->handler(timer);
    205e:	c8 01       	movw	r24, r16
    2060:	19 95       	eicall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2062:	00 91 2b 08 	lds	r16, 0x082B	; 0x80082b <timers>
    2066:	10 91 2c 08 	lds	r17, 0x082C	; 0x80082c <timers+0x1>
    206a:	01 15       	cp	r16, r1
    206c:	11 05       	cpc	r17, r1
    206e:	91 f0       	breq	.+36     	; 0x2094 <__EEPROM_REGION_LENGTH__+0x94>
    2070:	f8 01       	movw	r30, r16
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	a4 81       	ldd	r26, Z+4	; 0x04
    2078:	b5 81       	ldd	r27, Z+5	; 0x05
    207a:	c8 16       	cp	r12, r24
    207c:	d9 06       	cpc	r13, r25
    207e:	ea 06       	cpc	r14, r26
    2080:	fb 06       	cpc	r15, r27
    2082:	a0 f6       	brcc	.-88     	; 0x202c <__EEPROM_REGION_LENGTH__+0x2c>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    2084:	8c 19       	sub	r24, r12
    2086:	9d 09       	sbc	r25, r13
    2088:	ae 09       	sbc	r26, r14
    208a:	bf 09       	sbc	r27, r15
    208c:	82 83       	std	Z+2, r24	; 0x02
    208e:	93 83       	std	Z+3, r25	; 0x03
    2090:	a4 83       	std	Z+4, r26	; 0x04
    2092:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    2094:	0f 90       	pop	r0
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    20a8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <tmr_ovf_callback>
    20ac:	08 95       	ret

000020ae <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    20ae:	0c 94 b3 01 	jmp	0x366	; 0x366 <tmr_cca_callback>
    20b2:	08 95       	ret

000020b4 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    20b4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    20b8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    20bc:	08 95       	ret

000020be <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    20be:	ef e6       	ldi	r30, 0x6F	; 111
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	8d 7f       	andi	r24, 0xFD	; 253
    20c6:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    20c8:	b1 9a       	sbi	0x16, 1	; 22
    20ca:	08 95       	ret

000020cc <tmr_enable_cc_interrupt>:
    20cc:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    20ce:	ef e6       	ldi	r30, 0x6F	; 111
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	82 60       	ori	r24, 0x02	; 2
    20d6:	80 83       	st	Z, r24
    20d8:	08 95       	ret

000020da <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    20da:	ef e6       	ldi	r30, 0x6F	; 111
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    20e4:	b0 9a       	sbi	0x16, 0	; 22
    20e6:	08 95       	ret

000020e8 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    20e8:	80 e8       	ldi	r24, 0x80	; 128
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	82 c3       	rjmp	.+1796   	; 0x27f2 <tc_disable>
    20ee:	08 95       	ret

000020f0 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    20f0:	e9 e8       	ldi	r30, 0x89	; 137
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	20 81       	ld	r18, Z
    20f6:	92 2b       	or	r25, r18
    20f8:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    20fa:	e8 e8       	ldi	r30, 0x88	; 136
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	90 81       	ld	r25, Z
    2100:	89 2b       	or	r24, r25
    2102:	80 83       	st	Z, r24
    2104:	08 95       	ret

00002106 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	1f 92       	push	r1
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2110:	8f b7       	in	r24, 0x3f	; 63
    2112:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2114:	f8 94       	cli
	return flags;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2118:	0f 90       	pop	r0
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2120:	8f bf       	out	0x3f, r24	; 63
    2122:	08 95       	ret

00002124 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2128:	80 e8       	ldi	r24, 0x80	; 128
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	eb d2       	rcall	.+1494   	; 0x2704 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    212e:	64 e5       	ldi	r22, 0x54	; 84
    2130:	70 e1       	ldi	r23, 0x10	; 16
    2132:	80 e8       	ldi	r24, 0x80	; 128
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	d4 d3       	rcall	.+1960   	; 0x28e0 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2138:	cf e6       	ldi	r28, 0x6F	; 111
    213a:	d0 e0       	ldi	r29, 0x00	; 0
    213c:	88 81       	ld	r24, Y
    213e:	81 60       	ori	r24, 0x01	; 1
    2140:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2142:	67 e5       	ldi	r22, 0x57	; 87
    2144:	70 e1       	ldi	r23, 0x10	; 16
    2146:	80 e8       	ldi	r24, 0x80	; 128
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	ea d3       	rcall	.+2004   	; 0x2920 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    214c:	88 81       	ld	r24, Y
    214e:	8d 7f       	andi	r24, 0xFD	; 253
    2150:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2152:	e1 e8       	ldi	r30, 0x81	; 129
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    215c:	88 e0       	ldi	r24, 0x08	; 8
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2164:	1f 92       	push	r1
    2166:	0f 92       	push	r0
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	0f 92       	push	r0
    216c:	11 24       	eor	r1, r1
    216e:	0b b6       	in	r0, 0x3b	; 59
    2170:	0f 92       	push	r0
    2172:	2f 93       	push	r18
    2174:	3f 93       	push	r19
    2176:	4f 93       	push	r20
    2178:	5f 93       	push	r21
    217a:	6f 93       	push	r22
    217c:	7f 93       	push	r23
    217e:	8f 93       	push	r24
    2180:	9f 93       	push	r25
    2182:	af 93       	push	r26
    2184:	bf 93       	push	r27
    2186:	ef 93       	push	r30
    2188:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    218a:	e0 91 4b 08 	lds	r30, 0x084B	; 0x80084b <tc_tccr1_ovf_callback>
    218e:	f0 91 4c 08 	lds	r31, 0x084C	; 0x80084c <tc_tccr1_ovf_callback+0x1>
    2192:	30 97       	sbiw	r30, 0x00	; 0
    2194:	09 f0       	breq	.+2      	; 0x2198 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2196:	19 95       	eicall
	}
}
    2198:	ff 91       	pop	r31
    219a:	ef 91       	pop	r30
    219c:	bf 91       	pop	r27
    219e:	af 91       	pop	r26
    21a0:	9f 91       	pop	r25
    21a2:	8f 91       	pop	r24
    21a4:	7f 91       	pop	r23
    21a6:	6f 91       	pop	r22
    21a8:	5f 91       	pop	r21
    21aa:	4f 91       	pop	r20
    21ac:	3f 91       	pop	r19
    21ae:	2f 91       	pop	r18
    21b0:	0f 90       	pop	r0
    21b2:	0b be       	out	0x3b, r0	; 59
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	0b b6       	in	r0, 0x3b	; 59
    21ca:	0f 92       	push	r0
    21cc:	2f 93       	push	r18
    21ce:	3f 93       	push	r19
    21d0:	4f 93       	push	r20
    21d2:	5f 93       	push	r21
    21d4:	6f 93       	push	r22
    21d6:	7f 93       	push	r23
    21d8:	8f 93       	push	r24
    21da:	9f 93       	push	r25
    21dc:	af 93       	push	r26
    21de:	bf 93       	push	r27
    21e0:	ef 93       	push	r30
    21e2:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    21e4:	e0 91 49 08 	lds	r30, 0x0849	; 0x800849 <tc_tccr1_compa_callback>
    21e8:	f0 91 4a 08 	lds	r31, 0x084A	; 0x80084a <tc_tccr1_compa_callback+0x1>
    21ec:	30 97       	sbiw	r30, 0x00	; 0
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <__vector_17+0x34>
		tc_tccr1_compa_callback();
    21f0:	19 95       	eicall
	}
}
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	0b be       	out	0x3b, r0	; 59
    220e:	0f 90       	pop	r0
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	0f 90       	pop	r0
    2214:	1f 90       	pop	r1
    2216:	18 95       	reti

00002218 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2218:	1f 92       	push	r1
    221a:	0f 92       	push	r0
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	0f 92       	push	r0
    2220:	11 24       	eor	r1, r1
    2222:	0b b6       	in	r0, 0x3b	; 59
    2224:	0f 92       	push	r0
    2226:	2f 93       	push	r18
    2228:	3f 93       	push	r19
    222a:	4f 93       	push	r20
    222c:	5f 93       	push	r21
    222e:	6f 93       	push	r22
    2230:	7f 93       	push	r23
    2232:	8f 93       	push	r24
    2234:	9f 93       	push	r25
    2236:	af 93       	push	r26
    2238:	bf 93       	push	r27
    223a:	ef 93       	push	r30
    223c:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    223e:	e0 91 47 08 	lds	r30, 0x0847	; 0x800847 <tc_tccr1_compb_callback>
    2242:	f0 91 48 08 	lds	r31, 0x0848	; 0x800848 <tc_tccr1_compb_callback+0x1>
    2246:	30 97       	sbiw	r30, 0x00	; 0
    2248:	09 f0       	breq	.+2      	; 0x224c <__vector_18+0x34>
		tc_tccr1_compb_callback();
    224a:	19 95       	eicall
	}
}
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	bf 91       	pop	r27
    2252:	af 91       	pop	r26
    2254:	9f 91       	pop	r25
    2256:	8f 91       	pop	r24
    2258:	7f 91       	pop	r23
    225a:	6f 91       	pop	r22
    225c:	5f 91       	pop	r21
    225e:	4f 91       	pop	r20
    2260:	3f 91       	pop	r19
    2262:	2f 91       	pop	r18
    2264:	0f 90       	pop	r0
    2266:	0b be       	out	0x3b, r0	; 59
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	0f 90       	pop	r0
    226e:	1f 90       	pop	r1
    2270:	18 95       	reti

00002272 <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2272:	1f 92       	push	r1
    2274:	0f 92       	push	r0
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	0b b6       	in	r0, 0x3b	; 59
    227e:	0f 92       	push	r0
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	ef 93       	push	r30
    2296:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2298:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <tc_tccr1_compc_callback>
    229c:	f0 91 46 08 	lds	r31, 0x0846	; 0x800846 <tc_tccr1_compc_callback+0x1>
    22a0:	30 97       	sbiw	r30, 0x00	; 0
    22a2:	09 f0       	breq	.+2      	; 0x22a6 <__vector_19+0x34>
		tc_tccr1_compc_callback();
    22a4:	19 95       	eicall
	}
}
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	7f 91       	pop	r23
    22b4:	6f 91       	pop	r22
    22b6:	5f 91       	pop	r21
    22b8:	4f 91       	pop	r20
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0b be       	out	0x3b, r0	; 59
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    22cc:	1f 92       	push	r1
    22ce:	0f 92       	push	r0
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	0f 92       	push	r0
    22d4:	11 24       	eor	r1, r1
    22d6:	0b b6       	in	r0, 0x3b	; 59
    22d8:	0f 92       	push	r0
    22da:	2f 93       	push	r18
    22dc:	3f 93       	push	r19
    22de:	4f 93       	push	r20
    22e0:	5f 93       	push	r21
    22e2:	6f 93       	push	r22
    22e4:	7f 93       	push	r23
    22e6:	8f 93       	push	r24
    22e8:	9f 93       	push	r25
    22ea:	af 93       	push	r26
    22ec:	bf 93       	push	r27
    22ee:	ef 93       	push	r30
    22f0:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    22f2:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <tc_tccr3_ovf_callback>
    22f6:	f0 91 44 08 	lds	r31, 0x0844	; 0x800844 <tc_tccr3_ovf_callback+0x1>
    22fa:	30 97       	sbiw	r30, 0x00	; 0
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    22fe:	19 95       	eicall
	}
}
    2300:	ff 91       	pop	r31
    2302:	ef 91       	pop	r30
    2304:	bf 91       	pop	r27
    2306:	af 91       	pop	r26
    2308:	9f 91       	pop	r25
    230a:	8f 91       	pop	r24
    230c:	7f 91       	pop	r23
    230e:	6f 91       	pop	r22
    2310:	5f 91       	pop	r21
    2312:	4f 91       	pop	r20
    2314:	3f 91       	pop	r19
    2316:	2f 91       	pop	r18
    2318:	0f 90       	pop	r0
    231a:	0b be       	out	0x3b, r0	; 59
    231c:	0f 90       	pop	r0
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	0f 90       	pop	r0
    2322:	1f 90       	pop	r1
    2324:	18 95       	reti

00002326 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2326:	1f 92       	push	r1
    2328:	0f 92       	push	r0
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	0f 92       	push	r0
    232e:	11 24       	eor	r1, r1
    2330:	0b b6       	in	r0, 0x3b	; 59
    2332:	0f 92       	push	r0
    2334:	2f 93       	push	r18
    2336:	3f 93       	push	r19
    2338:	4f 93       	push	r20
    233a:	5f 93       	push	r21
    233c:	6f 93       	push	r22
    233e:	7f 93       	push	r23
    2340:	8f 93       	push	r24
    2342:	9f 93       	push	r25
    2344:	af 93       	push	r26
    2346:	bf 93       	push	r27
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    234c:	e0 91 41 08 	lds	r30, 0x0841	; 0x800841 <tc_tccr3_compa_callback>
    2350:	f0 91 42 08 	lds	r31, 0x0842	; 0x800842 <tc_tccr3_compa_callback+0x1>
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	09 f0       	breq	.+2      	; 0x235a <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2358:	19 95       	eicall
	}
}
    235a:	ff 91       	pop	r31
    235c:	ef 91       	pop	r30
    235e:	bf 91       	pop	r27
    2360:	af 91       	pop	r26
    2362:	9f 91       	pop	r25
    2364:	8f 91       	pop	r24
    2366:	7f 91       	pop	r23
    2368:	6f 91       	pop	r22
    236a:	5f 91       	pop	r21
    236c:	4f 91       	pop	r20
    236e:	3f 91       	pop	r19
    2370:	2f 91       	pop	r18
    2372:	0f 90       	pop	r0
    2374:	0b be       	out	0x3b, r0	; 59
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	0b b6       	in	r0, 0x3b	; 59
    238c:	0f 92       	push	r0
    238e:	2f 93       	push	r18
    2390:	3f 93       	push	r19
    2392:	4f 93       	push	r20
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    23a6:	e0 91 3f 08 	lds	r30, 0x083F	; 0x80083f <tc_tccr3_compb_callback>
    23aa:	f0 91 40 08 	lds	r31, 0x0840	; 0x800840 <tc_tccr3_compb_callback+0x1>
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <__vector_33+0x34>
		tc_tccr3_compb_callback();
    23b2:	19 95       	eicall
	}
}
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	0f 90       	pop	r0
    23ce:	0b be       	out	0x3b, r0	; 59
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

000023da <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    23da:	1f 92       	push	r1
    23dc:	0f 92       	push	r0
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	0f 92       	push	r0
    23e2:	11 24       	eor	r1, r1
    23e4:	0b b6       	in	r0, 0x3b	; 59
    23e6:	0f 92       	push	r0
    23e8:	2f 93       	push	r18
    23ea:	3f 93       	push	r19
    23ec:	4f 93       	push	r20
    23ee:	5f 93       	push	r21
    23f0:	6f 93       	push	r22
    23f2:	7f 93       	push	r23
    23f4:	8f 93       	push	r24
    23f6:	9f 93       	push	r25
    23f8:	af 93       	push	r26
    23fa:	bf 93       	push	r27
    23fc:	ef 93       	push	r30
    23fe:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2400:	e0 91 3d 08 	lds	r30, 0x083D	; 0x80083d <tc_tccr3_compc_callback>
    2404:	f0 91 3e 08 	lds	r31, 0x083E	; 0x80083e <tc_tccr3_compc_callback+0x1>
    2408:	30 97       	sbiw	r30, 0x00	; 0
    240a:	09 f0       	breq	.+2      	; 0x240e <__vector_34+0x34>
		tc_tccr3_compc_callback();
    240c:	19 95       	eicall
	}
}
    240e:	ff 91       	pop	r31
    2410:	ef 91       	pop	r30
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	9f 91       	pop	r25
    2418:	8f 91       	pop	r24
    241a:	7f 91       	pop	r23
    241c:	6f 91       	pop	r22
    241e:	5f 91       	pop	r21
    2420:	4f 91       	pop	r20
    2422:	3f 91       	pop	r19
    2424:	2f 91       	pop	r18
    2426:	0f 90       	pop	r0
    2428:	0b be       	out	0x3b, r0	; 59
    242a:	0f 90       	pop	r0
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	0f 90       	pop	r0
    2430:	1f 90       	pop	r1
    2432:	18 95       	reti

00002434 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2434:	1f 92       	push	r1
    2436:	0f 92       	push	r0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	0b b6       	in	r0, 0x3b	; 59
    2440:	0f 92       	push	r0
    2442:	2f 93       	push	r18
    2444:	3f 93       	push	r19
    2446:	4f 93       	push	r20
    2448:	5f 93       	push	r21
    244a:	6f 93       	push	r22
    244c:	7f 93       	push	r23
    244e:	8f 93       	push	r24
    2450:	9f 93       	push	r25
    2452:	af 93       	push	r26
    2454:	bf 93       	push	r27
    2456:	ef 93       	push	r30
    2458:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    245a:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <tc_tccr4_ovf_callback>
    245e:	f0 91 3c 08 	lds	r31, 0x083C	; 0x80083c <tc_tccr4_ovf_callback+0x1>
    2462:	30 97       	sbiw	r30, 0x00	; 0
    2464:	09 f0       	breq	.+2      	; 0x2468 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2466:	19 95       	eicall
	}
}
    2468:	ff 91       	pop	r31
    246a:	ef 91       	pop	r30
    246c:	bf 91       	pop	r27
    246e:	af 91       	pop	r26
    2470:	9f 91       	pop	r25
    2472:	8f 91       	pop	r24
    2474:	7f 91       	pop	r23
    2476:	6f 91       	pop	r22
    2478:	5f 91       	pop	r21
    247a:	4f 91       	pop	r20
    247c:	3f 91       	pop	r19
    247e:	2f 91       	pop	r18
    2480:	0f 90       	pop	r0
    2482:	0b be       	out	0x3b, r0	; 59
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti

0000248e <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    248e:	1f 92       	push	r1
    2490:	0f 92       	push	r0
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	0f 92       	push	r0
    2496:	11 24       	eor	r1, r1
    2498:	0b b6       	in	r0, 0x3b	; 59
    249a:	0f 92       	push	r0
    249c:	2f 93       	push	r18
    249e:	3f 93       	push	r19
    24a0:	4f 93       	push	r20
    24a2:	5f 93       	push	r21
    24a4:	6f 93       	push	r22
    24a6:	7f 93       	push	r23
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    24b4:	e0 91 39 08 	lds	r30, 0x0839	; 0x800839 <tc_tccr4_compa_callback>
    24b8:	f0 91 3a 08 	lds	r31, 0x083A	; 0x80083a <tc_tccr4_compa_callback+0x1>
    24bc:	30 97       	sbiw	r30, 0x00	; 0
    24be:	09 f0       	breq	.+2      	; 0x24c2 <__vector_42+0x34>
		tc_tccr4_compa_callback();
    24c0:	19 95       	eicall
	}
}
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0b be       	out	0x3b, r0	; 59
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	0b b6       	in	r0, 0x3b	; 59
    24f4:	0f 92       	push	r0
    24f6:	2f 93       	push	r18
    24f8:	3f 93       	push	r19
    24fa:	4f 93       	push	r20
    24fc:	5f 93       	push	r21
    24fe:	6f 93       	push	r22
    2500:	7f 93       	push	r23
    2502:	8f 93       	push	r24
    2504:	9f 93       	push	r25
    2506:	af 93       	push	r26
    2508:	bf 93       	push	r27
    250a:	ef 93       	push	r30
    250c:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    250e:	e0 91 37 08 	lds	r30, 0x0837	; 0x800837 <tc_tccr4_compb_callback>
    2512:	f0 91 38 08 	lds	r31, 0x0838	; 0x800838 <tc_tccr4_compb_callback+0x1>
    2516:	30 97       	sbiw	r30, 0x00	; 0
    2518:	09 f0       	breq	.+2      	; 0x251c <__vector_43+0x34>
		tc_tccr4_compb_callback();
    251a:	19 95       	eicall
	}
}
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0b be       	out	0x3b, r0	; 59
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0
    253e:	1f 90       	pop	r1
    2540:	18 95       	reti

00002542 <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2542:	1f 92       	push	r1
    2544:	0f 92       	push	r0
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	0f 92       	push	r0
    254a:	11 24       	eor	r1, r1
    254c:	0b b6       	in	r0, 0x3b	; 59
    254e:	0f 92       	push	r0
    2550:	2f 93       	push	r18
    2552:	3f 93       	push	r19
    2554:	4f 93       	push	r20
    2556:	5f 93       	push	r21
    2558:	6f 93       	push	r22
    255a:	7f 93       	push	r23
    255c:	8f 93       	push	r24
    255e:	9f 93       	push	r25
    2560:	af 93       	push	r26
    2562:	bf 93       	push	r27
    2564:	ef 93       	push	r30
    2566:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2568:	e0 91 35 08 	lds	r30, 0x0835	; 0x800835 <tc_tccr4_compc_callback>
    256c:	f0 91 36 08 	lds	r31, 0x0836	; 0x800836 <tc_tccr4_compc_callback+0x1>
    2570:	30 97       	sbiw	r30, 0x00	; 0
    2572:	09 f0       	breq	.+2      	; 0x2576 <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2574:	19 95       	eicall
	}
}
    2576:	ff 91       	pop	r31
    2578:	ef 91       	pop	r30
    257a:	bf 91       	pop	r27
    257c:	af 91       	pop	r26
    257e:	9f 91       	pop	r25
    2580:	8f 91       	pop	r24
    2582:	7f 91       	pop	r23
    2584:	6f 91       	pop	r22
    2586:	5f 91       	pop	r21
    2588:	4f 91       	pop	r20
    258a:	3f 91       	pop	r19
    258c:	2f 91       	pop	r18
    258e:	0f 90       	pop	r0
    2590:	0b be       	out	0x3b, r0	; 59
    2592:	0f 90       	pop	r0
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	0b b6       	in	r0, 0x3b	; 59
    25a8:	0f 92       	push	r0
    25aa:	2f 93       	push	r18
    25ac:	3f 93       	push	r19
    25ae:	4f 93       	push	r20
    25b0:	5f 93       	push	r21
    25b2:	6f 93       	push	r22
    25b4:	7f 93       	push	r23
    25b6:	8f 93       	push	r24
    25b8:	9f 93       	push	r25
    25ba:	af 93       	push	r26
    25bc:	bf 93       	push	r27
    25be:	ef 93       	push	r30
    25c0:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    25c2:	e0 91 33 08 	lds	r30, 0x0833	; 0x800833 <tc_tccr5_ovf_callback>
    25c6:	f0 91 34 08 	lds	r31, 0x0834	; 0x800834 <tc_tccr5_ovf_callback+0x1>
    25ca:	30 97       	sbiw	r30, 0x00	; 0
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    25ce:	19 95       	eicall
	}
}
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0b be       	out	0x3b, r0	; 59
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    25f6:	1f 92       	push	r1
    25f8:	0f 92       	push	r0
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	0f 92       	push	r0
    25fe:	11 24       	eor	r1, r1
    2600:	0b b6       	in	r0, 0x3b	; 59
    2602:	0f 92       	push	r0
    2604:	2f 93       	push	r18
    2606:	3f 93       	push	r19
    2608:	4f 93       	push	r20
    260a:	5f 93       	push	r21
    260c:	6f 93       	push	r22
    260e:	7f 93       	push	r23
    2610:	8f 93       	push	r24
    2612:	9f 93       	push	r25
    2614:	af 93       	push	r26
    2616:	bf 93       	push	r27
    2618:	ef 93       	push	r30
    261a:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    261c:	e0 91 31 08 	lds	r30, 0x0831	; 0x800831 <tc_tccr5_compa_callback>
    2620:	f0 91 32 08 	lds	r31, 0x0832	; 0x800832 <tc_tccr5_compa_callback+0x1>
    2624:	30 97       	sbiw	r30, 0x00	; 0
    2626:	09 f0       	breq	.+2      	; 0x262a <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2628:	19 95       	eicall
	}
}
    262a:	ff 91       	pop	r31
    262c:	ef 91       	pop	r30
    262e:	bf 91       	pop	r27
    2630:	af 91       	pop	r26
    2632:	9f 91       	pop	r25
    2634:	8f 91       	pop	r24
    2636:	7f 91       	pop	r23
    2638:	6f 91       	pop	r22
    263a:	5f 91       	pop	r21
    263c:	4f 91       	pop	r20
    263e:	3f 91       	pop	r19
    2640:	2f 91       	pop	r18
    2642:	0f 90       	pop	r0
    2644:	0b be       	out	0x3b, r0	; 59
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2650:	1f 92       	push	r1
    2652:	0f 92       	push	r0
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	0f 92       	push	r0
    2658:	11 24       	eor	r1, r1
    265a:	0b b6       	in	r0, 0x3b	; 59
    265c:	0f 92       	push	r0
    265e:	2f 93       	push	r18
    2660:	3f 93       	push	r19
    2662:	4f 93       	push	r20
    2664:	5f 93       	push	r21
    2666:	6f 93       	push	r22
    2668:	7f 93       	push	r23
    266a:	8f 93       	push	r24
    266c:	9f 93       	push	r25
    266e:	af 93       	push	r26
    2670:	bf 93       	push	r27
    2672:	ef 93       	push	r30
    2674:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2676:	e0 91 2f 08 	lds	r30, 0x082F	; 0x80082f <tc_tccr5_compb_callback>
    267a:	f0 91 30 08 	lds	r31, 0x0830	; 0x800830 <tc_tccr5_compb_callback+0x1>
    267e:	30 97       	sbiw	r30, 0x00	; 0
    2680:	09 f0       	breq	.+2      	; 0x2684 <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2682:	19 95       	eicall
	}
}
    2684:	ff 91       	pop	r31
    2686:	ef 91       	pop	r30
    2688:	bf 91       	pop	r27
    268a:	af 91       	pop	r26
    268c:	9f 91       	pop	r25
    268e:	8f 91       	pop	r24
    2690:	7f 91       	pop	r23
    2692:	6f 91       	pop	r22
    2694:	5f 91       	pop	r21
    2696:	4f 91       	pop	r20
    2698:	3f 91       	pop	r19
    269a:	2f 91       	pop	r18
    269c:	0f 90       	pop	r0
    269e:	0b be       	out	0x3b, r0	; 59
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	0b b6       	in	r0, 0x3b	; 59
    26b6:	0f 92       	push	r0
    26b8:	2f 93       	push	r18
    26ba:	3f 93       	push	r19
    26bc:	4f 93       	push	r20
    26be:	5f 93       	push	r21
    26c0:	6f 93       	push	r22
    26c2:	7f 93       	push	r23
    26c4:	8f 93       	push	r24
    26c6:	9f 93       	push	r25
    26c8:	af 93       	push	r26
    26ca:	bf 93       	push	r27
    26cc:	ef 93       	push	r30
    26ce:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    26d0:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <tc_tccr5_compc_callback>
    26d4:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <tc_tccr5_compc_callback+0x1>
    26d8:	30 97       	sbiw	r30, 0x00	; 0
    26da:	09 f0       	breq	.+2      	; 0x26de <__vector_49+0x34>
		tc_tccr5_compc_callback();
    26dc:	19 95       	eicall
	}
}
    26de:	ff 91       	pop	r31
    26e0:	ef 91       	pop	r30
    26e2:	bf 91       	pop	r27
    26e4:	af 91       	pop	r26
    26e6:	9f 91       	pop	r25
    26e8:	8f 91       	pop	r24
    26ea:	7f 91       	pop	r23
    26ec:	6f 91       	pop	r22
    26ee:	5f 91       	pop	r21
    26f0:	4f 91       	pop	r20
    26f2:	3f 91       	pop	r19
    26f4:	2f 91       	pop	r18
    26f6:	0f 90       	pop	r0
    26f8:	0b be       	out	0x3b, r0	; 59
    26fa:	0f 90       	pop	r0
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	0f 90       	pop	r0
    2700:	1f 90       	pop	r1
    2702:	18 95       	reti

00002704 <tc_enable>:

void tc_enable(volatile void *tc)
{
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	1f 92       	push	r1
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2710:	2f b7       	in	r18, 0x3f	; 63
    2712:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2714:	f8 94       	cli
	return flags;
    2716:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	09 f4       	brne	.+2      	; 0x271e <tc_enable+0x1a>
    271c:	64 c0       	rjmp	.+200    	; 0x27e6 <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    271e:	88 37       	cpi	r24, 0x78	; 120
    2720:	91 05       	cpc	r25, r1
    2722:	49 f4       	brne	.+18     	; 0x2736 <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    272c:	60 e1       	ldi	r22, 0x10	; 16
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2734:	58 c0       	rjmp	.+176    	; 0x27e6 <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2736:	80 3c       	cpi	r24, 0xC0	; 192
    2738:	91 05       	cpc	r25, r1
    273a:	29 f4       	brne	.+10     	; 0x2746 <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    273c:	62 e0       	ldi	r22, 0x02	; 2
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2744:	50 c0       	rjmp	.+160    	; 0x27e6 <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2746:	8c 34       	cpi	r24, 0x4C	; 76
    2748:	91 05       	cpc	r25, r1
    274a:	29 f4       	brne	.+10     	; 0x2756 <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    274c:	64 e0       	ldi	r22, 0x04	; 4
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2754:	48 c0       	rjmp	.+144    	; 0x27e6 <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    2756:	80 38       	cpi	r24, 0x80	; 128
    2758:	91 05       	cpc	r25, r1
    275a:	29 f4       	brne	.+10     	; 0x2766 <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    275c:	68 e0       	ldi	r22, 0x08	; 8
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2764:	40 c0       	rjmp	.+128    	; 0x27e6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2766:	84 34       	cpi	r24, 0x44	; 68
    2768:	91 05       	cpc	r25, r1
    276a:	29 f4       	brne	.+10     	; 0x2776 <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    276c:	60 e2       	ldi	r22, 0x20	; 32
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2774:	38 c0       	rjmp	.+112    	; 0x27e6 <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    2776:	80 3b       	cpi	r24, 0xB0	; 176
    2778:	91 05       	cpc	r25, r1
    277a:	29 f4       	brne	.+10     	; 0x2786 <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    277c:	60 e4       	ldi	r22, 0x40	; 64
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2784:	30 c0       	rjmp	.+96     	; 0x27e6 <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2786:	88 3b       	cpi	r24, 0xB8	; 184
    2788:	91 05       	cpc	r25, r1
    278a:	29 f4       	brne	.+10     	; 0x2796 <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    278c:	60 e8       	ldi	r22, 0x80	; 128
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    2794:	28 c0       	rjmp	.+80     	; 0x27e6 <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2796:	88 3c       	cpi	r24, 0xC8	; 200
    2798:	91 05       	cpc	r25, r1
    279a:	29 f4       	brne	.+10     	; 0x27a6 <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27a4:	20 c0       	rjmp	.+64     	; 0x27e6 <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    27a6:	80 39       	cpi	r24, 0x90	; 144
    27a8:	91 05       	cpc	r25, r1
    27aa:	29 f4       	brne	.+10     	; 0x27b6 <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    27ac:	68 e0       	ldi	r22, 0x08	; 8
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27b4:	18 c0       	rjmp	.+48     	; 0x27e6 <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    27b6:	80 3a       	cpi	r24, 0xA0	; 160
    27b8:	91 05       	cpc	r25, r1
    27ba:	29 f4       	brne	.+10     	; 0x27c6 <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    27bc:	60 e1       	ldi	r22, 0x10	; 16
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27c4:	10 c0       	rjmp	.+32     	; 0x27e6 <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    27c6:	80 32       	cpi	r24, 0x20	; 32
    27c8:	21 e0       	ldi	r18, 0x01	; 1
    27ca:	92 07       	cpc	r25, r18
    27cc:	29 f4       	brne	.+10     	; 0x27d8 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    27ce:	60 e2       	ldi	r22, 0x20	; 32
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
    27d6:	07 c0       	rjmp	.+14     	; 0x27e6 <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    27d8:	83 34       	cpi	r24, 0x43	; 67
    27da:	91 40       	sbci	r25, 0x01	; 1
    27dc:	21 f4       	brne	.+8      	; 0x27e6 <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    27de:	60 e4       	ldi	r22, 0x40	; 64
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    27e6:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    27e8:	0f 90       	pop	r0
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	08 95       	ret

000027f2 <tc_disable>:

void tc_disable(volatile void *tc)
{
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	1f 92       	push	r1
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    27fe:	2f b7       	in	r18, 0x3f	; 63
    2800:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    2802:	f8 94       	cli
	return flags;
    2804:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	09 f4       	brne	.+2      	; 0x280c <tc_disable+0x1a>
    280a:	64 c0       	rjmp	.+200    	; 0x28d4 <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    280c:	88 37       	cpi	r24, 0x78	; 120
    280e:	91 05       	cpc	r25, r1
    2810:	49 f4       	brne	.+18     	; 0x2824 <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    2812:	61 e0       	ldi	r22, 0x01	; 1
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    281a:	60 e1       	ldi	r22, 0x10	; 16
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2822:	58 c0       	rjmp	.+176    	; 0x28d4 <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    2824:	80 3c       	cpi	r24, 0xC0	; 192
    2826:	91 05       	cpc	r25, r1
    2828:	29 f4       	brne	.+10     	; 0x2834 <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2832:	50 c0       	rjmp	.+160    	; 0x28d4 <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    2834:	8c 34       	cpi	r24, 0x4C	; 76
    2836:	91 05       	cpc	r25, r1
    2838:	29 f4       	brne	.+10     	; 0x2844 <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    283a:	64 e0       	ldi	r22, 0x04	; 4
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2842:	48 c0       	rjmp	.+144    	; 0x28d4 <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    2844:	80 38       	cpi	r24, 0x80	; 128
    2846:	91 05       	cpc	r25, r1
    2848:	29 f4       	brne	.+10     	; 0x2854 <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    284a:	68 e0       	ldi	r22, 0x08	; 8
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2852:	40 c0       	rjmp	.+128    	; 0x28d4 <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    2854:	84 34       	cpi	r24, 0x44	; 68
    2856:	91 05       	cpc	r25, r1
    2858:	29 f4       	brne	.+10     	; 0x2864 <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    285a:	60 e2       	ldi	r22, 0x20	; 32
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2862:	38 c0       	rjmp	.+112    	; 0x28d4 <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    2864:	80 3b       	cpi	r24, 0xB0	; 176
    2866:	91 05       	cpc	r25, r1
    2868:	29 f4       	brne	.+10     	; 0x2874 <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    286a:	60 e4       	ldi	r22, 0x40	; 64
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2872:	30 c0       	rjmp	.+96     	; 0x28d4 <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    2874:	88 3b       	cpi	r24, 0xB8	; 184
    2876:	91 05       	cpc	r25, r1
    2878:	29 f4       	brne	.+10     	; 0x2884 <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    287a:	60 e8       	ldi	r22, 0x80	; 128
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2882:	28 c0       	rjmp	.+80     	; 0x28d4 <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    2884:	88 3c       	cpi	r24, 0xC8	; 200
    2886:	91 05       	cpc	r25, r1
    2888:	29 f4       	brne	.+10     	; 0x2894 <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    2892:	20 c0       	rjmp	.+64     	; 0x28d4 <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    2894:	80 39       	cpi	r24, 0x90	; 144
    2896:	91 05       	cpc	r25, r1
    2898:	29 f4       	brne	.+10     	; 0x28a4 <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    289a:	68 e0       	ldi	r22, 0x08	; 8
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28a2:	18 c0       	rjmp	.+48     	; 0x28d4 <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    28a4:	80 3a       	cpi	r24, 0xA0	; 160
    28a6:	91 05       	cpc	r25, r1
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    28aa:	60 e1       	ldi	r22, 0x10	; 16
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28b2:	10 c0       	rjmp	.+32     	; 0x28d4 <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    28b4:	80 32       	cpi	r24, 0x20	; 32
    28b6:	21 e0       	ldi	r18, 0x01	; 1
    28b8:	92 07       	cpc	r25, r18
    28ba:	29 f4       	brne	.+10     	; 0x28c6 <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    28bc:	60 e2       	ldi	r22, 0x20	; 32
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
    28c4:	07 c0       	rjmp	.+14     	; 0x28d4 <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    28c6:	83 34       	cpi	r24, 0x43	; 67
    28c8:	91 40       	sbci	r25, 0x01	; 1
    28ca:	21 f4       	brne	.+8      	; 0x28d4 <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    28cc:	60 e4       	ldi	r22, 0x40	; 64
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    28d4:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    28d6:	0f 90       	pop	r0
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	08 95       	ret

000028e0 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    28e0:	80 38       	cpi	r24, 0x80	; 128
    28e2:	91 05       	cpc	r25, r1
    28e4:	29 f4       	brne	.+10     	; 0x28f0 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    28e6:	70 93 4c 08 	sts	0x084C, r23	; 0x80084c <tc_tccr1_ovf_callback+0x1>
    28ea:	60 93 4b 08 	sts	0x084B, r22	; 0x80084b <tc_tccr1_ovf_callback>
    28ee:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    28f0:	80 39       	cpi	r24, 0x90	; 144
    28f2:	91 05       	cpc	r25, r1
    28f4:	29 f4       	brne	.+10     	; 0x2900 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    28f6:	70 93 44 08 	sts	0x0844, r23	; 0x800844 <tc_tccr3_ovf_callback+0x1>
    28fa:	60 93 43 08 	sts	0x0843, r22	; 0x800843 <tc_tccr3_ovf_callback>
    28fe:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2900:	80 3a       	cpi	r24, 0xA0	; 160
    2902:	91 05       	cpc	r25, r1
    2904:	29 f4       	brne	.+10     	; 0x2910 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    2906:	70 93 3c 08 	sts	0x083C, r23	; 0x80083c <tc_tccr4_ovf_callback+0x1>
    290a:	60 93 3b 08 	sts	0x083B, r22	; 0x80083b <tc_tccr4_ovf_callback>
    290e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2910:	80 32       	cpi	r24, 0x20	; 32
    2912:	91 40       	sbci	r25, 0x01	; 1
    2914:	21 f4       	brne	.+8      	; 0x291e <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    2916:	70 93 34 08 	sts	0x0834, r23	; 0x800834 <tc_tccr5_ovf_callback+0x1>
    291a:	60 93 33 08 	sts	0x0833, r22	; 0x800833 <tc_tccr5_ovf_callback>
    291e:	08 95       	ret

00002920 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    2920:	80 38       	cpi	r24, 0x80	; 128
    2922:	91 05       	cpc	r25, r1
    2924:	29 f4       	brne	.+10     	; 0x2930 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    2926:	70 93 4a 08 	sts	0x084A, r23	; 0x80084a <tc_tccr1_compa_callback+0x1>
    292a:	60 93 49 08 	sts	0x0849, r22	; 0x800849 <tc_tccr1_compa_callback>
    292e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    2930:	80 39       	cpi	r24, 0x90	; 144
    2932:	91 05       	cpc	r25, r1
    2934:	29 f4       	brne	.+10     	; 0x2940 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    2936:	70 93 42 08 	sts	0x0842, r23	; 0x800842 <tc_tccr3_compa_callback+0x1>
    293a:	60 93 41 08 	sts	0x0841, r22	; 0x800841 <tc_tccr3_compa_callback>
    293e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    2940:	80 3a       	cpi	r24, 0xA0	; 160
    2942:	91 05       	cpc	r25, r1
    2944:	29 f4       	brne	.+10     	; 0x2950 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    2946:	70 93 3a 08 	sts	0x083A, r23	; 0x80083a <tc_tccr4_compa_callback+0x1>
    294a:	60 93 39 08 	sts	0x0839, r22	; 0x800839 <tc_tccr4_compa_callback>
    294e:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    2950:	80 32       	cpi	r24, 0x20	; 32
    2952:	91 40       	sbci	r25, 0x01	; 1
    2954:	21 f4       	brne	.+8      	; 0x295e <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    2956:	70 93 32 08 	sts	0x0832, r23	; 0x800832 <tc_tccr5_compa_callback+0x1>
    295a:	60 93 31 08 	sts	0x0831, r22	; 0x800831 <tc_tccr5_compa_callback>
    295e:	08 95       	ret

00002960 <sal_init>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
    2960:	08 95       	ret

00002962 <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
    2962:	fc 01       	movw	r30, r24
    2964:	9c 01       	movw	r18, r24
    2966:	20 5f       	subi	r18, 0xF0	; 240
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		trx_reg_write(RG_AES_STATE, *data++);
    296a:	ae e3       	ldi	r26, 0x3E	; 62
    296c:	b1 e0       	ldi	r27, 0x01	; 1
    296e:	81 91       	ld	r24, Z+
    2970:	8c 93       	st	X, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2972:	e2 17       	cp	r30, r18
    2974:	f3 07       	cpc	r31, r19
    2976:	d9 f7       	brne	.-10     	; 0x296e <sal_aes_exec+0xc>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
    2978:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <mode_byte>
    297c:	80 68       	ori	r24, 0x80	; 128
    297e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__TEXT_REGION_LENGTH__+0x7c013c>
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
    2982:	ed e3       	ldi	r30, 0x3D	; 61
    2984:	f1 e0       	ldi	r31, 0x01	; 1
    2986:	80 81       	ld	r24, Z
    2988:	80 ff       	sbrs	r24, 0
    298a:	fd cf       	rjmp	.-6      	; 0x2986 <sal_aes_exec+0x24>
	}
}
    298c:	08 95       	ret

0000298e <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	60 97       	sbiw	r28, 0x10	; 16
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	06 2f       	mov	r16, r22
    29a8:	14 2f       	mov	r17, r20
	uint8_t i;

	if (key != NULL) {
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	c9 f0       	breq	.+50     	; 0x29e0 <sal_aes_setup+0x52>
		/* Setup key. */
		dec_initialized = false;
    29ae:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <dec_initialized>

		last_dir = AES_DIR_VOID;
    29b2:	22 e0       	ldi	r18, 0x02	; 2
    29b4:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    29b8:	20 e1       	ldi	r18, 0x10	; 16
    29ba:	fc 01       	movw	r30, r24
    29bc:	ad e5       	ldi	r26, 0x5D	; 93
    29be:	b8 e0       	ldi	r27, 0x08	; 8
    29c0:	01 90       	ld	r0, Z+
    29c2:	0d 92       	st	X+, r0
    29c4:	2a 95       	dec	r18
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <sal_aes_setup+0x32>
    29c8:	dc 01       	movw	r26, r24
    29ca:	ac 01       	movw	r20, r24
    29cc:	40 5f       	subi	r20, 0xF0	; 240
    29ce:	5f 4f       	sbci	r21, 0xFF	; 255

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
			trx_reg_write(RG_AES_KEY, key[i]);
    29d0:	2f e3       	ldi	r18, 0x3F	; 63
    29d2:	31 e0       	ldi	r19, 0x01	; 1
    29d4:	9d 91       	ld	r25, X+
    29d6:	f9 01       	movw	r30, r18
    29d8:	90 83       	st	Z, r25

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
    29da:	4a 17       	cp	r20, r26
    29dc:	5b 07       	cpc	r21, r27
    29de:	d1 f7       	brne	.-12     	; 0x29d4 <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
    29e0:	11 23       	and	r17, r17
    29e2:	19 f0       	breq	.+6      	; 0x29ea <sal_aes_setup+0x5c>
    29e4:	11 30       	cpi	r17, 0x01	; 1
    29e6:	89 f0       	breq	.+34     	; 0x2a0a <sal_aes_setup+0x7c>
    29e8:	48 c0       	rjmp	.+144    	; 0x2a7a <sal_aes_setup+0xec>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    29ea:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    29ee:	81 30       	cpi	r24, 0x01	; 1
    29f0:	79 f5       	brne	.+94     	; 0x2a50 <sal_aes_setup+0xc2>
    29f2:	ed e5       	ldi	r30, 0x5D	; 93
    29f4:	f8 e0       	ldi	r31, 0x08	; 8
    29f6:	2d e6       	ldi	r18, 0x6D	; 109
    29f8:	38 e0       	ldi	r19, 0x08	; 8
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
    29fa:	af e3       	ldi	r26, 0x3F	; 63
    29fc:	b1 e0       	ldi	r27, 0x01	; 1
    29fe:	81 91       	ld	r24, Z+
    2a00:	8c 93       	st	X, r24
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a02:	2e 17       	cp	r18, r30
    2a04:	3f 07       	cpc	r19, r31
    2a06:	d9 f7       	brne	.-10     	; 0x29fe <sal_aes_setup+0x70>
    2a08:	23 c0       	rjmp	.+70     	; 0x2a50 <sal_aes_setup+0xc2>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    2a0a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <last_dir>
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	b1 f1       	breq	.+108    	; 0x2a7e <sal_aes_setup+0xf0>
			if (!dec_initialized) {
    2a12:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <dec_initialized>
    2a16:	81 11       	cpse	r24, r1
    2a18:	36 c0       	rjmp	.+108    	; 0x2a86 <sal_aes_setup+0xf8>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
    2a1a:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
    2a1e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__TEXT_REGION_LENGTH__+0x7c013c>
				sal_aes_exec(dummy);
    2a22:	ce 01       	movw	r24, r28
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	9d df       	rcall	.-198    	; 0x2962 <sal_aes_exec>
    2a28:	ed e4       	ldi	r30, 0x4D	; 77
    2a2a:	f8 e0       	ldi	r31, 0x08	; 8
    2a2c:	2d e5       	ldi	r18, 0x5D	; 93
    2a2e:	38 e0       	ldi	r19, 0x08	; 8

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
    2a30:	af e3       	ldi	r26, 0x3F	; 63
    2a32:	b1 e0       	ldi	r27, 0x01	; 1
    2a34:	8c 91       	ld	r24, X
    2a36:	81 93       	st	Z+, r24
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a38:	2e 17       	cp	r18, r30
    2a3a:	3f 07       	cpc	r19, r31
    2a3c:	d9 f7       	brne	.-10     	; 0x2a34 <sal_aes_setup+0xa6>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <dec_initialized>
    2a44:	20 c0       	rjmp	.+64     	; 0x2a86 <sal_aes_setup+0xf8>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2a46:	81 91       	ld	r24, Z+
    2a48:	8c 93       	st	X, r24

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2a4a:	2e 17       	cp	r18, r30
    2a4c:	3f 07       	cpc	r19, r31
    2a4e:	d9 f7       	brne	.-10     	; 0x2a46 <sal_aes_setup+0xb8>

	default:
		return false;
	}

	last_dir = dir;
    2a50:	10 93 11 02 	sts	0x0211, r17	; 0x800211 <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
    2a54:	02 30       	cpi	r16, 0x02	; 2
    2a56:	a8 f4       	brcc	.+42     	; 0x2a82 <sal_aes_setup+0xf4>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
    2a58:	f0 e2       	ldi	r31, 0x20	; 32
    2a5a:	0f 9f       	mul	r16, r31
    2a5c:	c0 01       	movw	r24, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	08 2f       	mov	r16, r24
    2a62:	00 72       	andi	r16, 0x20	; 32
    2a64:	11 0f       	add	r17, r17
    2a66:	11 0f       	add	r17, r17
    2a68:	11 0f       	add	r17, r17
    2a6a:	18 70       	andi	r17, 0x08	; 8
    2a6c:	10 2b       	or	r17, r16
    2a6e:	10 93 6d 08 	sts	0x086D, r17	; 0x80086d <mode_byte>
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
    2a72:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <__TEXT_REGION_LENGTH__+0x7c013c>

	return (true);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0d c0       	rjmp	.+26     	; 0x2a94 <sal_aes_setup+0x106>

			break;
		}

	default:
		return false;
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	0b c0       	rjmp	.+22     	; 0x2a94 <sal_aes_setup+0x106>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <sal_aes_setup+0x106>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	07 c0       	rjmp	.+14     	; 0x2a94 <sal_aes_setup+0x106>
    2a86:	ed e4       	ldi	r30, 0x4D	; 77
    2a88:	f8 e0       	ldi	r31, 0x08	; 8
    2a8a:	2d e5       	ldi	r18, 0x5D	; 93
    2a8c:	38 e0       	ldi	r19, 0x08	; 8
				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
    2a8e:	af e3       	ldi	r26, 0x3F	; 63
    2a90:	b1 e0       	ldi	r27, 0x01	; 1
    2a92:	d9 cf       	rjmp	.-78     	; 0x2a46 <sal_aes_setup+0xb8>
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
    2a94:	60 96       	adiw	r28, 0x10	; 16
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	08 95       	ret

00002aaa <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    2aaa:	fc 01       	movw	r30, r24
    2aac:	9c 01       	movw	r18, r24
    2aae:	20 5f       	subi	r18, 0xF0	; 240
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		*data++ = trx_reg_read(RG_AES_STATE);
    2ab2:	ae e3       	ldi	r26, 0x3E	; 62
    2ab4:	b1 e0       	ldi	r27, 0x01	; 1
    2ab6:	8c 91       	ld	r24, X
    2ab8:	81 93       	st	Z+, r24
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
    2aba:	e2 17       	cp	r30, r18
    2abc:	f3 07       	cpc	r31, r19
    2abe:	d9 f7       	brne	.-10     	; 0x2ab6 <sal_aes_read+0xc>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
    2ac0:	08 95       	ret

00002ac2 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	appDataReqBusy = false;
    2ac2:	10 92 43 09 	sts	0x0943, r1	; 0x800943 <appDataReqBusy>
    2ac6:	08 95       	ret

00002ac8 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    2ac8:	0f 93       	push	r16
    2aca:	1f 93       	push	r17
    2acc:	cf 93       	push	r28
	for (uint8_t i = 0; i < ind->size; i++) {
    2ace:	dc 01       	movw	r26, r24
    2ad0:	19 96       	adiw	r26, 0x09	; 9
    2ad2:	2c 91       	ld	r18, X
    2ad4:	22 23       	and	r18, r18
    2ad6:	89 f0       	breq	.+34     	; 0x2afa <appDataInd+0x32>
    2ad8:	8c 01       	movw	r16, r24
    2ada:	c0 e0       	ldi	r28, 0x00	; 0
		sio2host_putchar(ind->data[i]);
    2adc:	d8 01       	movw	r26, r16
    2ade:	17 96       	adiw	r26, 0x07	; 7
    2ae0:	ed 91       	ld	r30, X+
    2ae2:	fc 91       	ld	r31, X
    2ae4:	18 97       	sbiw	r26, 0x08	; 8
    2ae6:	ec 0f       	add	r30, r28
    2ae8:	f1 1d       	adc	r31, r1
    2aea:	80 81       	ld	r24, Z
    2aec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sio2host_putchar>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    2af0:	cf 5f       	subi	r28, 0xFF	; 255
    2af2:	f8 01       	movw	r30, r16
    2af4:	81 85       	ldd	r24, Z+9	; 0x09
    2af6:	c8 17       	cp	r28, r24
    2af8:	88 f3       	brcs	.-30     	; 0x2adc <appDataInd+0x14>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
    2afa:	80 e1       	ldi	r24, 0x10	; 16
    2afc:	83 b9       	out	0x03, r24	; 3
		appSendData(dstAddrPrev,ind->data);
		
	}*/
	LED_Toggle(LED0);
	return true;
}
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	08 95       	ret

00002b08 <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(int dstAddr, uint8_t* data_to_send)
{
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	9c 01       	movw	r18, r24
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    2b14:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <appDataReqBusy>
    2b18:	91 11       	cpse	r25, r1
    2b1a:	26 c0       	rjmp	.+76     	; 0x2b68 <appSendData+0x60>
    2b1c:	10 91 70 08 	lds	r17, 0x0870	; 0x800870 <appUartBufferPtr>
    2b20:	11 23       	and	r17, r17
    2b22:	11 f1       	breq	.+68     	; 0x2b68 <appSendData+0x60>
    2b24:	7b 01       	movw	r14, r22
    2b26:	e9 01       	movw	r28, r18
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    2b28:	41 2f       	mov	r20, r17
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	61 e7       	ldi	r22, 0x71	; 113
    2b2e:	78 e0       	ldi	r23, 0x08	; 8
    2b30:	8a ed       	ldi	r24, 0xDA	; 218
    2b32:	98 e0       	ldi	r25, 0x08	; 8
    2b34:	80 d1       	rcall	.+768    	; 0x2e36 <memcpy>

	//appDataReq.dstAddr = 1 - APP_ADDR;
	appDataReq.dstAddr = dstAddr;
    2b36:	e4 e4       	ldi	r30, 0x44	; 68
    2b38:	f9 e0       	ldi	r31, 0x09	; 9
    2b3a:	d6 83       	std	Z+6, r29	; 0x06
    2b3c:	c5 83       	std	Z+5, r28	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
    2b3e:	c1 e0       	ldi	r28, 0x01	; 1
    2b40:	c7 83       	std	Z+7, r28	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
    2b42:	c0 87       	std	Z+8, r28	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = data_to_send;
    2b48:	f3 86       	std	Z+11, r15	; 0x0b
    2b4a:	e2 86       	std	Z+10, r14	; 0x0a
	appDataReq.size = appUartBufferPtr;
    2b4c:	14 87       	std	Z+12, r17	; 0x0c
	appDataReq.confirm = appDataConf;
    2b4e:	81 e6       	ldi	r24, 0x61	; 97
    2b50:	95 e1       	ldi	r25, 0x15	; 21
    2b52:	96 87       	std	Z+14, r25	; 0x0e
    2b54:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
    2b56:	cf 01       	movw	r24, r30
    2b58:	0e 94 b2 04 	call	0x964	; 0x964 <NWK_DataReq>

	appUartBufferPtr = 0;
    2b5c:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <appUartBufferPtr>
	appDataReqBusy = true;
    2b60:	c0 93 43 09 	sts	0x0943, r28	; 0x800943 <appDataReqBusy>
    2b64:	80 e1       	ldi	r24, 0x10	; 16
    2b66:	83 b9       	out	0x03, r24	; 3
	LED_Toggle(LED0);
}
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	1f 91       	pop	r17
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	08 95       	ret

00002b74 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
	appSendData(dstAddrPrev, appDataReqBuffer);
    2b74:	6a ed       	ldi	r22, 0xDA	; 218
    2b76:	78 e0       	ldi	r23, 0x08	; 8
    2b78:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <dstAddrPrev>
    2b7c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <dstAddrPrev+0x1>
    2b80:	c3 cf       	rjmp	.-122    	; 0x2b08 <appSendData>
    2b82:	08 95       	ret

00002b84 <main>:
/*************************************************************************//**
*****************************************************************************/
int main(void)
{
	irq_initialize_vectors();
	sysclk_init();
    2b84:	0e 94 c7 01 	call	0x38e	; 0x38e <sysclk_init>
	board_init();
    2b88:	0e 94 70 02 	call	0x4e0	; 0x4e0 <board_init>
	SYS_Init();
    2b8c:	31 d9       	rcall	.-3486   	; 0x1df0 <SYS_Init>
	sio2host_init();
    2b8e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sio2host_init>
	cpu_irq_enable();
    2b92:	78 94       	sei
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    2b94:	2c 98       	cbi	0x05, 4	; 5
#endif
	PHY_SetRxState(true);

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2b96:	0f 2e       	mov	r0, r31
    2b98:	f5 e5       	ldi	r31, 0x55	; 85
    2b9a:	cf 2e       	mov	r12, r31
    2b9c:	f9 e0       	ldi	r31, 0x09	; 9
    2b9e:	df 2e       	mov	r13, r31
    2ba0:	f0 2d       	mov	r31, r0
    2ba2:	0f 2e       	mov	r0, r31
    2ba4:	f4 e1       	ldi	r31, 0x14	; 20
    2ba6:	8f 2e       	mov	r8, r31
    2ba8:	91 2c       	mov	r9, r1
    2baa:	a1 2c       	mov	r10, r1
    2bac:	b1 2c       	mov	r11, r1
    2bae:	f0 2d       	mov	r31, r0
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
    2bb0:	0f 2e       	mov	r0, r31
    2bb2:	fa eb       	ldi	r31, 0xBA	; 186
    2bb4:	6f 2e       	mov	r6, r31
    2bb6:	f5 e1       	ldi	r31, 0x15	; 21
    2bb8:	7f 2e       	mov	r7, r31
    2bba:	f0 2d       	mov	r31, r0
	}
	btn_prev=btn_now;
	btn_now=ioport_get_pin_level(GPIO_PUSH_BUTTON_0);
	if(!btn_now && btn_prev){
		
		appUartBufferPtr = sizeof(appTempBuffer)-1;
    2bbc:	0f 2e       	mov	r0, r31
    2bbe:	fc e1       	ldi	r31, 0x1C	; 28
    2bc0:	5f 2e       	mov	r5, r31
	SYS_Init();
	sio2host_init();
	cpu_irq_enable();
	LED_On(LED0);
	while (1) {
		SYS_TaskHandler();
    2bc2:	f0 2d       	mov	r31, r0
    2bc4:	1b d9       	rcall	.-3530   	; 0x1dfc <SYS_TaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState) {
    2bc6:	80 91 62 09 	lds	r24, 0x0962	; 0x800962 <appState>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	22 c0       	rjmp	.+68     	; 0x2c12 <main+0x8e>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    2bce:	85 e0       	ldi	r24, 0x05	; 5
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 6d 04 	call	0x8da	; 0x8da <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
    2bd6:	88 e6       	ldi	r24, 0x68	; 104
    2bd8:	95 e4       	ldi	r25, 0x45	; 69
    2bda:	0e 94 74 04 	call	0x8e8	; 0x8e8 <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    2be0:	29 d8       	rcall	.-4014   	; 0x1c34 <PHY_SetChannel>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	23 d8       	rcall	.-4026   	; 0x1c2c <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    2be6:	64 e6       	ldi	r22, 0x64	; 100
    2be8:	75 e1       	ldi	r23, 0x15	; 21
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <NWK_OpenEndpoint>

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    2bf0:	d6 01       	movw	r26, r12
    2bf2:	16 96       	adiw	r26, 0x06	; 6
    2bf4:	8d 92       	st	X+, r8
    2bf6:	9d 92       	st	X+, r9
    2bf8:	ad 92       	st	X+, r10
    2bfa:	bc 92       	st	X, r11
    2bfc:	19 97       	sbiw	r26, 0x09	; 9
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2bfe:	1a 96       	adiw	r26, 0x0a	; 10
    2c00:	1c 92       	st	X, r1
    2c02:	1a 97       	sbiw	r26, 0x0a	; 10
	appTimer.handler = appTimerHandler;
    2c04:	1c 96       	adiw	r26, 0x0c	; 12
    2c06:	7c 92       	st	X, r7
    2c08:	6e 92       	st	-X, r6
    2c0a:	1b 97       	sbiw	r26, 0x0b	; 11
{
	switch (appState) {
	case APP_STATE_INITIAL:
	{
		appInit();
		appState = APP_STATE_IDLE;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <appState>

	default:
		break;
	}
	
	memcpy(watchBuffer,appTempBuffer,APP_BUFFER_SIZE);
    2c12:	89 e6       	ldi	r24, 0x69	; 105
    2c14:	e4 e1       	ldi	r30, 0x14	; 20
    2c16:	f2 e0       	ldi	r31, 0x02	; 2
    2c18:	a6 eb       	ldi	r26, 0xB6	; 182
    2c1a:	b9 e0       	ldi	r27, 0x09	; 9
    2c1c:	01 90       	ld	r0, Z+
    2c1e:	0d 92       	st	X+, r0
    2c20:	8a 95       	dec	r24
    2c22:	e1 f7       	brne	.-8      	; 0x2c1c <main+0x98>
	
	sio_rx_length = sio2host_rx(rx_data, APP_RX_BUF_SIZE);
    2c24:	64 e1       	ldi	r22, 0x14	; 20
    2c26:	83 e6       	ldi	r24, 0x63	; 99
    2c28:	99 e0       	ldi	r25, 0x09	; 9
    2c2a:	0e 94 c0 03 	call	0x780	; 0x780 <sio2host_rx>
    2c2e:	80 93 6f 08 	sts	0x086F, r24	; 0x80086f <sio_rx_length>
	if (sio_rx_length) {
    2c32:	88 23       	and	r24, r24
    2c34:	71 f1       	breq	.+92     	; 0x2c92 <main+0x10e>
    2c36:	c3 e6       	ldi	r28, 0x63	; 99
    2c38:	d9 e0       	ldi	r29, 0x09	; 9
    2c3a:	00 e0       	ldi	r16, 0x00	; 0
    2c3c:	10 e0       	ldi	r17, 0x00	; 0
    2c3e:	7e 01       	movw	r14, r28
		for (uint16_t i = 0; i < sio_rx_length; i++) {
			sio2host_putchar(rx_data[i]);
    2c40:	88 81       	ld	r24, Y
    2c42:	0e 94 ff 03 	call	0x7fe	; 0x7fe <sio2host_putchar>
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    2c46:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <appUartBufferPtr>
    2c4a:	89 36       	cpi	r24, 0x69	; 105
    2c4c:	39 f4       	brne	.+14     	; 0x2c5c <main+0xd8>
				appSendData(dstAddrPrev,appDataReqBuffer);
    2c4e:	6a ed       	ldi	r22, 0xDA	; 218
    2c50:	78 e0       	ldi	r23, 0x08	; 8
    2c52:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <dstAddrPrev>
    2c56:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <dstAddrPrev+0x1>
    2c5a:	56 df       	rcall	.-340    	; 0x2b08 <appSendData>
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    2c5c:	e0 91 70 08 	lds	r30, 0x0870	; 0x800870 <appUartBufferPtr>
    2c60:	e9 36       	cpi	r30, 0x69	; 105
    2c62:	50 f4       	brcc	.+20     	; 0x2c78 <main+0xf4>
				appUartBuffer[appUartBufferPtr++] = rx_data[i];
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	8e 0f       	add	r24, r30
    2c68:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <appUartBufferPtr>
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	ef 58       	subi	r30, 0x8F	; 143
    2c70:	f7 4f       	sbci	r31, 0xF7	; 247
    2c72:	d7 01       	movw	r26, r14
    2c74:	8c 91       	ld	r24, X
    2c76:	80 83       	st	Z, r24
	
	memcpy(watchBuffer,appTempBuffer,APP_BUFFER_SIZE);
	
	sio_rx_length = sio2host_rx(rx_data, APP_RX_BUF_SIZE);
	if (sio_rx_length) {
		for (uint16_t i = 0; i < sio_rx_length; i++) {
    2c78:	0f 5f       	subi	r16, 0xFF	; 255
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	21 96       	adiw	r28, 0x01	; 1
    2c7e:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <sio_rx_length>
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	08 17       	cp	r16, r24
    2c86:	19 07       	cpc	r17, r25
				appUartBuffer[appUartBufferPtr++] = rx_data[i];
			}
		}

		
		SYS_TimerStop(&appTimer);
    2c88:	d0 f2       	brcs	.-76     	; 0x2c3e <main+0xba>
    2c8a:	c6 01       	movw	r24, r12
		SYS_TimerStart(&appTimer);
    2c8c:	3e d9       	rcall	.-3460   	; 0x1f0a <SYS_TimerStop>
    2c8e:	c6 01       	movw	r24, r12
    2c90:	93 d9       	rcall	.-3290   	; 0x1fb8 <SYS_TimerStart>
		
	}
	btn_prev=btn_now;
    2c92:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <btn_now>
    2c96:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <btn_prev>
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    2c9a:	8c b1       	in	r24, 0x0c	; 12
	btn_now=ioport_get_pin_level(GPIO_PUSH_BUTTON_0);
    2c9c:	21 e0       	ldi	r18, 0x01	; 1
    2c9e:	38 2f       	mov	r19, r24
    2ca0:	30 71       	andi	r19, 0x10	; 16
    2ca2:	84 ff       	sbrs	r24, 4
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	20 93 20 0a 	sts	0x0A20, r18	; 0x800a20 <btn_now>
	if(!btn_now && btn_prev){
    2caa:	31 11       	cpse	r19, r1
    2cac:	8b cf       	rjmp	.-234    	; 0x2bc4 <main+0x40>
    2cae:	99 23       	and	r25, r25
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <main+0x130>
    2cb2:	88 cf       	rjmp	.-240    	; 0x2bc4 <main+0x40>
		
		appUartBufferPtr = sizeof(appTempBuffer)-1;
    2cb4:	50 92 70 08 	sts	0x0870, r5	; 0x800870 <appUartBufferPtr>
		appSendData(dstAddrPrev, appTempBuffer);	
    2cb8:	64 e1       	ldi	r22, 0x14	; 20
    2cba:	72 e0       	ldi	r23, 0x02	; 2
    2cbc:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <dstAddrPrev>
    2cc0:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <dstAddrPrev+0x1>
			
		SYS_TimerStop(&appTimer);
    2cc4:	21 df       	rcall	.-446    	; 0x2b08 <appSendData>
    2cc6:	c6 01       	movw	r24, r12
		SYS_TimerStart(&appTimer);
    2cc8:	20 d9       	rcall	.-3520   	; 0x1f0a <SYS_TimerStop>
    2cca:	c6 01       	movw	r24, r12
    2ccc:	75 d9       	rcall	.-3350   	; 0x1fb8 <SYS_TimerStart>
    2cce:	7a cf       	rjmp	.-268    	; 0x2bc4 <main+0x40>

00002cd0 <__mulsi3>:
    2cd0:	db 01       	movw	r26, r22
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	41 d0       	rcall	.+130    	; 0x2d5a <__muluhisi3>
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	a2 9f       	mul	r26, r18
    2cde:	80 0d       	add	r24, r0
    2ce0:	91 1d       	adc	r25, r1
    2ce2:	a3 9f       	mul	r26, r19
    2ce4:	90 0d       	add	r25, r0
    2ce6:	b2 9f       	mul	r27, r18
    2ce8:	90 0d       	add	r25, r0
    2cea:	11 24       	eor	r1, r1
    2cec:	08 95       	ret

00002cee <__udivmodhi4>:
    2cee:	aa 1b       	sub	r26, r26
    2cf0:	bb 1b       	sub	r27, r27
    2cf2:	51 e1       	ldi	r21, 0x11	; 17
    2cf4:	07 c0       	rjmp	.+14     	; 0x2d04 <__udivmodhi4_ep>

00002cf6 <__udivmodhi4_loop>:
    2cf6:	aa 1f       	adc	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	a6 17       	cp	r26, r22
    2cfc:	b7 07       	cpc	r27, r23
    2cfe:	10 f0       	brcs	.+4      	; 0x2d04 <__udivmodhi4_ep>
    2d00:	a6 1b       	sub	r26, r22
    2d02:	b7 0b       	sbc	r27, r23

00002d04 <__udivmodhi4_ep>:
    2d04:	88 1f       	adc	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	5a 95       	dec	r21
    2d0a:	a9 f7       	brne	.-22     	; 0x2cf6 <__udivmodhi4_loop>
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	08 95       	ret

00002d16 <__udivmodsi4>:
    2d16:	a1 e2       	ldi	r26, 0x21	; 33
    2d18:	1a 2e       	mov	r1, r26
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	fd 01       	movw	r30, r26
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <__udivmodsi4_ep>

00002d22 <__udivmodsi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	ee 1f       	adc	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	a2 17       	cp	r26, r18
    2d2c:	b3 07       	cpc	r27, r19
    2d2e:	e4 07       	cpc	r30, r20
    2d30:	f5 07       	cpc	r31, r21
    2d32:	20 f0       	brcs	.+8      	; 0x2d3c <__udivmodsi4_ep>
    2d34:	a2 1b       	sub	r26, r18
    2d36:	b3 0b       	sbc	r27, r19
    2d38:	e4 0b       	sbc	r30, r20
    2d3a:	f5 0b       	sbc	r31, r21

00002d3c <__udivmodsi4_ep>:
    2d3c:	66 1f       	adc	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	88 1f       	adc	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	1a 94       	dec	r1
    2d46:	69 f7       	brne	.-38     	; 0x2d22 <__udivmodsi4_loop>
    2d48:	60 95       	com	r22
    2d4a:	70 95       	com	r23
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	9b 01       	movw	r18, r22
    2d52:	ac 01       	movw	r20, r24
    2d54:	bd 01       	movw	r22, r26
    2d56:	cf 01       	movw	r24, r30
    2d58:	08 95       	ret

00002d5a <__muluhisi3>:
    2d5a:	09 d0       	rcall	.+18     	; 0x2d6e <__umulhisi3>
    2d5c:	a5 9f       	mul	r26, r21
    2d5e:	90 0d       	add	r25, r0
    2d60:	b4 9f       	mul	r27, r20
    2d62:	90 0d       	add	r25, r0
    2d64:	a4 9f       	mul	r26, r20
    2d66:	80 0d       	add	r24, r0
    2d68:	91 1d       	adc	r25, r1
    2d6a:	11 24       	eor	r1, r1
    2d6c:	08 95       	ret

00002d6e <__umulhisi3>:
    2d6e:	a2 9f       	mul	r26, r18
    2d70:	b0 01       	movw	r22, r0
    2d72:	b3 9f       	mul	r27, r19
    2d74:	c0 01       	movw	r24, r0
    2d76:	a3 9f       	mul	r26, r19
    2d78:	70 0d       	add	r23, r0
    2d7a:	81 1d       	adc	r24, r1
    2d7c:	11 24       	eor	r1, r1
    2d7e:	91 1d       	adc	r25, r1
    2d80:	b2 9f       	mul	r27, r18
    2d82:	70 0d       	add	r23, r0
    2d84:	81 1d       	adc	r24, r1
    2d86:	11 24       	eor	r1, r1
    2d88:	91 1d       	adc	r25, r1
    2d8a:	08 95       	ret

00002d8c <do_rand>:
    2d8c:	8f 92       	push	r8
    2d8e:	9f 92       	push	r9
    2d90:	af 92       	push	r10
    2d92:	bf 92       	push	r11
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	ec 01       	movw	r28, r24
    2da2:	68 81       	ld	r22, Y
    2da4:	79 81       	ldd	r23, Y+1	; 0x01
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	61 15       	cp	r22, r1
    2dac:	71 05       	cpc	r23, r1
    2dae:	81 05       	cpc	r24, r1
    2db0:	91 05       	cpc	r25, r1
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <do_rand+0x30>
    2db4:	64 e2       	ldi	r22, 0x24	; 36
    2db6:	79 ed       	ldi	r23, 0xD9	; 217
    2db8:	8b e5       	ldi	r24, 0x5B	; 91
    2dba:	97 e0       	ldi	r25, 0x07	; 7
    2dbc:	2d e1       	ldi	r18, 0x1D	; 29
    2dbe:	33 ef       	ldi	r19, 0xF3	; 243
    2dc0:	41 e0       	ldi	r20, 0x01	; 1
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	cd d1       	rcall	.+922    	; 0x3160 <__divmodsi4>
    2dc6:	49 01       	movw	r8, r18
    2dc8:	5a 01       	movw	r10, r20
    2dca:	9b 01       	movw	r18, r22
    2dcc:	ac 01       	movw	r20, r24
    2dce:	a7 ea       	ldi	r26, 0xA7	; 167
    2dd0:	b1 e4       	ldi	r27, 0x41	; 65
    2dd2:	c3 df       	rcall	.-122    	; 0x2d5a <__muluhisi3>
    2dd4:	6b 01       	movw	r12, r22
    2dd6:	7c 01       	movw	r14, r24
    2dd8:	ac ee       	ldi	r26, 0xEC	; 236
    2dda:	b4 ef       	ldi	r27, 0xF4	; 244
    2ddc:	a5 01       	movw	r20, r10
    2dde:	94 01       	movw	r18, r8
    2de0:	dd d1       	rcall	.+954    	; 0x319c <__mulohisi3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8c 0d       	add	r24, r12
    2de8:	9d 1d       	adc	r25, r13
    2dea:	ae 1d       	adc	r26, r14
    2dec:	bf 1d       	adc	r27, r15
    2dee:	b7 ff       	sbrs	r27, 7
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <do_rand+0x6c>
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	a1 09       	sbc	r26, r1
    2df6:	b0 48       	sbci	r27, 0x80	; 128
    2df8:	88 83       	st	Y, r24
    2dfa:	99 83       	std	Y+1, r25	; 0x01
    2dfc:	aa 83       	std	Y+2, r26	; 0x02
    2dfe:	bb 83       	std	Y+3, r27	; 0x03
    2e00:	9f 77       	andi	r25, 0x7F	; 127
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	08 95       	ret

00002e18 <rand_r>:
    2e18:	b9 cf       	rjmp	.-142    	; 0x2d8c <do_rand>

00002e1a <rand>:
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	92 e0       	ldi	r25, 0x02	; 2
    2e1e:	b6 cf       	rjmp	.-148    	; 0x2d8c <do_rand>

00002e20 <srand>:
    2e20:	a0 e0       	ldi	r26, 0x00	; 0
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2e28:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2e2c:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    2e30:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2e34:	08 95       	ret

00002e36 <memcpy>:
    2e36:	fb 01       	movw	r30, r22
    2e38:	dc 01       	movw	r26, r24
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <memcpy+0xa>
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	0d 92       	st	X+, r0
    2e40:	41 50       	subi	r20, 0x01	; 1
    2e42:	50 40       	sbci	r21, 0x00	; 0
    2e44:	d8 f7       	brcc	.-10     	; 0x2e3c <memcpy+0x6>
    2e46:	08 95       	ret

00002e48 <fdevopen>:
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <fdevopen+0x18>
    2e54:	61 15       	cp	r22, r1
    2e56:	71 05       	cpc	r23, r1
    2e58:	19 f4       	brne	.+6      	; 0x2e60 <fdevopen+0x18>
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	39 c0       	rjmp	.+114    	; 0x2ed2 <fdevopen+0x8a>
    2e60:	8b 01       	movw	r16, r22
    2e62:	ec 01       	movw	r28, r24
    2e64:	6e e0       	ldi	r22, 0x0E	; 14
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	37 d0       	rcall	.+110    	; 0x2edc <calloc>
    2e6e:	fc 01       	movw	r30, r24
    2e70:	89 2b       	or	r24, r25
    2e72:	99 f3       	breq	.-26     	; 0x2e5a <fdevopen+0x12>
    2e74:	80 e8       	ldi	r24, 0x80	; 128
    2e76:	83 83       	std	Z+3, r24	; 0x03
    2e78:	01 15       	cp	r16, r1
    2e7a:	11 05       	cpc	r17, r1
    2e7c:	71 f0       	breq	.+28     	; 0x2e9a <fdevopen+0x52>
    2e7e:	13 87       	std	Z+11, r17	; 0x0b
    2e80:	02 87       	std	Z+10, r16	; 0x0a
    2e82:	81 e8       	ldi	r24, 0x81	; 129
    2e84:	83 83       	std	Z+3, r24	; 0x03
    2e86:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <__iob>
    2e8a:	90 91 23 0a 	lds	r25, 0x0A23	; 0x800a23 <__iob+0x1>
    2e8e:	89 2b       	or	r24, r25
    2e90:	21 f4       	brne	.+8      	; 0x2e9a <fdevopen+0x52>
    2e92:	f0 93 23 0a 	sts	0x0A23, r31	; 0x800a23 <__iob+0x1>
    2e96:	e0 93 22 0a 	sts	0x0A22, r30	; 0x800a22 <__iob>
    2e9a:	20 97       	sbiw	r28, 0x00	; 0
    2e9c:	c9 f0       	breq	.+50     	; 0x2ed0 <fdevopen+0x88>
    2e9e:	d1 87       	std	Z+9, r29	; 0x09
    2ea0:	c0 87       	std	Z+8, r28	; 0x08
    2ea2:	83 81       	ldd	r24, Z+3	; 0x03
    2ea4:	82 60       	ori	r24, 0x02	; 2
    2ea6:	83 83       	std	Z+3, r24	; 0x03
    2ea8:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <__iob+0x2>
    2eac:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <__iob+0x3>
    2eb0:	89 2b       	or	r24, r25
    2eb2:	71 f4       	brne	.+28     	; 0x2ed0 <fdevopen+0x88>
    2eb4:	f0 93 25 0a 	sts	0x0A25, r31	; 0x800a25 <__iob+0x3>
    2eb8:	e0 93 24 0a 	sts	0x0A24, r30	; 0x800a24 <__iob+0x2>
    2ebc:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <__iob+0x4>
    2ec0:	90 91 27 0a 	lds	r25, 0x0A27	; 0x800a27 <__iob+0x5>
    2ec4:	89 2b       	or	r24, r25
    2ec6:	21 f4       	brne	.+8      	; 0x2ed0 <fdevopen+0x88>
    2ec8:	f0 93 27 0a 	sts	0x0A27, r31	; 0x800a27 <__iob+0x5>
    2ecc:	e0 93 26 0a 	sts	0x0A26, r30	; 0x800a26 <__iob+0x4>
    2ed0:	cf 01       	movw	r24, r30
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	08 95       	ret

00002edc <calloc>:
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	86 9f       	mul	r24, r22
    2ee6:	80 01       	movw	r16, r0
    2ee8:	87 9f       	mul	r24, r23
    2eea:	10 0d       	add	r17, r0
    2eec:	96 9f       	mul	r25, r22
    2eee:	10 0d       	add	r17, r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	c8 01       	movw	r24, r16
    2ef4:	0d d0       	rcall	.+26     	; 0x2f10 <malloc>
    2ef6:	ec 01       	movw	r28, r24
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <calloc+0x28>
    2efc:	a8 01       	movw	r20, r16
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	27 d1       	rcall	.+590    	; 0x3152 <memset>
    2f04:	ce 01       	movw	r24, r28
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	08 95       	ret

00002f10 <malloc>:
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	82 30       	cpi	r24, 0x02	; 2
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	10 f4       	brcc	.+4      	; 0x2f22 <malloc+0x12>
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	e0 91 2a 0a 	lds	r30, 0x0A2A	; 0x800a2a <__flp>
    2f26:	f0 91 2b 0a 	lds	r31, 0x0A2B	; 0x800a2b <__flp+0x1>
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	a0 e0       	ldi	r26, 0x00	; 0
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	30 97       	sbiw	r30, 0x00	; 0
    2f34:	19 f1       	breq	.+70     	; 0x2f7c <malloc+0x6c>
    2f36:	40 81       	ld	r20, Z
    2f38:	51 81       	ldd	r21, Z+1	; 0x01
    2f3a:	02 81       	ldd	r16, Z+2	; 0x02
    2f3c:	13 81       	ldd	r17, Z+3	; 0x03
    2f3e:	48 17       	cp	r20, r24
    2f40:	59 07       	cpc	r21, r25
    2f42:	c8 f0       	brcs	.+50     	; 0x2f76 <malloc+0x66>
    2f44:	84 17       	cp	r24, r20
    2f46:	95 07       	cpc	r25, r21
    2f48:	69 f4       	brne	.+26     	; 0x2f64 <malloc+0x54>
    2f4a:	10 97       	sbiw	r26, 0x00	; 0
    2f4c:	31 f0       	breq	.+12     	; 0x2f5a <malloc+0x4a>
    2f4e:	12 96       	adiw	r26, 0x02	; 2
    2f50:	0c 93       	st	X, r16
    2f52:	12 97       	sbiw	r26, 0x02	; 2
    2f54:	13 96       	adiw	r26, 0x03	; 3
    2f56:	1c 93       	st	X, r17
    2f58:	27 c0       	rjmp	.+78     	; 0x2fa8 <malloc+0x98>
    2f5a:	00 93 2a 0a 	sts	0x0A2A, r16	; 0x800a2a <__flp>
    2f5e:	10 93 2b 0a 	sts	0x0A2B, r17	; 0x800a2b <__flp+0x1>
    2f62:	22 c0       	rjmp	.+68     	; 0x2fa8 <malloc+0x98>
    2f64:	21 15       	cp	r18, r1
    2f66:	31 05       	cpc	r19, r1
    2f68:	19 f0       	breq	.+6      	; 0x2f70 <malloc+0x60>
    2f6a:	42 17       	cp	r20, r18
    2f6c:	53 07       	cpc	r21, r19
    2f6e:	18 f4       	brcc	.+6      	; 0x2f76 <malloc+0x66>
    2f70:	9a 01       	movw	r18, r20
    2f72:	bd 01       	movw	r22, r26
    2f74:	ef 01       	movw	r28, r30
    2f76:	df 01       	movw	r26, r30
    2f78:	f8 01       	movw	r30, r16
    2f7a:	db cf       	rjmp	.-74     	; 0x2f32 <malloc+0x22>
    2f7c:	21 15       	cp	r18, r1
    2f7e:	31 05       	cpc	r19, r1
    2f80:	f9 f0       	breq	.+62     	; 0x2fc0 <malloc+0xb0>
    2f82:	28 1b       	sub	r18, r24
    2f84:	39 0b       	sbc	r19, r25
    2f86:	24 30       	cpi	r18, 0x04	; 4
    2f88:	31 05       	cpc	r19, r1
    2f8a:	80 f4       	brcc	.+32     	; 0x2fac <malloc+0x9c>
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	61 15       	cp	r22, r1
    2f92:	71 05       	cpc	r23, r1
    2f94:	21 f0       	breq	.+8      	; 0x2f9e <malloc+0x8e>
    2f96:	fb 01       	movw	r30, r22
    2f98:	93 83       	std	Z+3, r25	; 0x03
    2f9a:	82 83       	std	Z+2, r24	; 0x02
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <malloc+0x96>
    2f9e:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__flp+0x1>
    2fa2:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__flp>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	32 96       	adiw	r30, 0x02	; 2
    2faa:	44 c0       	rjmp	.+136    	; 0x3034 <malloc+0x124>
    2fac:	fe 01       	movw	r30, r28
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	81 93       	st	Z+, r24
    2fb4:	91 93       	st	Z+, r25
    2fb6:	22 50       	subi	r18, 0x02	; 2
    2fb8:	31 09       	sbc	r19, r1
    2fba:	39 83       	std	Y+1, r19	; 0x01
    2fbc:	28 83       	st	Y, r18
    2fbe:	3a c0       	rjmp	.+116    	; 0x3034 <malloc+0x124>
    2fc0:	20 91 28 0a 	lds	r18, 0x0A28	; 0x800a28 <__brkval>
    2fc4:	30 91 29 0a 	lds	r19, 0x0A29	; 0x800a29 <__brkval+0x1>
    2fc8:	23 2b       	or	r18, r19
    2fca:	41 f4       	brne	.+16     	; 0x2fdc <malloc+0xcc>
    2fcc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__malloc_heap_start>
    2fd0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__malloc_heap_start+0x1>
    2fd4:	30 93 29 0a 	sts	0x0A29, r19	; 0x800a29 <__brkval+0x1>
    2fd8:	20 93 28 0a 	sts	0x0A28, r18	; 0x800a28 <__brkval>
    2fdc:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <__malloc_heap_end>
    2fe0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <__malloc_heap_end+0x1>
    2fe4:	21 15       	cp	r18, r1
    2fe6:	31 05       	cpc	r19, r1
    2fe8:	41 f4       	brne	.+16     	; 0x2ffa <malloc+0xea>
    2fea:	2d b7       	in	r18, 0x3d	; 61
    2fec:	3e b7       	in	r19, 0x3e	; 62
    2fee:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__malloc_margin>
    2ff2:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__malloc_margin+0x1>
    2ff6:	24 1b       	sub	r18, r20
    2ff8:	35 0b       	sbc	r19, r21
    2ffa:	e0 91 28 0a 	lds	r30, 0x0A28	; 0x800a28 <__brkval>
    2ffe:	f0 91 29 0a 	lds	r31, 0x0A29	; 0x800a29 <__brkval+0x1>
    3002:	e2 17       	cp	r30, r18
    3004:	f3 07       	cpc	r31, r19
    3006:	a0 f4       	brcc	.+40     	; 0x3030 <malloc+0x120>
    3008:	2e 1b       	sub	r18, r30
    300a:	3f 0b       	sbc	r19, r31
    300c:	28 17       	cp	r18, r24
    300e:	39 07       	cpc	r19, r25
    3010:	78 f0       	brcs	.+30     	; 0x3030 <malloc+0x120>
    3012:	ac 01       	movw	r20, r24
    3014:	4e 5f       	subi	r20, 0xFE	; 254
    3016:	5f 4f       	sbci	r21, 0xFF	; 255
    3018:	24 17       	cp	r18, r20
    301a:	35 07       	cpc	r19, r21
    301c:	48 f0       	brcs	.+18     	; 0x3030 <malloc+0x120>
    301e:	4e 0f       	add	r20, r30
    3020:	5f 1f       	adc	r21, r31
    3022:	50 93 29 0a 	sts	0x0A29, r21	; 0x800a29 <__brkval+0x1>
    3026:	40 93 28 0a 	sts	0x0A28, r20	; 0x800a28 <__brkval>
    302a:	81 93       	st	Z+, r24
    302c:	91 93       	st	Z+, r25
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <malloc+0x124>
    3030:	e0 e0       	ldi	r30, 0x00	; 0
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	cf 01       	movw	r24, r30
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

00003040 <free>:
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	09 f4       	brne	.+2      	; 0x304a <free+0xa>
    3048:	81 c0       	rjmp	.+258    	; 0x314c <free+0x10c>
    304a:	fc 01       	movw	r30, r24
    304c:	32 97       	sbiw	r30, 0x02	; 2
    304e:	13 82       	std	Z+3, r1	; 0x03
    3050:	12 82       	std	Z+2, r1	; 0x02
    3052:	a0 91 2a 0a 	lds	r26, 0x0A2A	; 0x800a2a <__flp>
    3056:	b0 91 2b 0a 	lds	r27, 0x0A2B	; 0x800a2b <__flp+0x1>
    305a:	10 97       	sbiw	r26, 0x00	; 0
    305c:	81 f4       	brne	.+32     	; 0x307e <free+0x3e>
    305e:	20 81       	ld	r18, Z
    3060:	31 81       	ldd	r19, Z+1	; 0x01
    3062:	82 0f       	add	r24, r18
    3064:	93 1f       	adc	r25, r19
    3066:	20 91 28 0a 	lds	r18, 0x0A28	; 0x800a28 <__brkval>
    306a:	30 91 29 0a 	lds	r19, 0x0A29	; 0x800a29 <__brkval+0x1>
    306e:	28 17       	cp	r18, r24
    3070:	39 07       	cpc	r19, r25
    3072:	51 f5       	brne	.+84     	; 0x30c8 <free+0x88>
    3074:	f0 93 29 0a 	sts	0x0A29, r31	; 0x800a29 <__brkval+0x1>
    3078:	e0 93 28 0a 	sts	0x0A28, r30	; 0x800a28 <__brkval>
    307c:	67 c0       	rjmp	.+206    	; 0x314c <free+0x10c>
    307e:	ed 01       	movw	r28, r26
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	ce 17       	cp	r28, r30
    3086:	df 07       	cpc	r29, r31
    3088:	40 f4       	brcc	.+16     	; 0x309a <free+0x5a>
    308a:	4a 81       	ldd	r20, Y+2	; 0x02
    308c:	5b 81       	ldd	r21, Y+3	; 0x03
    308e:	9e 01       	movw	r18, r28
    3090:	41 15       	cp	r20, r1
    3092:	51 05       	cpc	r21, r1
    3094:	f1 f0       	breq	.+60     	; 0x30d2 <free+0x92>
    3096:	ea 01       	movw	r28, r20
    3098:	f5 cf       	rjmp	.-22     	; 0x3084 <free+0x44>
    309a:	d3 83       	std	Z+3, r29	; 0x03
    309c:	c2 83       	std	Z+2, r28	; 0x02
    309e:	40 81       	ld	r20, Z
    30a0:	51 81       	ldd	r21, Z+1	; 0x01
    30a2:	84 0f       	add	r24, r20
    30a4:	95 1f       	adc	r25, r21
    30a6:	c8 17       	cp	r28, r24
    30a8:	d9 07       	cpc	r29, r25
    30aa:	59 f4       	brne	.+22     	; 0x30c2 <free+0x82>
    30ac:	88 81       	ld	r24, Y
    30ae:	99 81       	ldd	r25, Y+1	; 0x01
    30b0:	84 0f       	add	r24, r20
    30b2:	95 1f       	adc	r25, r21
    30b4:	02 96       	adiw	r24, 0x02	; 2
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	9b 81       	ldd	r25, Y+3	; 0x03
    30be:	93 83       	std	Z+3, r25	; 0x03
    30c0:	82 83       	std	Z+2, r24	; 0x02
    30c2:	21 15       	cp	r18, r1
    30c4:	31 05       	cpc	r19, r1
    30c6:	29 f4       	brne	.+10     	; 0x30d2 <free+0x92>
    30c8:	f0 93 2b 0a 	sts	0x0A2B, r31	; 0x800a2b <__flp+0x1>
    30cc:	e0 93 2a 0a 	sts	0x0A2A, r30	; 0x800a2a <__flp>
    30d0:	3d c0       	rjmp	.+122    	; 0x314c <free+0x10c>
    30d2:	e9 01       	movw	r28, r18
    30d4:	fb 83       	std	Y+3, r31	; 0x03
    30d6:	ea 83       	std	Y+2, r30	; 0x02
    30d8:	49 91       	ld	r20, Y+
    30da:	59 91       	ld	r21, Y+
    30dc:	c4 0f       	add	r28, r20
    30de:	d5 1f       	adc	r29, r21
    30e0:	ec 17       	cp	r30, r28
    30e2:	fd 07       	cpc	r31, r29
    30e4:	61 f4       	brne	.+24     	; 0x30fe <free+0xbe>
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	84 0f       	add	r24, r20
    30ec:	95 1f       	adc	r25, r21
    30ee:	02 96       	adiw	r24, 0x02	; 2
    30f0:	e9 01       	movw	r28, r18
    30f2:	99 83       	std	Y+1, r25	; 0x01
    30f4:	88 83       	st	Y, r24
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	9b 83       	std	Y+3, r25	; 0x03
    30fc:	8a 83       	std	Y+2, r24	; 0x02
    30fe:	e0 e0       	ldi	r30, 0x00	; 0
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	12 96       	adiw	r26, 0x02	; 2
    3104:	8d 91       	ld	r24, X+
    3106:	9c 91       	ld	r25, X
    3108:	13 97       	sbiw	r26, 0x03	; 3
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	19 f0       	breq	.+6      	; 0x3114 <free+0xd4>
    310e:	fd 01       	movw	r30, r26
    3110:	dc 01       	movw	r26, r24
    3112:	f7 cf       	rjmp	.-18     	; 0x3102 <free+0xc2>
    3114:	8d 91       	ld	r24, X+
    3116:	9c 91       	ld	r25, X
    3118:	11 97       	sbiw	r26, 0x01	; 1
    311a:	9d 01       	movw	r18, r26
    311c:	2e 5f       	subi	r18, 0xFE	; 254
    311e:	3f 4f       	sbci	r19, 0xFF	; 255
    3120:	82 0f       	add	r24, r18
    3122:	93 1f       	adc	r25, r19
    3124:	20 91 28 0a 	lds	r18, 0x0A28	; 0x800a28 <__brkval>
    3128:	30 91 29 0a 	lds	r19, 0x0A29	; 0x800a29 <__brkval+0x1>
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	69 f4       	brne	.+26     	; 0x314c <free+0x10c>
    3132:	30 97       	sbiw	r30, 0x00	; 0
    3134:	29 f4       	brne	.+10     	; 0x3140 <free+0x100>
    3136:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__flp+0x1>
    313a:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__flp>
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <free+0x104>
    3140:	13 82       	std	Z+3, r1	; 0x03
    3142:	12 82       	std	Z+2, r1	; 0x02
    3144:	b0 93 29 0a 	sts	0x0A29, r27	; 0x800a29 <__brkval+0x1>
    3148:	a0 93 28 0a 	sts	0x0A28, r26	; 0x800a28 <__brkval>
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	08 95       	ret

00003152 <memset>:
    3152:	dc 01       	movw	r26, r24
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <memset+0x6>
    3156:	6d 93       	st	X+, r22
    3158:	41 50       	subi	r20, 0x01	; 1
    315a:	50 40       	sbci	r21, 0x00	; 0
    315c:	e0 f7       	brcc	.-8      	; 0x3156 <memset+0x4>
    315e:	08 95       	ret

00003160 <__divmodsi4>:
    3160:	05 2e       	mov	r0, r21
    3162:	97 fb       	bst	r25, 7
    3164:	16 f4       	brtc	.+4      	; 0x316a <__divmodsi4+0xa>
    3166:	00 94       	com	r0
    3168:	0f d0       	rcall	.+30     	; 0x3188 <__negsi2>
    316a:	57 fd       	sbrc	r21, 7
    316c:	05 d0       	rcall	.+10     	; 0x3178 <__divmodsi4_neg2>
    316e:	d3 dd       	rcall	.-1114   	; 0x2d16 <__udivmodsi4>
    3170:	07 fc       	sbrc	r0, 7
    3172:	02 d0       	rcall	.+4      	; 0x3178 <__divmodsi4_neg2>
    3174:	46 f4       	brtc	.+16     	; 0x3186 <__divmodsi4_exit>
    3176:	08 c0       	rjmp	.+16     	; 0x3188 <__negsi2>

00003178 <__divmodsi4_neg2>:
    3178:	50 95       	com	r21
    317a:	40 95       	com	r20
    317c:	30 95       	com	r19
    317e:	21 95       	neg	r18
    3180:	3f 4f       	sbci	r19, 0xFF	; 255
    3182:	4f 4f       	sbci	r20, 0xFF	; 255
    3184:	5f 4f       	sbci	r21, 0xFF	; 255

00003186 <__divmodsi4_exit>:
    3186:	08 95       	ret

00003188 <__negsi2>:
    3188:	90 95       	com	r25
    318a:	80 95       	com	r24
    318c:	70 95       	com	r23
    318e:	61 95       	neg	r22
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	8f 4f       	sbci	r24, 0xFF	; 255
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	08 95       	ret

00003198 <__mulshisi3>:
    3198:	b7 ff       	sbrs	r27, 7
    319a:	df cd       	rjmp	.-1090   	; 0x2d5a <__muluhisi3>

0000319c <__mulohisi3>:
    319c:	de dd       	rcall	.-1092   	; 0x2d5a <__muluhisi3>
    319e:	82 1b       	sub	r24, r18
    31a0:	93 0b       	sbc	r25, r19
    31a2:	08 95       	ret

000031a4 <_exit>:
    31a4:	f8 94       	cli

000031a6 <__stop_program>:
    31a6:	ff cf       	rjmp	.-2      	; 0x31a6 <__stop_program>
